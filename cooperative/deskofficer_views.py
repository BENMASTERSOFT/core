from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse, HttpResponseRedirect
from cooperative.models import *
from django.contrib import messages
from django.urls import reverse
from cooperative.forms import *
from django.db.models import Q
from django.db.models import Count, Sum
from django.db.models import  F, CharField, Value as V
from django.db.models.functions import Concat
from cooperative.resources import NorminalRollResource, AccountDeductionsResource,AuxillaryDeductionsResource
from tablib import Dataset
from django.template import defaultfilters
from django.contrib import messages
from . auto_receipt_manager import get_receipt
from datetime import datetime
from datetime import date
import datetime
from reportlab.lib import colors

from django.utils.dateparse import parse_date
from dateutil.relativedelta import relativedelta

import xlwt
from django.db.models import F
import pandas as pd

from .personnal_ledger_diplay import Display_PersonalLedger,Display_PersonalLedger_All_Records
from .current_date import get_current_date,get_print_date
from .loan_data import *
from .members_search import *
import math
from .load_ticket import get_ticket
from .ledger_posting import *
from .Savings_Data import *
from .cashbook_manager import *
import time
from . receipt_manager import *

now = datetime.datetime.now()

from io import BytesIO
from django.template.loader import get_template
from xhtml2pdf import pisa
from . utils import render_to_pdf
from .monthly_transaction_reset import reset_monthly_generated_transaction


month_list =['JANUARY','FEBRUARY','MARCH','APRIL','MAY','JUNE','JULY','AUGUST','SEPTEMBER','OCTOBER','NOVEMBER','DECEMBER']


############################################################
########## REPORT LAB IMPORT ##############################
############################################################

from django.http import FileResponse
import io
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from reportlab.lib.pagesizes import letter, A4, landscape, A5
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.enums import TA_JUSTIFY, TA_LEFT, TA_CENTER, TA_RIGHT
from . program import  generatePDF
from reportlab.platypus import Table, Image, Paragraph

from . report_deduction_cover import deductionCoverDateTable, addressTable,deductionOrderBodyTable,bankTable,signatureTable
from . Loan_Application_Issueance import loanApplicationIssueanceMainHeaderTitle,Loan_Application_Issueance_dateTable, Loan_Application_IssueanceSectionATable, \
											Loan_Application_IssueanceSectionBTable,Loan_Application_IssueanceSectionCTable, Loan_Application_IssueanceSectionApprovalTable
from . report_membership import _membershipMainHeaderTitle,_membershipGenHeaderTable,_membershipReceiptSection,_membershipGenBodyTable,_membershipGenFooterTable

from . report_membership_deduction_order import _membershipDeductionOrderHeader, _membershipDeductionOrderGetLogoTable, _membershipDeductionOrderReceiptSection, \
													_membershipDeductionOrderDeductionGenBodyTable,_membershipDeductionOrderGenFooterTable
from . report_loan_application_certicate import _loanApplicationCerticateHeader, _loanApplicationCerticateGetLogoTable, _loanApplicationCerticatePersonnelSection \
												,_loanApplicationCerticateMembershipGenFooterTable,_loanApplicationCerticateGenSignatureTable,_loanApplicationCerticateGenGurantorTable,_loanApplicationCerticateGenBodyTable, _loanApplicationCerticateGenNextOfKinTable

from . report_commodity_trending_product import _trendingProductHeader, _trendingProductGetLogoTable, _trendingProductBodyTable
from . report_commodity_loan_custom_invoicing_processing_Receipt_SectionA import _commodity_temporary_invoice_original, _commodity_temporary_invoice_duplicate
from . report_commodity_loan_processing_main_receipt import _commodity_main_invoice_original




def commodity_loan_processing_Receipt_Print(request,pk):
	record=Members_Commodity_Loan_Completed_Transactions.objects.get(loan_number=pk)
	operator=request.user.username
	buf = io.BytesIO()

	# pdf = canvas.Canvas(buf, pagesize = A4)
	pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	# width, height = A4
	width, height =landscape(A4)

	widthList = [
		width * 1 / 100,
		width * 48 / 100,
		width * 2 / 100,
		width * 48 / 100,
		width * 1 / 100,
	
	]
	heightList = [
			height * 5 / 100,
			height * 90 / 100,
		
			height * 5 / 100,
		
		]


	mainTable = Table([
			['','','','',''],
			['',_commodity_main_invoice_original(widthList[1],heightList[1],record.receipt),'',_commodity_main_invoice_original(widthList[3],heightList[1],record.receipt),''],
			['','','','',''],
			
		],
		colWidths= widthList,
		rowHeights= heightList
		)
	color = colors.toColor('rgba(0, 115, 153, 0.1)')
	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		('TEXTCOLOR',(0,0),(0,0),'black'),
		('FONTSIZE', (0,0), (0,0), 16),
		('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),
		('BACKGROUND', (0,0), (-1,-1), color),

		('ALIGN', (0,0), (0,-1), 'CENTER'),
		('VALIGN', (0,0), (0,-1), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (0, 2), 0),
		('BOTTOMPADDING', (0, 0), (-1, -1), 0),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='venue.pdf')
	return HttpResponse(buf,   content_type='application/pdf')




def commodity_loan_custom_invoicing_processing_Receipt_Print(request,pk):

	record=Members_Commodity_Loan_Application.objects.get(receipt=pk)
	operator=request.user.username
	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)

	heightList = [
		height * 49 / 100,
		height * 2 / 100,
		height * 49 / 100,
	
	]


	mainTable = Table([
			[_commodity_temporary_invoice_original(width,heightList[0],record.receipt)],
			['========================================================================================================='],
			[_commodity_temporary_invoice_duplicate(width,heightList[2],record.receipt)], #
		
		],
		colWidths= width,
		rowHeights= heightList
		)

	color = colors.toColor('rgba(0, 115, 153, 0.11)')
	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		('TEXTCOLOR',(0,0),(0,0),'black'),
		('FONTSIZE', (0,0), (0,0), 16),
		('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		('ALIGN', (0,0), (0,-1), 'CENTER'),
		('VALIGN', (0,0), (0,-1), 'MIDDLE'),
		('BACKGROUND', (0,0), (-1,-1), color),

		('LEFTPADDING', (0, 0), (0, 2), 0),
		('BOTTOMPADDING', (0, 0), (-1, -1), 0),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='venue.pdf')
	return HttpResponse(buf,   content_type='application/pdf')



def commodity_trending_product_Print(request,pk):
	applicant=Members.objects.get(id=pk)
	operator=request.user.username
	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)
	width=width-20
	heightList = [
		height * 8 / 100,
		height * 10 / 100,
		height * 8 / 100,
		height * 3 / 100,
		height * 30 / 100,
		height * 2 / 100,
		height * 13 / 100,
		height * 1 / 100,
		height * 12 / 100,
		height * 13 / 100,
		height * 1 / 100,
	]

	tdate=get_print_date(now)
	receipt_id=pk



	mainTable = Table([
			[_trendingProductHeader()],
			[_trendingProductGetLogoTable(width,heightList[1])],
			[''],
			[''],
			[_trendingProductBodyTable(width,heightList[4])],
			[''],
			[''],
			[''],
			[''],
			[''],
			[''],

		],
		colWidths= width-40,
		rowHeights= heightList
		)

	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		# ('TEXTCOLOR',(0,0),(0,0),'black'),
		# ('FONTSIZE', (0,0), (0,0), 16),
		# ('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		# ('ALIGN', (0,0), (0,0), 'CENTER'),
		# ('VALIGN', (0,0), (0,0), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (-1, -1), 5),
		('BOTTOMPADDING', (0, 0), (0, 0), 10),
		# ('BOTTOMPADDING', (0, 0), (1, 0), 10),
		# ('RIGHTADDING', (0, 0), (-1, -1), 15),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='loan_certificate.pdf')
	return HttpResponse(buf,   content_type='application/pdf')



def Loan_application_processing_Form_Print(request,pk):
	applicant=LoansRepaymentBase.objects.get(loan_number=pk)
	operator=request.user.username
	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)

	heightList = [
		height * 8 / 100,
		height * 10 / 100,
		height * 8 / 100,
		height * 3 / 100,
		height * 30 / 100,
		height * 2 / 100,
		height * 13 / 100,
		height * 1 / 100,
		height * 12 / 100,
		height * 7 / 100,
		height * 5 / 100,
		height * 1 / 100,
	]

	tdate=get_print_date(now)
	receipt_id=pk

	style = ParagraphStyle('sectionb')
	style.fontName = 'Helvetica'
	style.fontSize = 12
	style.alignment = TA_CENTER

	titlePara = Paragraph(f'<u><b>SECTION B</b><i>(Loan Details)</i></u>',style)



	mainTable = Table([
			[_loanApplicationCerticateHeader()],
			[_loanApplicationCerticateGetLogoTable(width,heightList[1])],
			[_loanApplicationCerticatePersonnelSection(width,heightList[2],pk)],
			[titlePara],
			[_loanApplicationCerticateGenBodyTable(width,heightList[4],pk)],
			[''],
			[_loanApplicationCerticateGenNextOfKinTable(width,heightList[6],pk)],
			[''],
			[_loanApplicationCerticateGenGurantorTable(width,heightList[8],pk)],
			[_loanApplicationCerticateGenSignatureTable(width,heightList[9])],
			[_loanApplicationCerticateMembershipGenFooterTable(width, heightList[10],operator)],
			[''],
		],
		colWidths= width-40,
		rowHeights= heightList
		)

	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		# ('TEXTCOLOR',(0,0),(0,0),'black'),
		# ('FONTSIZE', (0,0), (0,0), 16),
		# ('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		# ('ALIGN', (0,0), (0,0), 'CENTER'),
		# ('VALIGN', (0,0), (0,0), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (-1, -1), 5),
		('BOTTOMPADDING', (0, 0), (0, 0), 10),
		# ('BOTTOMPADDING', (0, 0), (1, 0), 10),
		# ('RIGHTADDING', (0, 0), (-1, -1), 15),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	return HttpResponse(buf,   content_type='application/pdf')
	# return FileResponse(buf, as_attachment=True, filename='loan_certificate.pdf')



def Loan_application_processing_confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	applicant=LoansRepaymentBase.objects.get(loan_number=pk)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicant':applicant,

	}
	return render(request, 'deskofficer_templates/Loan_application_processing_confirmation.html',context)


def Emergency_Loan_application_processing_confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	applicant=LoansRepaymentBase.objects.get(loan_number=pk)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicant':applicant,

	}
	return render(request, 'deskofficer_templates/Emergency_Loan_application_processing_confirmation.html',context)



def Loan_Application_Issueance_Form_Print(request,pk):
	record=LoanFormIssuance.objects.get(receipt=pk)
	operator=request.user.username
	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)

	heightList = [
		height * 8 / 100,
		height * 4 / 100,
		height * 1 / 100,
		height * 40 / 100,
		height * 19 / 100,
		height * 24 / 100,
		height * 2 / 100,
		height * 2 / 100,
	]

	tdate=get_print_date(now)
	receipt_id=pk
	mainTable = Table([
			[loanApplicationIssueanceMainHeaderTitle()],
			[Loan_Application_Issueance_dateTable(width,heightList[1],pk,tdate)],
			[''],
			[Loan_Application_IssueanceSectionATable(width,heightList[3],pk)],
			[Loan_Application_IssueanceSectionBTable(width,heightList[4])],
			[Loan_Application_IssueanceSectionCTable(width,heightList[5],pk)],
			[Loan_Application_IssueanceSectionApprovalTable(width,heightList[6])],
			['']
		],
		colWidths= width,
		rowHeights= heightList
		)

	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		# ('TEXTCOLOR',(0,0),(0,0),'black'),
		# ('FONTSIZE', (0,0), (0,0), 16),
		# ('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		# ('ALIGN', (0,0), (0,0), 'CENTER'),
		# ('VALIGN', (0,0), (0,0), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (-1, -1), 16),
		('BOTTOMPADDING', (0, 0), (-1, -1), 0),
		('BOTTOMPADDING', (0, 0), (1, 0), 10),
		# ('RIGHTADDING', (0, 0), (-1, -1), 15),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='deduction.pdf')
	return HttpResponse(buf,   content_type='application/pdf')




def Monthly_Deduction_Covering_Note(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = Monthly_Deduction_Covering_Note_Form(request.POST or None)


	if request.method == 'POST':
		staff1_id = request.POST.get('staff1')
		staff1 = Executives.objects.get(id=staff1_id)


		account = request.POST.get('account')
		# account = CooperativeBankAccounts.objects.get(id=account_id)

		staff2_id = request.POST.get('staff2')
		staff2 = Executives.objects.get(id=staff2_id)

		if staff1_id == staff2_id:
			messages.error(request,'Duplicate Selection Not Allowed')
			return HttpResponseRedirect(reverse('Monthly_Deduction_Covering_Note'))


		print_date_id = request.POST.get('print_date')
		transaction_date_id = request.POST.get('transaction_date')

		date_format = '%Y-%m-%d'


		dtObj = datetime.datetime.strptime(print_date_id, date_format)
		print_date=get_print_date(dtObj)

		dtObj = datetime.datetime.strptime(transaction_date_id, date_format)
		transaction_date=get_current_date(dtObj)
		month = month_list[transaction_date.month-1]

		transaction_period = '{} {}'.format(month,transaction_date.year)


		return HttpResponseRedirect(reverse('Monthly_Deduction_Covering_Note_Print',args=(print_date,transaction_period,staff1.name,staff1.position.title,staff2.name,staff2.position.title,account)))

	form.fields['print_date'].initial = now
	form.fields['transaction_date'].initial = now
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request, 'deskofficer_templates/Monthly_Deduction_Covering_Note.html',context)





def Monthly_Deduction_Covering_Note_Print(request,print_date,transaction_period,staff1,position1,staff2,position2,account):
	operator=request.user.username


	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)

	heightList = [
		height * 25 / 100,
		height * 3 / 100,
		height * 13 / 100,
		height * 18 / 100,
		height * 23 / 100,
		height * 13 / 100,
		height * 7 / 100,
	]

	tdate=get_print_date(now)

	stafList = [
	staff1,
	staff2,
	position1,
	position2,
	]
	mainTable = Table([
			[''],
			[deductionCoverDateTable(width,heightList[1],tdate)], #
			[addressTable(width,heightList[2])],
			[deductionOrderBodyTable(width,heightList[3],transaction_period)],

			[bankTable(width,heightList[4],account)],
			[signatureTable(width,heightList[5],stafList)],
			['']
		],
		colWidths= width,
		rowHeights= heightList
		)

	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		# ('TEXTCOLOR',(0,0),(0,0),'black'),
		# ('FONTSIZE', (0,0), (0,0), 16),
		# ('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		('ALIGN', (0,1), (1,1), 'RIGHT'),
		# ('VALIGN', (0,0), (0,0), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (-1, -1), 50),
		('BOTTOMPADDING', (0, 0), (-1, -1), 0),
		# ('TOPADDING', (0, 3), (0, -1), 15),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='deduction.pdf')
	return HttpResponse(buf,   content_type='application/pdf')





def Membership_Front_Form_Print(request,pk):
	record=MemberShipFormSalesRecord.objects.get(receipt=pk)
	operator=request.user.username
	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)

	heightList = [
		height * 6 / 100,
		height * 15 / 100,
		height * 3 / 100,
		height * 71 / 100,
		height * 3 / 100,
		height * 2 / 100,
	]


	mainTable = Table([
			[_membershipMainHeaderTitle()],#_registeredMembersMainHeaderTitle()
			[_membershipGenHeaderTable(width, heightList[1])], #
			[_membershipReceiptSection(width,heightList[2],pk)],#
			[_membershipGenBodyTable(width, heightList[3],pk)],#
			[_membershipGenFooterTable(width, heightList[4],operator)],#
			['']
		],
		colWidths= width,
		rowHeights= heightList
		)

	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		('TEXTCOLOR',(0,0),(0,0),'black'),
		('FONTSIZE', (0,0), (0,0), 16),
		('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		('ALIGN', (0,0), (0,0), 'CENTER'),
		('VALIGN', (0,0), (0,0), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (0, 2), 0),
		('BOTTOMPADDING', (0, 0), (-1, -1), 0),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='venue.pdf')
	return HttpResponse(buf,   content_type='application/pdf')

def Membership_Deduction_Order_Form_Print(request,pk):
	record=MemberShipFormSalesRecord.objects.get(receipt=pk)
	operator=request.user.username
	buf = io.BytesIO()

	pdf = canvas.Canvas(buf, pagesize = A4)
	# pdf = canvas.Canvas(buf, pagesize = landscape(A4))
	pdf.setTitle("FETHA II CTCS")

	# for font in pdf.getAvailableFonts():
	# 	print(font)


	width, height = A4
	# width, height =landscape(A4)

	heightList = [
		height * 6 / 100,
		height * 10 / 100,
		height * 2 / 100,
		height * 78 / 100,
		height * 2 / 100,
		height * 2 / 100,
	]

	widthList=[
	width * 2/100,
	width * 90/100,
	]
	mainTable = Table([
			['',_membershipDeductionOrderHeader()],#
			['',_membershipDeductionOrderGetLogoTable(width,heightList[1])],#
			['',_membershipDeductionOrderReceiptSection(width,heightList[2],pk)],#
			['',_membershipDeductionOrderDeductionGenBodyTable(width,heightList[3],pk)],#
			['',_membershipDeductionOrderGenFooterTable(width,heightList[4],operator)],#
			['','']
		],
		colWidths= widthList,
		rowHeights= heightList
		)

	mainTable.setStyle([
		# ('GRID', (0, 0), (-1, -1), 1, 'red'),
		# ('TEXTCOLOR',(0,0),(0,0),'black'),
		# ('FONTSIZE', (0,0), (0,0), 16),
		# ('FONTNAME', (0,0), (0,0), 'Helvetica-Bold'),

		# ('ALIGN', (0,0), (0,0), 'CENTER'),
		# ('VALIGN', (0,0), (0,0), 'MIDDLE'),


		('LEFTPADDING', (0, 0), (-1, -1), 0),
		('BOTTOMPADDING', (0, 0), (-1, -1), 0),
		# ('TOPADDING', (0, 3), (0, -1), 15),
		])

	mainTable.wrapOn(pdf, 0, 0)
	mainTable.drawOn(pdf, 0, 0)
	pdf.showPage()
	pdf.save()

	buf.seek(0)

	# Return something
	# return FileResponse(buf, as_attachment=True, filename='deduction.pdf')
	return HttpResponse(buf,   content_type='application/pdf')



# def index(request):
#     # current_datetime = datetime.datetime.now()
#     # html = "<html><body><b>Current Date and Time Value:</b> %s</body></html>" % current_datetime
#     # return HttpResponse(html)

#     # current_time = datetime.datetime.now().strftime('%H:%M:%S')
#     # html = "<html><body><b>Current Time Value:</b> %s</body></html>" % current_time
#     # return HttpResponse(html)

#     # current_time = datetime.datetime.now().strftime('%H:%M')
#     # html = "<html><body><b>Current Time Value:</b> %s</body></html>" % current_time
#     # return HttpResponse(html)

#     # current_time = datetime.datetime.now().time()
#     # html = "<html><body><b>Current Time Value:</b> %s</body></html>" % current_time
#     # return HttpResponse(html)

#     t = time.localtime()
#     current_time = time.strftime("%H:%M", t)
#     html = "<html><body><b>Current Time Value:</b> %s</body></html>" % current_time
#     return HttpResponse(html)








def deskofficer_home(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	StandingOrderAccounts.objects.filter(amount=0).delete()
	
	# LoansRepaymentBase.objects.all().update(base_amount=F('loan_amount'))
	


	# for item in queryset:
	# 	interest=math.ceil(float(5/100)* float(item.loan_amount))
		
	# 	LoanRequest.objects.filter(id=item.pk).update(interest=interest)



	# members = Members.objects.all().update(status='ACTIVE')
	# PersonalLedger.objects.filter(member__coop_no='00002').update(status='ACTIVE')
	# x = 10
	# members = Members.objects.all()
	# member_array=[]
	# for item in members:
	# 	member_array.append(int(item.coop_no))
		
	# print(member_array)
	# if x in member_array:
	# 	print(f'{x} noted')
		# if int(item.coop_no) in range(1,2000):
		# 	pass
		# else:
		# 	print(f'{item.coop_no} done')
		
	# TransactionAjustmentRequest.objects.filter().delete()


	# Members_Xmas_Commodity_Loan_Products_Selection.objects.filter().update(selection_completed="NO")



	# records=StandingOrderAccounts.objects.filter(status='INACTIVE').update(status='ACTIVE')
	# records=StandingOrderAccounts.objects.filter(status='INACTIVE')
	# for item in records:
	# 	print(f'{item.transaction.member.coop_no} | {item.transaction.member.get_full_name} | {item.amount}')

	# print("=============================================")
	# print("=============================================")
	# print("=============================================")
	# print(records.count())










	# queryset=PersonalLedger.objects.filter().order_by('member__coop_no').values_list('id','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no','member__coop_no','account_number','transaction__name','particulars').distinct()
	# print(queryset.count())
	# print("=============================")
	# print("=============================")
	# print("=============================")
	# k=0
	# for item in queryset:
	# 	if len(str(item[6]))>6 and item[8][:7]=='Monthly':
			
	# 		k+=1
	# 		print(f'S/NO: {item[0]} | Name: {item[1]} {item[2]} {item[3]} | IPPIS NO: {item[4]} | COOP NO: {item[5]} | ACCOUNT NUMBER: {item[6]} | ACCOUNT NAME: {item[7]} | PARTICULARS: {item[8][:7]}')
	# print("=================================")
	# print(k)


	# queryset=PersonalLedger.objects.filter().order_by('member__coop_no') #.values_list('id','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no','member__coop_no','account_number','transaction__name','particulars').distinct()
	# print(queryset.count())
	# print("=============================")
	# print("=============================")
	# print("=============================")
	# k=0
	# for item in queryset:
	# 	if PersonalLedger.objects.filter(account_number=item.account_number).count()>1:
	# 		record=PersonalLedger.objects.filter(account_number=item.account_number).first()
	# 	else:
	# 		record=PersonalLedger.objects.get(account_number=item.account_number)
		
	# 	task=record.particulars[:7]	
	# 	if len(str(record.account_number))>6 and task=='Monthly':
				
	# 			k+=1
	# 			print(f'S/NO: {record.pk} | Name: {record.member.admin.last_name} {record.member.admin.first_name} {record.member.middle_name} | IPPIS NO: {record.member.ippis_no} | COOP NO: {record.member.coop_no} | ACCOUNT NUMBER: {record.transaction.name} | ACCOUNT NAME: {record.account_number} | PARTICULARS: {task}')
	# print("=================================")
	# print(k)
	

	# MonthlyDeductionList.objects.all().update(amount_deducted=0,balance=0,repayment=0,status='UNTREATED')
	
	################################################################################################
	################################################################################################
	###################### MonthlyGeneratedTransactions.objects.filter().delete() do not temper#################
	###################### MonthlyDeductionGenerationHeading.objects.filter().delete() do not temper############
	#####################################################################################################################
	################################################################################################




	# MonthlyGroupGeneratedTransactions.objects.filter().delete()
	# MonthlyDeductionListGenerated.objects.filter().delete()




	# MonthlyJointDeductionList.objects.filter().delete()
	# MonthlyJointDeductionGeneratedTransactions.objects.filter().delete()
	# MonthlyJointDeductionGenerated.objects.filter().delete()
	
	# AccountDeductions.objects.filter().delete()
	# AuxillaryDeductions.objects.filter().delete()
	
	
	
	# queryset=PersonalLedger.objects.filter(Q(transaction__source__title='SAVINGS') & Q(debit__gt=0))
	# for item in queryset:
	# 	item.credit=item.debit
	# 	item.save()


	# PersonalLedger.objects.filter(Q(transaction__source__title='SAVINGS') & Q(debit__gt=0)).update(debit=0)
	
	# queryset=Members.objects.all().order_by('coop_no').last()
	# print(queryset.coop_no)
	
	member_count=Members.objects.filter(status='ACTIVE').count()

	applicants=MemberShipRequest.objects.filter(transaction_status='UNTREATED',approval_status='APPROVED').count()

	title="System User"

	context={
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'task_array':task_array,
	'applicants':applicants,
	'title':title,
	'member_count':member_count,
	}
	return render(request, "deskofficer_templates/dashboard.html",context)


def desk_basic_card(request):
	return render(request, 'deskofficer_templates/basics/cards.html')

def desk_basic_form(request):
	return render(request, 'deskofficer_templates/basics/basic_form1.html')

def desk_widgets_form(request):
	return render(request, 'deskofficer_templates/basics/widgets.html')

def desk_advanced_form(request):
	return render(request, 'deskofficer_templates/basics/advanced_form.html')


def desk_basic_table(request):
	return render(request, 'deskofficer_templates/basics/basic_tables.html')

def desk_datatable_table(request):
	return render(request, 'deskofficer_templates/basics/datatable.html')



@csrf_exempt
def check_receipt_no_already_used(request):
	receipt_no=request.POST.get("receipt_no")
	receipt_no_obj=Receipts.objects.filter(receipt=receipt_no,status='USED').exists()
	if receipt_no_obj:
		return HttpResponse(True)
	else:
		return  HttpResponse(False)


#########################################################
############### PROFILE MANAGER #########################
#########################################################
def Useraccount_manager(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Useraccount_manager_form(request.POST or None)
	user=CustomUser.objects.get(id=request.user.id)

	form.fields['username'].initial= user.username
	if request.method == 'POST':
		change_password=request.POST.get('changepassword')
		password1=request.POST.get('password1')
		password2=request.POST.get('password2')

		if password1 != password2:
			messages.info(request,"Password Mistmatch")
			return HttpResponseRedirect(reverse('Useraccount_manager'))

		Staff.objects.filter(admin=request.user).update(default_password='NO')

		user.set_password(password1)
		user.save()
		return HttpResponseRedirect(reverse('Useraccount_manager'))

	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Useraccount_manager.html',context)


#########################################################
############### MEMBERSHIP TASK #########################
#########################################################

def membership_request(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=MembershipRequest_form(request.POST or None)
	if request.method=="POST":
		date_applied_id=request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_applied_id, date_format)
		date_applied=get_current_date(dtObj)


		tdate=get_current_date(now)

		form=MembershipRequest_form(request.POST)

		processed_by = CustomUser.objects.get(id=request.user.id)

		title_id=request.POST.get("titles")
		title=Titles.objects.get(id=title_id)

		first_name=request.POST.get("first_name").upper()
		last_name=request.POST.get("last_name").upper()
		middle_name=request.POST.get("middle_name").upper()
		phone_no=request.POST.get("phone_no")

		gender_id=request.POST.get("gender")
		gender=Gender.objects.get(id=gender_id)

		department_id=request.POST.get("department")
		department=Departments.objects.get(id=department_id)
		record=MemberShipRequest(transaction_status='UNTREATED',
								submission_status='PENDING',
								approval_status='PENDING',
								tdate=tdate,title=title,
								first_name=first_name,
								last_name=last_name,
								middle_name=middle_name,
								phone_number=phone_no,
								gender=gender,
								department=department,
								date_applied=date_applied,
								processed_by=processed_by.username)
		record.save()


		return HttpResponseRedirect(reverse('membership_request_additional_info',args=(record.pk,)))
	form.fields['date_applied'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request, 'deskofficer_templates/membership_request.html',context)


def membership_request_complete_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Request Completion"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_request_complete_search.html',{'form':form,'title':title,'task_array':task_array})


def membership_request_complete_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Complete Membership Request"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('membership_request_complete_search'))

		members=MemberShipRequest.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(first_name__icontains=form['title'].value()) | Q(last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(submission_status='PENDING')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_request_complete_list_load.html',context)


def membership_request_additional_info(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=MemberShipRequest.objects.get(id=pk)
	officer=CustomUser.objects.get(id=request.user.id)

	records=MemberShipRequestAdditionalInfo.objects.filter(officer=officer,applicant=applicant)

	attached_infos=MemberShipRequestAdditionalAttachment.objects.filter(officer=officer,applicant=applicant)

	comment_form =MemberShipRequestAdditionalInfo_form(request.POST or None)
	attachment_form =MemberShipRequestAdditionalAttachment_form(request.POST or None)

	context={
	'comment_form':comment_form,
	'attachment_form':attachment_form,
	'pk':pk,
	'records':records,
	'attached_infos':attached_infos,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_request_additional_info.html',context)


def membership_request_additional_info_save(request,pk):
	applicant=MemberShipRequest.objects.get(id=pk)
	officer=CustomUser.objects.get(id=request.user.id)

	comment = request.POST.get('comment')
	if not comment:
		messages.error(request,'Please Enter Comment')
		return HttpResponseRedirect(reverse('membership_request_additional_info',args=(pk,)))

	record=MemberShipRequestAdditionalInfo(comment=comment,officer=officer,applicant=applicant)
	record.save()
	messages.success(request,"Record Added Successfully")
	return HttpResponseRedirect(reverse('membership_request_additional_info',args=(pk,)))


def membership_request_additional_info_update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status='YES')
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=MemberShipRequestAdditionalInfo_form(request.POST or None)
	record=MemberShipRequestAdditionalInfo.objects.get(id=pk)
	form.fields['comment'].initial=record.comment

	if request.method == "POST":
		comment=request.POST.get('comment')
		record.comment=comment
		record.save()
		return HttpResponseRedirect(reverse('membership_request_additional_info',args=(record.applicant.pk,)))
	context={
	'form':form,
	'record':record,
	}
	return render(request,'deskofficer_templates/membership_request_additional_info_update.html',context)




def membership_request_additional_info_delete_confirm(request,pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="task_status")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	comment=MemberShipRequestAdditionalInfo.objects.get(id=pk)


	context={
	'comment':comment,
	'pk':pk,
	'return_pk':return_pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_request_additional_info_delete_confirm.html',context)




def membership_request_additional_info_delete(request,pk,return_pk):
	comment=MemberShipRequestAdditionalInfo.objects.get(id=pk)
	comment.delete()
	return HttpResponseRedirect(reverse('membership_request_additional_info',args=(return_pk,)))


def MemberShipRequestAdditionalAttachment_save(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=MemberShipRequest.objects.get(id=pk)
	officer=CustomUser.objects.get(id=request.user.id)

	if request.FILES.get('image', False):
		image = request.FILES['image']
		fs=FileSystemStorage()
		filename=fs.save(image.name,image)
		image_url=fs.url(filename)

	else:
		image_url=None

	caption=request.POST.get('caption')
	if not caption:
		messages.error(request,'Please Enter attachment caption')
		return HttpResponseRedirect(reverse('membership_request_additional_info',args=(pk,)))

	if MemberShipRequestAdditionalAttachment.objects.filter(officer=officer,applicant=applicant,caption=caption).exists():
		member= MemberShipRequestAdditionalAttachment.objects.get(officer=officer,applicant=applicant,caption=caption)
		member.image=image_url
		member.save()
		messages.success(request,"Successfully Updated Record")
		return HttpResponseRedirect(reverse('membership_request_additional_info',args=(pk,)))

	member=MemberShipRequestAdditionalAttachment(image=image_url,officer=officer,applicant=applicant,caption=caption)
	member.save()
	messages.success(request,"Successfully Added Record")
	return HttpResponseRedirect(reverse('membership_request_additional_info',args=(pk,)))




def MemberShipRequestAdditionalAttachment_info_delete_confirm(request,pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	comment=MemberShipRequestAdditionalAttachment.objects.get(id=pk)
	title="Delete Records for " + comment.applicant.get_full_name

	context={
	'comment':comment,
	'pk':pk,
	'return_pk':return_pk,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/MemberShipRequestAdditionalAttachment_info_delete_confirm.html',context)




def MemberShipRequestAdditionalAttachment_info_delete(request,pk,return_pk):
	comment=MemberShipRequestAdditionalAttachment.objects.get(id=pk)
	comment.delete()
	return HttpResponseRedirect(reverse('membership_request_additional_info',args=(return_pk,)))


def MemberShipRequest_Delete_confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Delete Applicant"
	applicant=MemberShipRequest.objects.get(id=pk)


	context={
	'title':title,
	'applicant':applicant,
	}
	return render(request,'deskofficer_templates/MemberShipRequest_Delete_confirmation.html',context)


def MemberShipRequest_Delete(request,pk):
	applicant=MemberShipRequest.objects.get(id=pk)
	applicant.delete()
	return HttpResponseRedirect(reverse('membership_request_complete_search'))


def MemberShipRequest_submit(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	submission_status="SUBMITTED"
	record=MemberShipRequest.objects.get(id=pk)
	record.submission_status=submission_status
	record.save()
	messages.success(request,"Record Successfully Updated")
	return HttpResponseRedirect(reverse('deskofficer_home'))


def membership_request_manage_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Membership Request for Update"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_request_manage_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def membership_request_manage_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Update Membership Request"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('membership_request_manage_search'))


		members=MemberShipRequest.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(first_name__icontains=form['title'].value()) | Q(last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(submission_status='SUBMITTED',approval_status='PENDING')
		if not members:
			messages.error(request,'No Record Found')
			return HttpResponseRedirect(reverse('membership_request_manage_search'))

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_request_manage_list_load.html',context)


def membership_request_manage_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=MembershipRequest_form(request.POST or None)
	record=MemberShipRequest.objects.get(id=pk)

	attachment=MemberShipRequestAdditionalAttachment.objects.filter(applicant_id=pk)
	comment=MemberShipRequestAdditionalInfo.objects.filter(applicant_id=pk)
	form.fields['titles'].initial=record.title.id
	form.fields['first_name'].initial=record.first_name
	form.fields['last_name'].initial=record.last_name
	form.fields['middle_name'].initial=record.middle_name
	form.fields['phone_no'].initial=record.phone_number
	form.fields['gender'].initial=record.gender.id
	form.fields['department'].initial=record.department.id

	if request.method == "POST":
		title_id=request.POST.get("titles")
		title=Titles.objects.get(id=title_id)

		first_name=request.POST.get("first_name").upper()
		last_name=request.POST.get("last_name").upper()
		middle_name=request.POST.get("middle_name").upper()
		phone_number=request.POST.get("phone_no")

		gender_id=request.POST.get("gender")
		gender=Gender.objects.get(id=gender_id)

		department_id=request.POST.get("department")
		department=Departments.objects.get(id=department_id)
		record.title=title
		record.first_name=first_name
		record.last_name=last_name
		record.middle_name=middle_name
		record.phone_number=phone_number
		record.gender=gender
		record.department=department
		record.save()
		messages.success(request,'Personnel Record Updated Successfully')
		return HttpResponseRedirect(reverse('membership_request_manage_details',args=(pk,)))

	context={
	'form':form,
	'attachment':attachment,
	'comment':comment,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_request_manage_details.html',context)


def membership_request_manage_details_edit_comment(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=MemberShipRequestAdditionalInfo_form(request.POST or None)
	record=MemberShipRequestAdditionalInfo.objects.get(id=pk)
	title='Update Comment'
	button_text="Update"
	form.fields['comment'].initial=record.comment
	if request.method == 'POST':
		comment=request.POST.get('comment')
		record.comment=comment
		record.save()
		messages.success(request,'Comment Updated Successfully')
		return HttpResponseRedirect(reverse('membership_request_manage_details',args=(record.applicant_id,)))
	context={
	'form':form,
	'record':record,
	'title':title,
	'button_text':button_text,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_request_manage_details_edit_comment.html',context)



def membership_request_manage_details_delete_comment(request,pk):
	record=MemberShipRequestAdditionalInfo.objects.get(id=pk)
	return_pk=record.applicant_id
	record.delete()
	messages.info(request,'Comment Deleted Successfully')
	return HttpResponseRedirect(reverse('membership_request_manage_details',args=(return_pk,)))


def membership_request_manage_details_add_comment(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=MemberShipRequestAdditionalInfo_form(request.POST or None)
	title="Add Comment"
	button_text="Add"
	applicant=MemberShipRequest.objects.get(id=pk)
	officer=CustomUser.objects.get(id=request.user.id)
	if request.method == 'POST':
		comment=request.POST.get('comment')
		MemberShipRequestAdditionalInfo(comment=comment,applicant=applicant,officer=officer).save()

		messages.success(request,'Comment added Successfully')
		return HttpResponseRedirect(reverse('membership_request_manage_details',args=(pk,)))
	context={
	'form':form,
	'title':title,
	'button_text':button_text,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/membership_request_manage_details_edit_comment.html',context)



def membership_request_manage_details_edit_attachment(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form =MemberShipRequestAdditionalAttachment_form(request.POST or None)
	record=MemberShipRequestAdditionalAttachment.objects.get(id=pk)
	button_text="Update"
	form.fields['caption'].initial=record.caption

	if request.method=="POST":
		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)

		else:
			image_url=None

		caption=request.POST.get('caption')

		edit_image = request.POST.get('edit_image')
		if edit_image:
			record.image=image_url
		record.caption=caption
		record.save()
		messages.success(request,'Attachment Updated Successfully')
		return HttpResponseRedirect(reverse('membership_request_manage_details',args=(record.applicant_id,)))
	context={
	'form':form,
	'button_text':button_text,
	'record':record,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/membership_request_manage_details_edit_attachment.html',context)


def membership_request_manage_details_edit_attachment_delete(request,pk):
	record=MemberShipRequestAdditionalAttachment.objects.get(id=pk)
	return_pk=record.applicant_id
	record.delete()
	messages.info(request,'Attachment Deleted Successfully')
	return HttpResponseRedirect(reverse('membership_request_manage_details',args=(return_pk,)))


def membership_request_manage_details_edit_attachment_add(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form =MemberShipRequestAdditionalAttachment_form(request.POST or None)
	applicant=MemberShipRequest.objects.get(id=pk)
	officer=CustomUser.objects.get(id=request.user.id)
	if request.method=="POST":
		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)

		else:
			image_url=None

		caption=request.POST.get('caption')
		MemberShipRequestAdditionalAttachment(officer=officer,caption=caption,image=image_url,applicant=applicant).save()
		messages.info(request,'Attachment added Successfully')
		return HttpResponseRedirect(reverse('membership_request_manage_details',args=(pk,)))
	context={
	'form':form,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/membership_request_manage_details_edit_attachment_add.html',context)


def membership_request_delete_confirmation(request,pk):
	title='Are you sure you want to delete the request'
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=MemberShipRequest.objects.get(id=pk)

	context={
	'title':title,
	'member':member,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/membership_request_delete_confirmation.html',context)


def membership_request_delete(request,pk):
	member=MemberShipRequest.objects.get(id=pk)
	member.delete()

	return HttpResponseRedirect(reverse('membership_request_manage_search'))

def membership_form_sales_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Applicants for Form Sales"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_form_sales_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def membership_form_sales_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = searchForm(request.POST)
	applicants=[]
	if request.method == "POST":
		if not form['title'].value():
			return HttpResponseRedirect(reverse('membership_form_sales_Search'))

		applicants=MemberShipRequest.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(first_name__icontains=form['title'].value()) | Q(last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(transaction_status='UNTREATED',approval_status='APPROVED')

		if not applicants:
			messages.error(request,'No Record Found')
			return HttpResponseRedirect(reverse('membership_form_sales_Search'))



	context={
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_form_sales_list_load.html',context)




def membership_form_sales_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=MemberShipRequest.objects.get(pk=pk)
	comments=MemberShipRequestAdditionalInfo.objects.filter(applicant_id=pk)
	attachments=MemberShipRequestAdditionalAttachment.objects.filter(applicant_id=pk)

	context={
	'applicant':applicant,
	'comments':comments,
	'attachments':attachments,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_form_sales_preview.html',context)


def membership_form_sales_issue(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_form_sales_issue_form(request.POST or None)
	tdate = get_current_date(now)

	applicant=MemberShipRequest.objects.get(id=pk)
	account=[]
	# account_name=[]
	# if CooperativeBankAccountsOperationalDesignations.objects.filter(transaction__title='MEMBERSHIP REGISTRATION').exists():
	# 	account = CooperativeBankAccountsOperationalDesignations.objects.all()
	# 	# account_name = account.account.account_name + ' - ' + str(account.account.account_number) + ' - ' + str(account.account.bank)

	shares_uint_cost=0
	if MembersShareConfigurations.objects.all().exists():
		shares = MembersShareConfigurations.objects.first()
		if shares:
			shares_uint_cost=shares.unit_cost
		else:
			messages.error(request,'Shares Unit Cost Not Set')
			return HttpResponseRedirect(reverse('membership_form_sales_preview',args=(pk,)))
	else:
		messages.error(request,'Shares Unit Cost Not Set')
		return HttpResponseRedirect(reverse('membership_form_sales_preview',args=(pk,)))

	welfare=0
	if MembersWelfare.objects.all().exists():
		welfare_obj=MembersWelfare.objects.first()
		welfare=welfare_obj.amount
	else:
		messages.error(request,'Welfare Amount Not Set')
		return HttpResponseRedirect(reverse('membership_form_sales_preview',args=(pk,)))

	admin_charge = TransactionTypes.objects.get(code='100')
	registration_fees=admin_charge.admin_charges

	if not registration_fees:
		messages.error(request,'Registration Fees Not Set')
		return HttpResponseRedirect(reverse('membership_form_sales_preview',args=(pk,)))

	receipt_type='MANUAL'

	receipt_types_status=False
	if admin_charge.receipt_type == receipt_type:
		receipt_types_status=True


	if request.method=="POST":
		account_id=request.POST.get("account_name")
		account_obj=CooperativeBankAccountsOperationalDesignations.objects.get(id=account_id)
		account=account_obj.account

		processed_by=CustomUser.objects.get(id=request.user.id)

		date_paid=request.POST.get("date_paid")


		payment_reference=request.POST.get('payment_reference')

		if payment_reference=="":
			messages.error(request,'Payment Reference is required')
			return HttpResponseRedirect(reverse('membership_form_sales_issue',args=(pk,)))

		amount_paid=request.POST.get('amount_paid')
		share_id=request.POST.get('unit')
		share = SharesUnits.objects.get(id=share_id)
		share_unit=float(share.unit)
		total_shares=float(shares_uint_cost) * share_unit

		amount_due=float(total_shares) + float(welfare) + float(registration_fees)

		if float(amount_due) != float(amount_paid):
			messages.error(request,"Invalid Payment Amounts")
			return HttpResponseRedirect(reverse('membership_form_sales_issue',args=(pk,)))

		if receipt_types_status==True:
			receipt_id=request.POST.get('receipt')
			if Receipts.objects.filter(receipt=receipt_id).exists():

				receipt_obj=Receipts.objects.get(receipt=receipt_id)
				receipt=receipt_obj.receipt
			else:
				messages.error(request,"Receipt Number Not Found")
				return HttpResponseRedirect(reverse('membership_form_sales_issue',args=(pk,)))


			if Receipts.objects.filter(receipt=receipt_id,status='USED').exists():
				messages.error(request,"Receipt Already in Use")
				return HttpResponseRedirect(reverse('membership_form_sales_issue',args=(pk,)))
		else:
			receipt_id=AutoReceipt.objects.first()
			receipt= str(receipt_id.receipt).zfill(5)


		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)
		else:
			image_url=None

		record=MemberShipFormSalesRecord(date_paid=date_paid,total_amount=amount_due,tdate=tdate,payment_reference=payment_reference,image=image_url,bank_ccount=account,welfare_amount=welfare,receipt=receipt,applicant=applicant,shares=share_unit,share_amount=total_shares,admin_charge=registration_fees,processed_by=processed_by.username,status="UNTREATED",new_registration=True,cashbook_status='UNPOSTED')
		record.save()

		if receipt_types_status==True:
			receipt_obj.status='USED'
			receipt_obj.save()
		else:
			receipt_id.receipt= int(receipt_id.receipt) + 1
			receipt_id.save()

		applicant.transaction_status='TREATED'
		applicant.save()


		return HttpResponseRedirect(reverse('membership_form_sales_validation', args=(receipt,)))



	# form.fields['account_name'].initial=account_name
	form.fields['share_unit_cost'].initial=shares_uint_cost
	form.fields['welfare'].initial=welfare
	form.fields['registration_fees'].initial=registration_fees
	form.fields['amount_paid'].initial=float(shares_uint_cost)+float(registration_fees)+float(welfare)
	form.fields['receipt'].initial=0
	form.fields['form_print'].initial=0
	form.fields['date_paid'].initial=now

	context={
	'form':form,
	'applicant':applicant,
	'receipt_types_status':receipt_types_status,
	'shares_uint_cost':shares_uint_cost,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_form_sales_issue.html',context)




def membership_form_sales_validation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=MemberShipFormSalesRecord.objects.get(receipt=pk)
	context={
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/membership_form_sales_validation.html',context)

def membership_form_Approved_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	applicants=MemberShipRequest.objects.filter(transaction_status='UNTREATED',approval_status='APPROVED')

	# if not applicants:
	# 	messages.error(request,'No Record Found')
	# 	return HttpResponseRedirect(reverse('membership_form_sales_Search'))



	context={
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_form_Approved_list_load.html',context)





def membership_registration_applicant_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Request for Update"
	form = searchForm(request.POST or None)
	return render(request,'deskofficer_templates/membership_registration_applicant_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})



def membership_registration_applicant_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Update Membership Request"
	form = searchForm(request.POST)

	if request.method == "POST":
		if not request.POST.get("title"):
			return HttpResponseRedirect(reverse('membership_registration_applicant_search'))

		applicants=MemberShipFormSalesRecord.objects.filter(Q(applicant__phone_number__icontains=form['title'].value()) | Q(applicant__first_name__icontains=form['title'].value()) | Q(applicant__last_name__icontains=form['title'].value()) | Q(applicant__middle_name__icontains=form['title'].value())).filter(status='UNTREATED')
		if not applicants:
			messages.error(request,'No Record Found')
			return HttpResponseRedirect(reverse('membership_registration_applicant_search'))

	context={
	'applicants':applicants,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_registration_applicant_list_load.html',context)




def membership_registration_register_confirmation(request,pk):
	record=Members.objects.get(ippis_no=pk)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	context={
	'record':record,
	# 'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_registration_register_confirmation.html',context)


def membership_registration_register(request,pk):
	applicant=MemberShipFormSalesRecord.objects.get(id=pk)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form= membership_registration_register_form(request.POST or None)

	if request.method == 'POST':
		tdate=get_current_date(now)
		processed_by = CustomUser.objects.get(id=request.user.id)
		applicant=MemberShipFormSalesRecord.objects.get(id=pk)

		shares=applicant.shares
		unit_cost=math.ceil(float(applicant.share_amount)/float(applicant.shares))
		total_cost=applicant.share_amount
		welfare_amount=applicant.welfare_amount

		status1='TREATED'
		status2='UNTREATED'
		loan_lock='YES'
		account_status='ACTIVE'
		status='ACTIVE'
		savings_status='PENDING'
		loan_status='PENDING'
		shares_status='PENDING'
		welfare_status='PENDING'
		date_joined_status='PENDING'
		date_joined_status1='UPLOADED'
		dob_status='PENDING'
		dob_status1='UPLOADED'
		date_of_first_appointment_status='PENDING'
		date_of_first_appointment_status1='UPLOADED'

		form_print = request.POST.get('form_print')

		title_id = request.POST.get("title")
		title = Titles.objects.get(id=title_id)

		last_name=request.POST.get('last_name')
		first_name=request.POST.get('first_name')
		middle_name=request.POST.get('middle_name')

		dob=request.POST.get('dob')

		gender_id = request.POST.get("gender")
		gender = Gender.objects.get(id=gender_id)

		phone_number=request.POST.get('phone_number')
		residential_address=request.POST.get('residential_address')
		permanent_home_address=request.POST.get('permanent_home_address')

		department_id = request.POST.get("department")
		department = Departments.objects.get(id=department_id)

		dob_add=request.POST.get('dob_add')
		date_of_first_appointment_add=request.POST.get('date_of_first_appointment_add')


		salary_institution_id = request.POST.get("salary_institution")
		salary_institution = SalaryInstitution.objects.get(id=salary_institution_id)

		file_no=request.POST.get('file_no')
		ippis_no=request.POST.get('ippis_no')

		email=request.POST.get('email')
		username=request.POST.get('username')


		date_of_first_appointment=request.POST.get('date_of_first_appointment')
		date_joined=request.POST.get('date_joined')

		if request.FILES.get('profile_pic', False):
			profile_pic = request.FILES['profile_pic']
			fs=FileSystemStorage()
			filename=fs.save(profile_pic.name,profile_pic)
			profile_pic_url=fs.url(filename)
		else:
			profile_pic_url=None


		if not last_name:
			messages.error(request,"Missing Last Name")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if not first_name:
			messages.error(request,"First Name Missing")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if dob_add and not dob:
			messages.error(request,"Missing Date of Birth")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if not phone_number:
			messages.error(request,"Missing Phone No")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if not file_no:
			messages.error(request,"Missing File No")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if not ippis_no:
			messages.error(request,"Missing IPPIS No or Salary Code")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))


		if not email:
			email=f'{last_name}{first_name}{ippis_no}@gmail.com'
			# messages.error(request,"Missing Email Address")
			# return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if not username:
			username=f'{last_name}{first_name}{ippis_no}@gmail.com'
			# messages.error(request,"Missing Username")
			# return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))


		if date_of_first_appointment_add and not date_of_first_appointment:
			messages.error(request,"Missing Date of First Appointment")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if CustomUser.objects.filter(Q(username=username)).exists():
			messages.error(request,"Username Already in Use")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if CustomUser.objects.filter(Q(email=email)).exists():
			messages.error(request,"Email Already in Use")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if Members.objects.filter(phone_number=phone_number).exists():
			if Members.objects.filter(phone_number=phone_number,status='ACTIVE').exists():
				messages.error(request,"Phone Number Already in Use")
				return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		if Members.objects.filter(file_no=file_no).exists():
			if Members.objects.filter(file_no=file_no,status='ACTIVE').exists():
				messages.error(request,"File Number Already in Use")
				return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))


		if Members.objects.filter(ippis_no=ippis_no).exists():
			if Members.objects.filter(ippis_no=ippis_no,status='ACTIVE').exists():
				messages.error(request,'Salary Code Already in Use')
				return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		member_id_obj=[]
		if MembersIdManager.objects.all().exists():
			member_id_obj = MembersIdManager.objects.first()
		else:
			messages.error(request,"Membership ID Missing")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		default_password=[]
		if DefaultPassword.objects.all().exists():
			default_password = DefaultPassword.objects.first()
			password=default_password.title
		else:
			messages.error(request,"Default Password Missing")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		user_type_obj = UserType.objects.get(title='MEMBERS')
		user_type=user_type_obj.code


		share_transaction=[]
		if TransactionTypes.objects.filter(code=700).exists():
			share_transaction=TransactionTypes.objects.get(code=700)
			share_account=str(share_transaction.code) + str(member_id_obj.member_id).zfill(5)
		else:
			messages.error(request,"Transaction Type(Shares) with Code 700 Missing")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		welfare_transaction=[]
		if TransactionTypes.objects.filter(code=800).exists():
			welfare_transaction=TransactionTypes.objects.get(code=800)
			welfare_account=str(welfare_transaction.code) + str(member_id_obj.member_id).zfill(5)
		else:
			messages.error(request,"Transaction Type(Welfare) with Code 800 Missing")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))

		member_id = member_id_obj.prefix_title + "/" +  str(member_id_obj.prefix_year) + "/" + str(member_id_obj.member_id).zfill(5)

		if Members.objects.filter(member_id=member_id).exists():
			messages.error(request,"Sorry The Member ID Found is already in use")
			return HttpResponseRedirect(reverse('membership_registration_register',args=(pk,)))



		# try:
		user = CustomUser.objects.create_user(username=username,password=password,email=email,last_name=last_name,first_name=first_name,user_type=int(user_type))
		user.members.applicant=applicant
		user.members.member_id=member_id
		user.members.coop_no=str(member_id_obj.member_id).zfill(5)
		user.members.title=title
		user.members.middle_name=middle_name
		user.members.full_name=str(first_name) + ' ' + str(last_name) + ' ' + str(middle_name)
		user.members.phone_number=phone_number
		user.members.gender=gender
		user.members.residential_address=residential_address
		user.members.permanent_home_address=permanent_home_address
		user.members.department=department
		user.members.salary_institution=salary_institution
		user.members.file_no=file_no
		user.members.ippis_no=ippis_no

		if dob_add:
			user.members.dob=dob
			user.members.dob_status=dob_status1

		if date_of_first_appointment_add:
			user.members.date_of_first_appointment=date_of_first_appointment
			user.members.date_of_first_appointment_status=date_of_first_appointment_status1

		user.members.date_joined=date_joined
		user.members.date_joined_status=date_joined_status1
		user.members.status=account_status
		user.members.savings_status=savings_status
		user.members.loan_status=loan_status
		user.members.shares_status=shares_status
		user.members.welfare_status=welfare_status
		user.members.date_joined_status=date_joined_status
		user.members.member_category='NEW'


		if profile_pic_url!=None:
			user.members.profile_pic=profile_pic_url

		user.members.save()

		member_id_obj.member_id=int(member_id_obj.member_id) + 1
		member_id_obj.save()

		share_account=MembersAccountsDomain(loan_lock=loan_lock,status=account_status,member=user.members,transaction=share_transaction,account_number=share_account)
		share_account.save()

		share_record=MembersShareAccounts(tdate=tdate,status=status2,member=share_account,shares=shares,unit_cost=unit_cost,total_cost=total_cost,effective_date=tdate,year=now.year,processed_by=processed_by.username)
		share_record.save()

		particulars=share_transaction.name + " INITIAL PURCHASE OF " + str(shares) + ' BY ' + str(unit_cost) + " PER A UNIT"
		debit=0
		credit=float(total_cost)
		balance=credit

		ledger_status='ACTIVE'
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username
		post_to_ledger(
					user.members,
					share_transaction,
					share_account.account_number,
					particulars,
					debit,
					credit,
					abs(balance),
					get_current_date(now),
					ledger_status,
					tdate,
					processed_by
					)


		welfare_account=MembersAccountsDomain(loan_lock=loan_lock,status=account_status,member=user.members,transaction=welfare_transaction,account_number=welfare_account)
		welfare_account.save()

		welfare_record=MembersWelfareAccounts(tdate=tdate,processed_by=processed_by,status=status2,member=welfare_account,amount=welfare_amount,year=now.year)
		welfare_record.save()

		applicant.status=status1
		applicant.save()

		return HttpResponseRedirect(reverse('membership_registration_register_confirmation', args=(ippis_no,)))





	form.fields['first_name'].initial=applicant.applicant.first_name
	form.fields['last_name'].initial=applicant.applicant.last_name
	form.fields['middle_name'].initial=applicant.applicant.middle_name
	form.fields['title'].initial=applicant.applicant.title_id
	form.fields['gender'].initial=applicant.applicant.gender.id
	form.fields['phone_number'].initial=applicant.applicant.phone_number
	form.fields['department'].initial=applicant.applicant.department.id
	form.fields['date_joined'].initial=now

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_registration_register.html',context)



#########################################################
############### MEMBERS ACCOUNT CRERATIONS###############
#########################################################
def Members_Account_Creation_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Membership for Account Creation"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Account_Creation_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Account_Creation_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"

	form = searchForm(request.POST)
	if request.method == "POST":
		if not form['title'].value():
			return HttpResponseRedirect(reverse('Members_Account_Creation_Search'))
		members=searchMembers(form['title'].value(),'ACTIVE')

		if not members:
			return HttpResponseRedirect(reverse('Members_Account_Creation_Search'))

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Account_Creation_list_load.html',context)

def Members_Account_Creation_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(~Q(source__title="LOAN") & ~Q(source__title='GENERAL')  & ~Q(code='701'))
	records=MembersAccountsDomain.objects.filter(member=member)

	context={
	'member':member,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Members_Account_Creation_process.html',context)

def Members_Account_Creation_process_Delete(request,pk):
	member=MembersAccountsDomain.objects.get(id=pk)
	MembersAccountsDomain.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('Members_Account_Creation_preview',args=(member.member.pk,)))


def Members_Account_Creation_preview_remove_duplicate(request):
	records=MembersAccountsDomain.objects.filter().order_by('account_number').values_list('account_number').distinct()

	for record in records:
		for tag in MembersAccountsDomain.objects.filter(account_number=record[0])[1:]:
			tag.delete()
	return HttpResponseRedirect(reverse('Members_Account_Creation_preview_all'))


def Members_Account_Creation_preview_all(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"




	transactions=TransactionTypes.objects.filter(~Q(source__title="LOAN") & ~Q(source__title='GENERAL')  & ~Q(code='701'))
	records=MembersAccountsDomain.objects.all().order_by('member_id')

	context={
	# 'member':member,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Members_Account_Creation_process_all.html',context)

def Members_Account_Creation_process(request,pk):

	loan_lock="YES"
	member=Members.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(~Q(source__title="LOAN") & ~Q(source__title='GENERAL'))
	member_id=member.coop_no

	count=0
	count1=0
	my_id=member_id
	for transaction in transactions:
		account_number=str(transaction.code) + str(my_id)
		if MembersAccountsDomain.objects.filter(member=member,transaction=transaction,account_number=account_number).exists():
			MembersAccountsDomain.objects.filter(member=member,transaction=transaction,account_number=account_number).update(loan_lock='NO')
			count1=count1+1
		else:
			count +=1
			record=MembersAccountsDomain(loan_lock='NO',status='ACTIVE',member=member,transaction=transaction,account_number=account_number)
			record.save()
	messages.success(request,str(count) + ' Account(s) Successfully Created' + ' and '+ str(count1) + " Updated" )
	return HttpResponseRedirect(reverse('Members_Account_Creation_preview',args=(member.pk,)))



def Members_Multiple_Account_Creation_preview(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	members=Members.objects.filter(status=status)
	transactions=TransactionTypes.objects.filter(~Q(source__title="LOAN") & ~Q(source__title='GENERAL')  & ~Q(code='701'))

	context={
	'members':members,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Multiple_Account_Creation_preview.html',context)


def Members_Multiple_Account_Creation_process(request):

	members=Members.objects.filter(status='ACTIVE')
	transactions=TransactionTypes.objects.filter(~Q(source__title="LOAN") & ~Q(source__title='GENERAL'))


	count=0
	for member in members:
		member_id=member.coop_no
		my_id=member_id

		for transaction in transactions:
			account_number=str(transaction.code) + str(my_id)
			if MembersAccountsDomain.objects.filter(account_number=account_number).exists():
			# 	account_number=str(account_number) + "_A"

			# if MembersAccountsDomain.objects.filter(member=member,transaction=transaction,account_number=account_number).exists():
				pass
			else:
				count +=1
				MembersAccountsDomain(loan_lock='YES',status='ACTIVE',member=member,transaction=transaction,account_number=account_number).save()
	messages.success(request,str(count) + ' Account(s) Successfully Created')
	return HttpResponseRedirect(reverse('Members_Multiple_Account_Creation_preview'))



def Members_Account_Without_Balance_Brought_Forward(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	tdate=get_current_date(now)

	if PersonalLedgerWithoutBalanceBF.objects.all().exists():
		records=PersonalLedgerWithoutBalanceBF.objects.filter(status='UNTREATED')
	else:
		queryset=PersonalLedger.objects.filter().order_by('member__coop_no') #.values_list('id','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no','member__coop_no','account_number','transaction__name','particulars').distinct()

		for item in queryset:
			if PersonalLedger.objects.filter(account_number=item.account_number).count()>1:
				record=PersonalLedger.objects.filter(account_number=item.account_number).first()
			else:
				record=PersonalLedger.objects.get(account_number=item.account_number)
			
			task=record.particulars[:7]	
			if len(str(record.account_number))>6 and task=='Monthly':
					
				
					PersonalLedgerWithoutBalanceBF(member=record.member,
													transaction=record.transaction,
													account_number=record.account_number,
													particulars=record.particulars,
													processed_by=processed_by,
													tdate=tdate
													).save()
					records=PersonalLedgerWithoutBalanceBF.objects.filter(status='UNTREATED')
		
	# print(k)

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Account_Without_Balance_Brought_Forward.html',context)

def Members_Account_Without_Balance_Brought_Forward_View(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	record=PersonalLedgerWithoutBalanceBF.objects.get(id=pk)
	
	member=record.member
		
	if SavingsUploaded.objects.filter(transaction__member=member).exists():	
		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_Preview',args=(member.pk,)))
	else:
		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(member.pk,)))


def Members_Account_Without_Balance_Brought_Forward_View_Treated(request,pk):
	record=PersonalLedgerWithoutBalanceBF.objects.get(id=pk)
	record.status="TREATED"
	record.save()
	return HttpResponseRedirect(reverse('Members_Account_Without_Balance_Brought_Forward'))
	
	
	
def Members_account_details_list(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction=TransactionTypes.objects.get(id=pk)
	records=MembersAccountsDomain.objects.filter(transaction=transaction)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/Members_account_details_list.html',context)



#########################################################
############### STANDING ORDER #########################
#########################################################
def standing_order_reactivate_account_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Standing Order"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/standing_order_reactivate_account_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def standing_order_reactivate_account_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('standing_order_reactivate_account_search'))
		members=StandingOrderDeactivatedAccounts.objects.filter(Q(transaction__transaction__member__phone_number__icontains=form['title'].value()) | Q(transaction__transaction__member__file_no__icontains=form['title'].value()) | Q(transaction__transaction__member__ippis_no__icontains=form['title'].value())  | Q(transaction__transaction__member__admin__first_name__icontains=form['title'].value()) | Q(transaction__transaction__member__admin__last_name__icontains=form['title'].value()) | Q(transaction__transaction__member__middle_name__icontains=form['title'].value())).filter(transaction__transaction__member__status='ACTIVE',status='UNTREATED')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/standing_order_reactivate_account_list_load.html',context)




def standing_order_reactivate_account(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=standing_order_reactivate_account_form(request.POST or None)

	record=StandingOrderDeactivatedAccounts.objects.get(id=pk)

	if request.method == 'POST':
		transaction=record.transaction.transaction.account_number
		amount=request.POST.get('amount')
		StandingOrderAccounts.objects.filter(transaction__account_number=transaction).update(amount=amount,status="ACTIVE")

		record.status='TREATED'
		record.save()
		return HttpResponseRedirect(reverse('standing_order_reactivate_account_search'))

	form.fields['existing_amount'].initial=record.transaction.amount
	form.fields['amount'].initial=record.transaction.amount
	context={
	'form':form,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/standing_order_reactivate_account.html',context)


def standing_order_drop_account(request,pk):

	record=StandingOrderDeactivatedAccounts.objects.get(id=pk)
	record.status='TREATED'
	record.save()
	return HttpResponseRedirect(reverse('standing_order_reactivate_account_search'))


def standing_order_selected_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Standing Order"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/standing_order_selected_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def standing_order_selected_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('standing_order_selected_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/standing_order_selected_list_load.html',context)


def standing_order_selected_form(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	applicant=Members.objects.get(id=pk)
	form=standing_orderform(request.POST or None)
	standing_orders=StandingOrderAccounts.objects.filter(member_id=applicant.id)


	if request.method=="POST":
		form=standing_orderform(request.POST)
		if form.is_valid():
			saving_id=form.cleaned_data["savings"]
			saving = TransactionTypes.objects.get(id=saving_id)
			amount=form.cleaned_data["amount"]

			minimum_amount = saving.minimum_amount

			if float(amount)<=0:
				messages.error(request,"Amount  cannot be zero(0)")
				return HttpResponseRedirect(reverse('standing_order_selected_form', args=(pk,)))


			if float(amount)<float(minimum_amount):
				messages.error(request,"Amount Specified is Less than " + str(minimum_amount) + " Minimum Amount allowed for this Transaction")
				return HttpResponseRedirect(reverse('standing_order_selected_form', args=(pk,)))

			if StandingOrderAccounts.objects.filter(member=applicant,transaction=saving).exists():
				member=StandingOrderAccounts.objects.get(member=applicant,transaction=saving)
				member.amount=amount
				member.save()
				return HttpResponseRedirect(reverse('standing_order_selected_form', args=(pk,)))


			member_id=applicant.coop_no

			my_id=member_id

			account_number=str(saving.code) + str(my_id)
			StandingOrderAccounts(member=applicant,
										transaction=saving,
										amount=amount,
										lock_status='YES',
										account_number=account_number).save()

			return HttpResponseRedirect(reverse('standing_order_selected_form', args=(pk,)))


	context={

	'applicant':applicant,
	'form':form,
	'standing_orders':standing_orders,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/standing_order_selected_form.html',context)


def standing_order_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicants=Members.objects.filter(status='ACTIVE')


	context={
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/standing_order_list_load.html',context)


def standing_order_form(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=Members.objects.get(id=pk)
	form=standing_orderform(request.POST or None)
	standing_orders=StandingOrderAccounts.objects.filter(transaction__member=applicant)
	account_number=[]



	if request.method=="POST" and 'btn_submit' in request.POST:

		form=standing_orderform(request.POST)

		saving_id=request.POST.get("savings")
		saving = TransactionTypes.objects.get(id=saving_id)

		if MembersAccountsDomain.objects.filter(member=applicant,transaction=saving).exists():
			account_number=MembersAccountsDomain.objects.get(member=applicant,transaction=saving)
		else:
			MembersAccountsDomain(loan_lock='YES',member=applicant,transaction=saving,account_number=f'{saving.code}{applicant.coop_no}').save()
			account_number=MembersAccountsDomain.objects.get(member=applicant,transaction=saving)
		
		amount=request.POST.get("amount")
		minimum_amount = saving.minimum_amount

		if float(amount)<=0:
			messages.error(request,"Amount  cannot be zero(0)")
			return HttpResponseRedirect(reverse('standing_order_form', args=(pk,)))


		if float(amount)<float(minimum_amount):
			messages.error(request,"Amount Specified is Less than " + str(minimum_amount) + " Minimum Amount allowed for this Transaction")
			return HttpResponseRedirect(reverse('standing_order_form', args=(pk,)))

		if StandingOrderAccounts.objects.filter(transaction=account_number).exists():
			member=StandingOrderAccounts.objects.get(transaction=account_number)
			if member.lock_status == 'OPEN':
				member.amount=amount
				member.save()
			else:
				messages.error(request,"This Transaction is Locked, Update not Allowed from this point")
			return HttpResponseRedirect(reverse('standing_order_form', args=(pk,)))


		member=StandingOrderAccounts(lock_status='OPEN',status='ACTIVE',transaction=account_number,amount=amount)
		member.save()
		return HttpResponseRedirect(reverse('standing_order_form', args=(pk,)))

		

	context={

	'applicant':applicant,
	'form':form,
	'standing_orders':standing_orders,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'account_number':account_number,
	}
	return render(request,'deskofficer_templates/standing_order_form.html',context)


def standing_order_locked(request,pk):
	status="LOCKED"
	all_record_update=StandingOrderAccounts.objects.filter(transaction__member_id=pk).update(lock_status=status)
	return HttpResponseRedirect(reverse('standing_order_form',args=(pk,)))


def standing_order_unlocked(request,pk):
	status="OPEN"
	all_record_update=StandingOrderAccounts.objects.filter(transaction__member_id=pk).update(lock_status=status)
	return HttpResponseRedirect(reverse('standing_order_form',args=(pk,)))




def standing_order_remove(request,pk):
	record = StandingOrderAccounts.objects.get(id=pk)
	return_pk=record.transaction.member_id
	record.delete()
	return HttpResponseRedirect(reverse('standing_order_form',args=(return_pk,)))



#########################################################
############### TRANSACTION  ADJUSTMENT #################
#########################################################

def Standing_Order_Suspension_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Membership for Standing Order Suspension"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Standing_Order_Suspension_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Standing_Order_Suspension_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Loan Request order"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_search'))

		members=searchMembers(form['title'].value(),status)
	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_List_load.html',context)




def Standing_Order_Suspension_Transaction_Load(request,pk):
	form=Standing_Order_Suspension_Form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)

	approval_status='PENDING'
	status='UNTREATED'

	records = StandingOrderAccountsSuspensionRequest.objects.filter(status=status,transaction__transaction__member=member,approval_status=approval_status)

	if request.method == 'POST':
		processed_by=CustomUser.objects.get(id=request.user.id)
		tdate=get_current_date(now)

		purpose = request.POST.get("reasons")
		transaction_id=request.POST.get('saving')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		if not purpose:
			messages.error(request,'Please purpose cannot be empty')
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Load',args=(pk,)))

		if CompulsorySavings.objects.filter(transaction=transaction).exists():
			messages.error("This is a compulsory savings, it cannot be suspended")
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Load',args=(pk,)))

		if StandingOrderAccounts.objects.filter(transaction__member=member,transaction__transaction=transaction).exists():
			record = StandingOrderAccounts.objects.get(transaction__member=member,transaction__transaction=transaction)
			StandingOrderAccountsSuspensionRequest(processed_by=processed_by.username,status=status,transaction=record,purpose=purpose,approval_status=approval_status,tdate=tdate).save()
			messages.success(request,'Record Added Successfully')
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Load',args=(pk,)))

		else:

			messages.error(request,"No Standing Order Record Found, its either Locked or Doesn't Exist")
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Load',args=(pk,)))

	context={
	'records':records,
	'member':member,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Load.html',context)


def Standing_Order_Suspension_Transaction_Delete(request,pk):
	record = StandingOrderAccountsSuspensionRequest.objects.get(id=pk)
	return_pk = record.transaction.transaction.member_id
	record.delete()
	messages.success(request,'Record Deleted Successfully')
	return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Load',args=(return_pk,)))

def Standing_Order_Suspension_Transaction_Approval_Load(request):
	processed_by=CustomUser.objects.get(id=request.user.id)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records = StandingOrderAccountsSuspensionRequest.objects.filter(status='UNTREATED',approval_status="PENDING").exclude(processed_by=processed_by.username)

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Approval_Load.html',context)


def Standing_Order_Suspension_Transaction_Approvals_Load_Details(request,pk):
	form = Standing_Order_Suspension_Transaction_Approvals_Load_Details_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	record = StandingOrderAccountsSuspensionRequest.objects.get(id=pk)

	if request.method == 'POST':
		tdate=get_current_date(now)
		approval_officer=CustomUser.objects.get(id=request.user.id).username
		comment=request.POST.get("comment")

		approval_status=request.POST.get("approval_status")

		record.approval_status=approval_status
		record.approval_officer=approval_officer
		record.approval_comment=comment
		record.approval_date=tdate
		record.save()

		return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Approval_Load'))

	form.fields['purpose'].initial=record.purpose
	context={
	'form':form,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Approvals_Load_Details.html',context)


def Standing_Order_Suspension_Transaction_Approval_Processing_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records = StandingOrderAccountsSuspensionRequest.objects.filter(status='UNTREATED',approval_status='APPROVED')

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Approval_Processing_Load.html',context)


def Standing_Order_Suspension_Transaction_Approval_Processing(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	record = StandingOrderAccountsSuspensionRequest.objects.get(id=pk)

	record.transaction.status='INACTIVE'
	record.transaction.save()

	record.status='TREATED'
	record.save()

	return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Approval_Processing_Load'))


def Standing_Order_Suspension_Transaction_Releasing_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Standing Order Release"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Releasing_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Standing_Order_Suspension_Transaction_Releasing_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Releasing_search'))
		members=StandingOrderAccounts.objects.filter(Q(transaction__member__phone_number__icontains=form['title'].value()) | Q(transaction__member__file_no__icontains=form['title'].value()) | Q(transaction__member__ippis_no__icontains=form['title'].value())  | Q(transaction__member__admin__first_name__icontains=form['title'].value()) | Q(transaction__member__admin__last_name__icontains=form['title'].value()) | Q(transaction__member__middle_name__icontains=form['title'].value())).filter(transaction__member__status='ACTIVE',status='INACTIVE')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Releasing_list_load.html',context)




def Standing_Order_Suspension_Transactions_Releasing_Details(request,pk):
	form=Standing_Order_Suspension_Transaction_Releasing_Details_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	record = StandingOrderAccounts.objects.get(id=pk)
	approval_status='PENDING'
	status='UNTREATED'


	item=[]
	if StandingOrderAccountsSuspensionReleaseRequest.objects.filter(transaction=record,approval_status=approval_status,status=status).exists():
		item = StandingOrderAccountsSuspensionReleaseRequest.objects.get(transaction=record,approval_status=approval_status,status=status)

	if request.method == 'POST':
		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		comment=request.POST.get('comment')

		if not comment:
			messages.error(request,'Comment cannot be empty')
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transactions_Releasing_Details',args=(pk,)))

		if StandingOrderAccountsSuspensionReleaseRequest.objects.filter(transaction=record,approval_status=approval_status,status=status).exists():
			item.purpose=comment
			item.status=status
			item.save()
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Releasing_search'))

		StandingOrderAccountsSuspensionReleaseRequest(purpose=comment,transaction=record,approval_status=approval_status,processed_by=processed_by.username,tdate=tdate,status=status).save()

		return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Releasing_search'))


	if item:
		form.fields['comment'].initial = item.purpose
	context={
	'item':item,
	'form':form,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transactions_Releasing_Details.html',context)


def Standing_Order_Suspension_Transaction_Releasing_Approval_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)

	records = StandingOrderAccountsSuspensionReleaseRequest.objects.filter(status='UNTREATED',approval_status='PENDING').exclude(processed_by=processed_by.username)

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Releasing_Approval_Load.html',context)


def Standing_Order_Suspension_Transaction_Releasing_Approval_Details(request,pk):
	form=Loan_unscheduling_approval_preview_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record = StandingOrderAccountsSuspensionReleaseRequest.objects.get(id=pk)


	if request.method == 'POST':
		approval_officer=CustomUser.objects.get(id=request.user.id).username
		approval_status=request.POST.get('approval_status')

		approval_date=get_current_date(now)


		processed_by=CustomUser.objects.get(id=request.user.id)
		comment=request.POST.get('comment')

		if not comment:
			messages.error(request,'Comment cannot be empty')
			return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Releasing_Approval_Details',args=(pk,)))


		record.approval_comment=comment
		record.approval_status=approval_status
		record.approval_date=approval_date
		record.approval_officer=approval_officer
		record.save()
		return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Releasing_Approval_Load'))


	form.fields['comment_exist'].initial = record.purpose
	context={
	# 'item':item,
	'form':form,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Releasing_Approval_Details.html',context)




def Standing_Order_Suspension_Transaction_Activation_Approval_Processing_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records = StandingOrderAccountsSuspensionReleaseRequest.objects.filter(status='UNTREATED',approval_status='APPROVED')

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Standing_Order_Suspension_Transaction_Activation_Approval_Processing_Load.html',context)


def Standing_Order_Suspension_Transaction_Activation_Approval_Processing_Processed(request,pk):
	record = StandingOrderAccountsSuspensionReleaseRequest.objects.get(id=pk)
	item=[]
	if StandingOrderAccounts.objects.filter(transaction=record.transaction.transaction).exists():
		item = StandingOrderAccounts.objects.get(transaction=record.transaction.transaction)

		item.status='ACTIVE'
		item.save()

		record.status='TREATED'
		record.save()
	return HttpResponseRedirect(reverse('Standing_Order_Suspension_Transaction_Activation_Approval_Processing_Load'))




def Transaction_Adjustment_Manage_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Deposit_Summary_form(request.POST or None)
	if request.method == 'POST':
		transaction_period=request.POST.get('current_date')

		dtObj = datetime.datetime.strptime(transaction_period, '%Y-%m-%d')
		transaction_period=get_current_date(dtObj)

		return HttpResponseRedirect(reverse('Transaction_Adjustment_Manage',args=(transaction_period,)))
	form.fields['current_date'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Manage_Period_Load.html',context)


def Transaction_Adjustment_Manage(request,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')


	members=TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,approval_status='PENDING',status='UNTREATED').order_by('member__member__coop_no').values_list('member__member__coop_no','member__member__admin__last_name','member__member__admin__first_name','member__member__middle_name').distinct()

	members_array=[]
	for record in members:
		members_array.append((record[0],f'{record[1]} {record[2]} {record[3]}'))

	columns=['#','MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")
	columns.append("ACTION")

	order_list_array=[]
	for member in members_array:
		order_array=[]

		queryset=  TransactionAjustmentRequest.objects.filter(member__member__coop_no=member[0],approval_status='PENDING',status='UNTREATED').aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		for transaction in transactions:
			value=''
			if TransactionAjustmentRequest.objects.filter(member__member__coop_no=member[0],member__transaction=transaction,approval_status='PENDING',status='UNTREATED').exists():
				record=TransactionAjustmentRequest.objects.get(member__member__coop_no=member[0],member__transaction=transaction,approval_status='PENDING',status='UNTREATED')
				value=record.amount

			order_array.append(value)

		order_array.insert(0,member[0])
		order_array.insert(1,member[1])
		order_array.append(total_amount)

		order_list_array.append(order_array)

	context={
	'transaction_period':transaction_period,
	'transactions':transactions,
	'columns':columns,
	'order_list_array':order_list_array,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Manage.html',context)



def Transaction_Adjustment_Manage_Details(request,pk,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(coop_no=pk)
	records=TransactionAjustmentRequest.objects.filter(member__member=member,effective_date=transaction_period,approval_status='PENDING',status='UNTREATED')

	
	context={
	'member':member,
	'records':records,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Manage_Details.html',context)


def Transaction_Adjustment_Manage_Details_Update(request,pk,member_pk,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Members_Dashboard_Load_Standing_Orders_Update_Form(request.POST or None)
	member=Members.objects.get(id=member_pk)
	record=TransactionAjustmentRequest.objects.get(id=pk)
	transaction=record.member.transaction
	minimum_amount=transaction.minimum_amount

	if request.method == "POST":
		amount=request.POST.get('current_amount')

		if float(amount) == 0:
			if CompulsorySavings.objects.filter(transaction=transaction).exists():
				messages.info(request,'This is a compulsory savings, it canot be Zero(0)')
				return HttpResponseRedirect(reverse('Transaction_Adjustment_Manage_Details_Update',args=(pk, member_pk,transaction_period)))

			pass

		elif float(amount) < float(minimum_amount):
			messages.info(request,'The amount specified is less then the Minimum Amount of ' +  str(minimum_amount) + ' allowed')
			return HttpResponseRedirect(reverse('Transaction_Adjustment_Manage_Details_Update',args=(pk, member_pk,transaction_period)))


		record.amount=amount
		record.save()
		return HttpResponseRedirect(reverse('Transaction_Adjustment_Manage_Details',args=(member.coop_no,transaction_period,)))
	
	form.fields['existing_amount'].initial=record.amount
	form.fields['current_amount'].initial=record.amount
	context={
	'form':form,
	'member':member,
	'record':record,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Manage_Details_Update.html',context)



def export_Transaction_Adjustment_Manage_xls(request):

	response = HttpResponse(content_type='application/ms-excel')

	response['Content-Disposition'] = 'attachment; filename="SAVINGS_ADJUSTMENT.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True


	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')

	columns=['MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")

	# columns = ['Member ID', 'Name', 'Saving Number', 'Bank', 'Account Name','Account Number','Amount']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	members=TransactionAjustmentRequest.objects.filter(approval_status='PENDING',status='UNTREATED').order_by('member__member__coop_no').values_list('member__member__coop_no','member__member__admin__last_name','member__member__admin__first_name','member__member__middle_name').distinct()

	members_array=[]
	for record in members:
		members_array.append((record[0],f'{record[1]} {record[2]} {record[3]}'))


	order_list_array=[]
	for member in members_array:
		order_array=[]

		queryset=  TransactionAjustmentRequest.objects.filter(member__member__coop_no=member[0],approval_status='PENDING',status='UNTREATED').aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		for transaction in transactions:
			value=''
			if TransactionAjustmentRequest.objects.filter(member__member__coop_no=member[0],member__transaction=transaction,approval_status='PENDING',status='UNTREATED').exists():
				record=TransactionAjustmentRequest.objects.get(member__member__coop_no=member[0],member__transaction=transaction,approval_status='PENDING',status='UNTREATED')
				value=record.amount

			order_array.append(value)

		order_array.insert(0,member[0])
		order_array.insert(1,member[1])
		order_array.append(total_amount)

		order_list_array.append(order_array)


	# rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')
	rows = order_list_array

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response





def Transaction_adjustment_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if AdjustmentPeriods.objects.filter(status='ACTIVE').exists():
		adjustment_period=AdjustmentPeriods.objects.get(status='ACTIVE')
	else:
		adjustment_period=get_current_date(now)

	title=f"Adjustment for the period of  {get_print_date(adjustment_period.transaction_period)}"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Transaction_adjustment_search.html',{'form':form,'transaction_period':adjustment_period.transaction_period,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Transaction_adjustment_List_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Transaction_adjustment_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,
	'transaction_period':pk,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Transaction_adjustment_List_load.html',context)


def Transaction_adjustment_Transactions_load(request,pk,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Transaction_adjustment_Transactions_form(request.POST or None)
	member=Members.objects.get(id=pk)
	member_selected=MembersAccountsDomain.objects.filter(member=member).first()
	records=TransactionAjustmentRequest.objects.filter(member__member=member_selected.member_id,status='UNTREATED')

	queryset=StandingOrderAccounts.objects.filter(transaction__member=member)
	transactions=[]
	active_transactions=[]

	if request.method=="POST" and 'btn_transaction' in request.POST:
		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		return HttpResponseRedirect(reverse('Transaction_adjustment_Transactions_Accounts_load',args=(transaction.pk,pk,transaction_period,)))



	context={
	'queryset':queryset,
	'form':form,
	'transaction_period':transaction_period,
	'member':member,
	'transactions':transactions,
	'active_transactions':active_transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Transaction_adjustment_Transactions_load.html',context)


def Transaction_adjustment_Transactions_Accounts_load(request,pk, return_pk,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	processed_by=CustomUser.objects.get(id=request.user.id)

	transaction=TransactionTypes.objects.get(id=pk)
	minimum_amount=transaction.minimum_amount
	member=Members.objects.get(id=return_pk)

	default_account_number=f'{transaction.code}{member.coop_no}'
	active_transaction_account_name=transaction.name
	default_amount=0

	form=Transaction_adjustment_selection_form(request.POST or None)
	member_selected=MembersAccountsDomain.objects.get(member=member,transaction=transaction)


	if request.method=="POST":
		tdate=get_current_date(now)
		account_number=request.POST.get("account_number")
		# transaction=StandingOrderAccounts.objects.get(transaction__account_number=account_number)
		
		amount = request.POST.get('amount')

		if TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,member=member_selected,status='UNTREATED').exists():
			messages.info(request,'You still have an Incomplete Transactions')
			return HttpResponseRedirect(reverse('Transaction_adjustment_Transactions_Accounts_load',args=(pk, return_pk,transaction_period)))

		if float(amount) == 0:
			if CompulsorySavings.objects.filter(transaction=transaction).exists():
				messages.info(request,'This is a compulsory savings, it canot be Zero(0)')
				return HttpResponseRedirect(reverse('Transaction_adjustment_Transactions_Accounts_load',args=(pk, return_pk,transaction_period)))

			pass

		elif float(amount) < float(minimum_amount):
			messages.info(request,'The amount specified is less then the Minimum Amount of ' +  str(minimum_amount) + ' allowed')
			return HttpResponseRedirect(reverse('Transaction_adjustment_Transactions_Accounts_load',args=(pk, return_pk,transaction_period)))


		record=TransactionAjustmentRequest(processed_by=processed_by.username,approval_status='PENDING',tdate=tdate,status='UNTREATED',member=member_selected,amount=amount,effective_date=transaction_period)
		record.save()
		return HttpResponseRedirect(reverse('Transaction_adjustment_Transactions_load',args=(return_pk,transaction_period)))

	active_transactions=StandingOrderAccounts.objects.filter(transaction=member_selected).first()
	
	form.fields['effective_date'].initial=now
	if active_transactions:
		active_transaction_account_name=active_transactions.transaction.transaction.name
		active_transaction_account_number=active_transactions.transaction.account_number
		active_transaction_amount=active_transactions.amount
		
	else:

		active_transaction_account_number=default_account_number
		active_transaction_amount=default_amount
	
	context={
	'transaction_period':transaction_period,
	'active_transaction_account_name':active_transaction_account_name,
	'active_transaction_account_number':active_transaction_account_number,
	'active_transaction_amount':active_transaction_amount,
	'form':form,
	'pk':pk,
	'return_pk':return_pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Transaction_adjustment_Transactions_Accounts_load.html',context)


def Transaction_adjustment_Transactions_Accounts_Remove(request,pk):
	record=TransactionAjustmentRequest.objects.get(id=pk)
	return_pk=record.member.member_id
	record.delete()
	return HttpResponseRedirect(reverse('Transaction_adjustment_Transactions_load', args=(return_pk,record.effective_date,)))



def Transaction_Adjustment_Approved_View_List_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Deposit_Summary_form(request.POST or None)
	if request.method == 'POST':
		transaction_period=request.POST.get('current_date')

		dtObj = datetime.datetime.strptime(transaction_period, '%Y-%m-%d')
		transaction_period=get_current_date(dtObj)

		return HttpResponseRedirect(reverse('Transaction_Adjustment_Approved_View_List_Load',args=(transaction_period,)))
	form.fields['current_date'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Approved_View_List_Period_Load.html',context)




def Transaction_Adjustment_Approved_View_List_Load(request,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')


	members=TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,approval_status='APPROVED',status='UNTREATED').order_by('member__member__coop_no').values_list('member__member__coop_no','member__member__admin__last_name','member__member__admin__first_name','member__member__middle_name').distinct()

	members_array=[]
	for record in members:
		members_array.append((record[0],f'{record[1]} {record[2]} {record[3]}'))

	columns=['#','MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")
	columns.append("ACTION")

	order_list_array=[]
	for member in members_array:
		order_array=[]

		queryset=  TransactionAjustmentRequest.objects.filter(member__member__coop_no=member[0],approval_status='APPROVED',status='UNTREATED').aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		for transaction in transactions:
			value=''
			if TransactionAjustmentRequest.objects.filter(member__member__coop_no=member[0],member__transaction=transaction,approval_status='APPROVED',status='UNTREATED').exists():
				record=TransactionAjustmentRequest.objects.get(member__member__coop_no=member[0],member__transaction=transaction,approval_status='APPROVED',status='UNTREATED')
				value=record.amount

			order_array.append(value)

		order_array.insert(0,member[0])
		order_array.insert(1,member[1])
		order_array.append(total_amount)

		order_list_array.append(order_array)

	button_enabled=False
	if order_list_array:
		button_enabled=True
	context={
	'transaction_period':transaction_period,
	'transactions':transactions,
	'button_enabled':button_enabled,
	'columns':columns,
	'order_list_array':order_list_array,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}

	return render(request,'deskofficer_templates/Transaction_Adjustment_Approved_View_List_Load.html',context)


def Transaction_Adjustment_Approved_View_List_Upload_all(request,transaction_period):
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	amount_exist=0
	stop_date=get_current_date(now)
	start_date=get_current_date(now)

	members=TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,approval_status='APPROVED',status='UNTREATED')
	for member in members:
		if StandingOrderAccounts.objects.filter(transaction__account_number=member.member.account_number).exists():
			if member.amount and float(member.amount)>0:
				StandingOrderAccounts.objects.filter(transaction__account_number=member.member.account_number).update(amount=member.amount,tdate=tdate,processed_by=processed_by)
			else:
				StandingOrderAccounts.objects.filter(transaction__account_number=member.member.account_number).delete()
		else:
			if member.amount and float(member.amount)>0:
				StandingOrderAccounts(transaction=member.member,amount=member.amount,tdate=tdate,processed_by=processed_by).save()
	
		if StandingOrderAccounts.objects.filter(transaction__account_number=member.member.account_number).exists():
			queryset=StandingOrderAccounts.objects.get(transaction__account_number=member.member.account_number)
			amount_exist=queryset.amount
			start_date=queryset.tdate
	
		
	TransactionAjustmentHistory(member=member.member,amount=amount_exist,start_date=start_date,stop_date=stop_date).save()
	
	TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,approval_status='APPROVED',status='UNTREATED').update(status='TREATED')
	return HttpResponseRedirect(reverse('Transaction_Adjustment_Approved_View_List_Period_Load'))





def Transaction_Savings_Adjustment_Approved_List_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Savings Adjustment"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Transaction_Savings_Adjustment_Approved_List_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Transaction_Savings_Adjustment_Approved_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Transaction_Savings_Adjustment_Approved_List_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Transaction_Savings_Adjustment_Approved_List_load.html',context)


def Transaction_Savings_Adjustment_Approved_List_Detals_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	member=Members.objects.get(id=pk)
	records=TransactionAjustmentRequest.objects.filter(member__member=member,approval_status='APPROVED',status='UNTREATED')

	context={
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Transaction_Savings_Adjustment_Approved_List_Detals_Load.html',context)



def Transaction_Savings_Adjustment_Approved_Processed(request,pk,member_pk):
	tdate=get_current_date(now)
	status='TREATED'
	record=TransactionAjustmentRequest.objects.get(id=pk)
	amount=record.amount
	member=record.member

	amount_exist=record.member.standingorderaccounts.amount
	start_date=record.member.standingorderaccounts.updated_at
	stop_date=tdate
	
	TransactionAjustmentHistory(member=member,amount=amount_exist,start_date=start_date,stop_date=stop_date).save()

	if float(amount) == 0:
		record.member.standingorderaccounts.delete()
	else:
		record.member.standingorderaccounts.amount=amount
		record.member.standingorderaccounts.save()
	record.status=status
	record.save()
	return HttpResponseRedirect(reverse('Transaction_Savings_Adjustment_Approved_List_Detals_Load',args=(member_pk,)))


def Transaction_Loan_adjustment_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Loan Adjustment"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Transaction_Loan_adjustment_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Transaction_Loan_adjustment_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Transaction_Loan_adjustment_List_load.html',context)


def Transaction_Loan_adjustment_Transaction_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	records=LoansRepaymentBase.objects.filter(member=member,balance__lt=0)

	existing_requests=TransactionLoanAjustmentRequest.objects.filter(member__member=member,status='UNTREATED')

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'member':member,
	'existing_requests':existing_requests,
	}
	return render(request,'deskofficer_templates/Transaction_Loan_adjustment_Transaction_load.html',context)


def Transaction_Loan_adjustment_Transaction_Preview(request,pk,loan_code):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction_period=AdjustmentPeriods.objects.get(status='ACTIVE')
	transaction_period=transaction_period.transaction_period
	form=Transaction_Loan_adjustment_selection_form(request.POST or None)

	member=Members.objects.get(id=pk)
	loan=[]
	if request.method=='POST':

		loan_id=request.POST.get('loan')
		loan=LoansRepaymentBase.objects.get(id=loan_id)
	else:
		loan=LoansRepaymentBase.objects.get(id=loan_code)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'member':member,
	'loan':loan,
	'transaction_period':transaction_period,
	'form':form,
	}
	return render(request,'deskofficer_templates/Transaction_Loan_adjustment_Transaction_Preview.html',context)


def Transaction_Loan_adjustment_Transaction_Process(request,pk,loan_code):
	# member=Members.objects.get(id=pk)
	transaction_period=AdjustmentPeriods.objects.get(status='ACTIVE')
	transaction_period=transaction_period.transaction_period

	loan=LoansRepaymentBase.objects.get(id=loan_code)
	loan_amount=loan.loan_amount
	amount_paid=loan.amount_paid
	balance=loan.balance
	transaction=loan.transaction
	default_duration=transaction.duration
	tdate=get_current_date(now)

	monthly_repayment=math.ceil(float(loan_amount)/float(default_duration))
	months_paid=math.ceil(float(amount_paid)/float(monthly_repayment))
	remaining_months=int(default_duration)-int(months_paid)

	expected_repayment=math.ceil(float(abs(balance))/float(remaining_months))

	allow_reduction=False
	if LoanLessRepaymentEnable.objects.filter(status='YES').exists():
		allow_reduction = True


	if request.method =="POST":
		purpose=request.POST.get('purpose')
		repayment=request.POST.get('repayment')
		amount=request.POST.get('amount')
		effective_date=transaction_period

		if allow_reduction == False:
			# return HttpResponse(f' Not Allowed {allow_reduction}')
			if float(amount) < float(expected_repayment):
				messages.info(request,"The Amount Specified is not Allowed, you have Minimum of " + str(expected_repayment) + " to pay off this loan in " +  str(remaining_months) + " month(s) interval" )
				return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_Transaction_Preview',args=(pk,loan_code,)))

			if float(amount) == float(expected_repayment):
				messages.info(request,"No Change Made in " + str(expected_repayment) + " to pay off this loan in " +  str(remaining_months) + " month(s) interval" )
				return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_Transaction_Preview',args=(pk,loan_code,)))

		
		if TransactionLoanAjustmentRequest.objects.filter(member=loan,status='UNTREATED'):
			messages.info(request,'You still have an Incomplete Transactions')
			return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_Transaction_Preview',args=(pk,loan_code,)))

		record=TransactionLoanAjustmentRequest(member=loan,
												amount=amount,
												approval_status='PENDING',
												effective_date=effective_date,
												tdate=tdate,
												status='UNTREATED')
		record.save()

		return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_Transaction_load',args=(pk,)))


def Transaction_Loan_adjustment_Transaction_Cancel(request,pk):
	record=TransactionLoanAjustmentRequest.objects.get(id=pk)
	return_pk=record.member.member.id
	record.delete()
	return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_Transaction_load',args=(return_pk,)))


def Transaction_Loan_adjustment_Transaction_Approved_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=TransactionLoanAjustmentRequest.objects.filter(status='UNTREATED',approval_status='APPROVED')

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Transaction_Loan_adjustment_Transaction_Approved_List_Load.html',context)


def Transaction_Loan_adjustment_Transaction_Approved_details_Processed(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=TransactionLoanAjustmentRequest.objects.get(id=pk)
	LoansRepaymentBase.objects.filter(loan_number=record.member.loan_number).update(repayment=record.amount)
	record.status='TREATED'
	record.save()
	return HttpResponseRedirect(reverse('Transaction_Loan_adjustment_Transaction_Approved_List_Load'))






#########################################################
############### LOAN TRANSACTION ########################
#########################################################


def Emergency_Loan_Dashboard_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Emergency_Loan_Dashboard_Load.html',context)


def Embergency_loan_Form_Issueance_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Member For Emergency Loan"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Embergency_loan_Form_Issueance_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Embergency_loan_Form_Issueance_list_load(request):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Embergency_loan_Form_Issueance_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Embergency_loan_Form_Issueance_list_load.html',context)


def Emergency_loan_Form_Issueance(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	submission_status="PENDING"
	transaction_status='UNTREATED'
	form=Emergency_loan_Application_form(request.POST or None)

	member=Members.objects.get(id=pk)

	exist_loans = LoanFormIssuance.objects.filter(member=member,status='UNTREATED',loan_path='EMERGENCY')
	tdate=get_current_date(now)

	loan_based_saving=[]
	if LoanBasedSavings.objects.all().exists():
		loan_based_saving=LoanBasedSavings.objects.all().first()
		loan_based_code=loan_based_saving.savings.code


	if request.method=="POST":
		if TransactionSources.objects.filter(title='LOAN').exists():
			queryset=TransactionSources.objects.get(title='LOAN')

			if queryset.maximum_amount<=0:
				messages.error(request,'Overall Maximum Loan Amount not Set')
				return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance',args=(pk,)))

			if queryset.salary_loan_relationship<=0:
				messages.error(request,'Salary Loan Relationship not Set')
				return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance',args=(pk,)))
		else:
			messages.error(request,'Please configure Sources')
			return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance',args=(pk,)))


		category='MONETARY'

		processed_by=CustomUser.objects.get(id=request.user.id)

		date_applied_id=request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_applied_id, date_format)
		date_applied=get_current_date(dtObj)

		loan_obj = request.POST.get("loans")
		loan=TransactionTypes.objects.get(id=loan_obj)
		amount = request.POST.get("amount")

		if not amount:
			messages.error(request,'Loan Amount is Missing')
			return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance',args=(pk,)))

		total_loan=0
		current_amount_due=amount
		grand_total=amount
		if LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0)).exists():
			if multiple_loan_status == 'NOT ALLOWED':
				messages.info(request,"Additional Loan not allowed for the Transaction")
				return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance', args=(pk,)))
			
			loans=LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0))
			loans_sum=LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0)).aggregate(total_repayment=Sum('repayment'),total_amount=Sum('balance'))
			total_loan=loans_sum['total_amount']
			repayment_total=loans_sum['total_repayment']
			
			grand_total=float(abs(total_loan)) + float(amount)


			max_amount=queryset.maximum_amount # loaded from TransactionSources as overall Maximum Amount
			salary_rate=queryset.salary_loan_relationship

			if float(grand_total) > float(max_amount):
				amount_due = float(max_amount)-float(abs(total_loan)) # Maximum Loan one can get when all loans are put together
				current_amount_due=amount_due
				# messages.error(request,'You have Exceeded the Maximum Amount Allowed, you are qualified for '+ str(amount_due))
				# return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance', args=(pk,)))



		
		applied_amount=current_amount_due
		maximum_amount = loan.maximum_amount
		multiple_loan_status=loan.multiple_loan_status

		selected_transaction_rate=0
		
		if loan.savings_rate == "YES":
			selected_transaction_rate=loan.saving_rating

			if selected_transaction_rate > 0:
				percentage_amount=(float(selected_transaction_rate)/100)*float(grand_total)
				loan_based_account_number=str(loan_based_code) + str(member.coop_no)

				saved_amount=0
				if PersonalLedger.objects.filter(account_number=loan_based_account_number).exists():
					ledger_balance=PersonalLedger.objects.filter(account_number=loan_based_account_number).last()
					saved_amount=ledger_balance.balance
				
				if not saved_amount:
					messages.error(request,'You do not have any savings for this Amount')
					return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance',args=(pk,)))

				approved_amount = applied_amount
				new_approved_amount=applied_amount

				# return HttpResponse(f'New loan Amount: {new_approved_amount} Savings Saved Amount: {saved_amount}')
				
				savings_made_waver=False
				if MembersExclusiveness.objects.filter(member=member,transaction=loan,processing_status='UNPROCESSED',approval_status='APPROVED').exists():
					wavers=MembersExclusiveness.objects.filter(member=member,transaction=loan,processing_status='UNPROCESSED',approval_status='APPROVED')
					for item in wavers:
						if item.task.title == 'SAVINGS MADE':
							savings_made_waver=True						

				
				if savings_made_waver == False:
					if float(percentage_amount) > float(saved_amount):
											
						approved_amount=math.ceil((100*float(saved_amount))/float(selected_transaction_rate))
						new_approved_amount=float(approved_amount)-float(abs(total_loan)) # Overall Approved Amount less existing loan Balances	
				else:
					approved_amount=approved_amount
					new_approved_amount=float(approved_amount)-float(abs(total_loan)) # Overall Approved Amount less existing loan Balances	
					
		
		duration=int(loan.duration)


		current_amount_due=new_approved_amount
		if float(approved_amount) > float(maximum_amount):
			current_amount_due = float(max_amount)-float(abs(total_loan)) # MAXIMUM LOAN AMOUNT LESS TOTAL EXISTING LOANS
			# current_amount_due=float(amount_due)-float(total_loan)

		if loan.category==category:
			if float(current_amount_due)>float(maximum_amount):
				messages.error(request,f"Amount Due of {current_amount_due} is More than " + str(maximum_amount) + " Maximum Amount allowed for this Transaction")
				return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))

		receipt_obj=AutoReceipt.objects.first()
		receipt= str(receipt_obj.receipt).zfill(5)
		receipt_obj.receipt=int(receipt_obj.receipt)+1
		receipt_obj.save()


		if LoanFormIssuance.objects.filter(member=member,loan=loan,status='UNTREATED').exists():
			messages.error(request,"You still have Open Transaction")
			return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance', args=(pk,)))

		record=LoanFormIssuance(receipt=receipt,
								loan_path='EMERGENCY',
								date_applied=date_applied,
								tdate=tdate,
								member=member,
								loan_amount=current_amount_due,
								loan=loan,
								amount_saved=saved_amount,
								status=transaction_status,
								processed_by=processed_by.username)
		record.save()
		return HttpResponseRedirect(reverse('emergency_loan_application_form_issuanace_confirmation', args=(receipt,)))


	form.fields['date_applied'].initial=get_current_date(now)
	context={

	'form':form,

	'member':member,
	'exist_loans':exist_loans,
	'pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Emergency_loan_Form_Issueance.html',context)


def Emergency_loan_Form_Issueance_delete(request,pk,return_pk):
	record=LoanFormIssuance.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance', args=(return_pk,)))


def emergency_loan_application_form_issuanace_confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)

	applicant = LoanFormIssuance.objects.get(receipt=pk)

	if request.method == 'POST':
		pass

	context={
	'form':form,
	# 'period':period,
	# 'batch':batch,
	# 'transaction':loan,
	'applicant':applicant,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_form_issuanace_confirmation.html',context)



def emergency_loan_application_form_issue_view_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=emergency_loan_request_order_form(request.POST or None)
	records=[]
	if request.method == 'POST':

		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)

		records = LoanFormIssuance.objects.filter(loan=loan,status='UNTREATED',loan_path='EMERGENCY')

	context={
	'records':records,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_form_issue_view_load.html',context)



def emergency_loan_application_form_issue_drop(request,pk):
	record = LoanFormIssuance.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('emergency_loan_application_form_issue_view_load'))



def  emergency_loan_application_form_issue_history_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=emergency_loan_request_order_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)

		exist_loans = LoanFormIssuance.objects.filter(loan_path='EMERGENCY',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_form_issue_history_period_load.html',context)




def Embergency_loan_Form_Application_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Member For Emergency Loan"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Embergency_loan_Form_Application_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Embergency_loan_Form_Application_list_load(request):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Embergency_loan_Form_Application_search'))

		members=LoanFormIssuance.objects.filter(Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value()) | Q(member__coop_no__icontains=form['title'].value())).filter(status='UNTREATED')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Embergency_loan_Form_Application_list_load.html',context)


def Emergency_loan_application_form_processing(request,pk):
	form=loan_application_processing_form(request.POST or None)

	net_form=loan_request_document_attachment_form(request.POST or None)

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	tdate = get_current_date(now)

	applicant=LoanFormIssuance.objects.get(id=pk)
	member=applicant.member
	loan=applicant.loan
	exist_amount = applicant.loan_amount
	total_guarantors=applicant.loan.guarantors

	bank_accounts=MembersBankAccounts.objects.filter(member_id=applicant.member)
	processed_by = CustomUser.objects.get(id=request.user.id)

	seleected_guarantors=[]
	new_loan=[]
	new_amount=0
	loan_pk=0
	category='MONETARY'

	loan_based_saving=[]
	if LoanBasedSavings.objects.all().exists():
		loan_based_saving=LoanBasedSavings.objects.all().first()
		loan_based_code=loan_based_saving.savings.code


	if LoanApplication.objects.filter(applicant=applicant).exists():
		new_loan=LoanApplication.objects.get(applicant=applicant)
		new_amount=new_loan.loan_amount
		loan_pk=new_loan.pk
		seleected_guarantors=LoanApplicationGuarnators.objects.filter(applicant=new_loan)


	if  request.method =='POST' and 'application' in request.POST:
		new_amount=request.POST.get('loan_new_amount')
		if float(new_amount)<=0:
			messages.error(request,'Invalid Loan Amount Specification')
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))

		if float(exist_amount) < float(new_amount):
			messages.error(request,'You cannot apply for Amount beyond the already approved amount of ' + str(exist_amount))
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))

		total_loan=0
		current_amount_due=new_amount
		grand_total=new_amount
		
		if LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0)).exists():
			if multiple_loan_status == 'NOT ALLOWED':
				messages.info(request,"Additional Loan not allowed for the Transaction")
				return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance', args=(pk,)))
			
			loans=LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0))
			loans_sum=LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0)).aggregate(total_repayment=Sum('repayment'),total_amount=Sum('balance'))
			total_loan=loans_sum['total_amount']
			repayment_total=loans_sum['total_repayment']
			grand_total=float(abs(total_loan)) + float(amount)


			max_amount=queryset.maximum_amount # loaded from TransactionSources as overall Maximum Amount
			salary_rate=queryset.salary_loan_relationship

			if float(grand_total) > float(max_amount):
				amount_due = float(max_amount)-float(abs(total_loan)) # Maximum Loan one can get when all loans are put together
				current_amount_due=amount_due
				# messages.error(request,'You have Exceeded the Maximum Amount Allowed, you are qualified for '+ str(amount_due))
				# return HttpResponseRedirect(reverse('Emergency_loan_Form_Issueance', args=(pk,)))



		
		applied_amount=current_amount_due
		maximum_amount = loan.maximum_amount
		multiple_loan_status=loan.multiple_loan_status

		selected_transaction_rate=0
		
		if loan.savings_rate == "YES":
			selected_transaction_rate=loan.saving_rating

			if selected_transaction_rate > 0:
				percentage_amount=(float(selected_transaction_rate)/100)*float(grand_total)
				loan_based_account_number=str(loan_based_code) + str(member.coop_no)

				saved_amount=0
				if PersonalLedger.objects.filter(account_number=loan_based_account_number).exists():
					ledger_balance=PersonalLedger.objects.filter(account_number=loan_based_account_number).last()
					saved_amount=ledger_balance.balance
				
				if not saved_amount:
					messages.error(request,'You do not have any savings for this Amount')
					return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))

				approved_amount = applied_amount
				new_approved_amount=applied_amount

				# return HttpResponse(f'New loan Amount: {new_approved_amount} Savings Saved Amount: {saved_amount}')
				
				savings_made_waver=False
				if MembersExclusiveness.objects.filter(member=member,transaction=loan,processing_status='UNPROCESSED',approval_status='APPROVED').exists():
					wavers=MembersExclusiveness.objects.filter(member=member,transaction=loan,processing_status='UNPROCESSED',approval_status='APPROVED')
					for item in wavers:
						if item.task.title == 'SAVINGS MADE':
							savings_made_waver=True						

				
				if savings_made_waver == False:
					if float(percentage_amount) > float(saved_amount):
											
						approved_amount=math.ceil((100*float(saved_amount))/float(selected_transaction_rate))
						new_approved_amount=float(approved_amount)-float(abs(total_loan)) # Overall Approved Amount less existing loan Balances	
				else:
						approved_amount=approved_amount
						new_approved_amount=float(approved_amount)-float(abs(total_loan)) # Overall Approved Amount less existing loan Balances	
					
		
		duration=int(loan.duration)


		current_amount_due=new_approved_amount
		if float(approved_amount) > float(maximum_amount):
			current_amount_due = float(max_amount)-float(abs(total_loan)) # MAXIMUM LOAN AMOUNT LESS TOTAL EXISTING LOANS
			# current_amount_due=float(amount_due)-float(total_loan)

		if loan.category==category:
			if float(current_amount_due)>float(maximum_amount):
				messages.error(request,f"Amount Due of {current_amount_due} is More than " + str(maximum_amount) + " Maximum Amount allowed for this Transaction")
				return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))


		date_applied_id = request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_applied_id, date_format)
		date_applied=get_current_date(dtObj)



		desired_duration=request.POST.get("duration")

		if desired_duration and int(desired_duration)>0:
			if int(desired_duration) > int(applicant.loan.duration):
				messages.error(request,'The Desired Duration cannot be greater than the Default')
				return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))
			else:
				duration=desired_duration
		else:
			duration=int(applicant.loan.duration)


		if LoanApplication.objects.filter(applicant=applicant).exists():
			record=LoanApplication.objects.get(applicant=applicant)
			record.loan_amount=current_amount_due
			record.save()
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))



		record=LoanApplication(transaction_status='UNTREATED',
								duration=duration,
								date_applied=date_applied,
								tdate=tdate,applicant=applicant,
								loan_amount=current_amount_due,processed_by=processed_by.username)
		record.save()
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))



	if request.method=='POST' and 'btn_account' in request.POST:
		account_id=request.POST.get('account')
		account=MembersBankAccounts.objects.get(id=account_id)

		record=LoanApplication.objects.get(applicant=applicant)
		record.bank_account=account
		record.save()
		messages.success(request,'Bank Account Details Added Successfully')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))


	if request.method=='POST' and 'btn_net_pay' in request.POST:
		payment_as_at=request.POST.get('payment_as_at')
		net_pay=request.POST.get('net_pay')

		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)

		else:
			image_url=None

		if not payment_as_at:
			messages.error(request,'Description is Missing')
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))


		if not net_pay or float(net_pay) <=0:
			messages.error(request,'Net Pay Missing')
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))

		record=LoanApplication.objects.get(applicant=applicant)
		record.payment_as_at=payment_as_at
		record.net_pay=net_pay
		record.image=image_url
		record.save()



		record.applicant.member.last_used_net_pay=net_pay
		record.applicant.member.net_pay_as_at=payment_as_at
		record.applicant.member.save()

		messages.success(request,'Net Pay Added Successfully')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing', args=(pk,)))

	if request.method == 'POST' and 'btn-preview' in request.POST:
		ignore=request.POST.get('ignore')
		return HttpResponseRedirect(reverse('Emergency_loan_application_preview',args=(loan_pk,pk,'EMERGENCY',ignore,) ))



	form.fields['loan_type'].initial=applicant.loan.name
	form.fields['loan_amount'].initial=applicant.loan_amount
	form.fields['duration'].initial=applicant.loan.duration
	form.fields['date_applied'].initial=get_current_date(now)

	if exist_amount:
		form.fields['loan_new_amount'].initial=exist_amount
	net_form.fields['net_pay'].initial=applicant.member.last_used_net_pay
	net_form.fields['payment_as_at'].initial=applicant.member.net_pay_as_at
	image_link=[]
	new_loan_pk=applicant.pk

	if new_loan:
		image_link=new_loan.image
		new_loan_pk=new_loan.pk

	if LoanApplication.objects.filter(applicant=applicant).exists():
		form.fields['loan_new_amount'].initial=new_amount

	context={
	'form':form,
	'image_link':image_link,
	'net_form':net_form,
	'applicant':applicant,
	'loan_pk':loan_pk,
	'new_amount':new_amount,
	'new_loan':new_loan,
	'new_loan_pk':new_loan_pk,
	'bank_accounts':bank_accounts,
	'seleected_guarantors':seleected_guarantors,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'return_pk':pk,
	}
	return render(request,'deskofficer_templates/Emergency_loan_application_form_processing.html',context)


def Emergency_loan_application_form_processing_guarantor_search(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members"
	form = searchForm(request.POST or None)
	record=LoanApplication.objects.get(id=pk)
	return_pk=record.applicant_id
	return render(request,'deskofficer_templates/Emergency_loan_application_form_processing_guarantor_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,'pk':pk,'return_pk':return_pk,})


def Emergency_loan_application_form_processing_guarantor_add_list_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	form = searchForm(request.POST)
	record=LoanApplication.objects.get(id=pk)
	member=Members.objects.get(id=record.applicant.member_id)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing_guarantor_search',args=(pk,)))

		members=searchGuarantorMembers(form['title'].value(),'ACTIVE',member)

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'pk':pk,
	}
	return render(request,'deskofficer_templates/Emergency_loan_application_form_processing_guarantor_add_list_load.html',context)


def Emergency_loan_application_form_processing_guarantor_add(request,pk,loan_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	guarantor=Members.objects.get(id=pk)
	applicant=LoanApplication.objects.get(id=loan_pk)
	total_guarantors=applicant.applicant.loan.guarantors

	if LoanApplicationGuarnators.objects.filter(applicant=applicant).count() >= total_guarantors:
		messages.info(request,'You Have added the required Guarantors')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing_guarantor_search',args=(loan_pk,)))

	if LoanApplicationGuarnators.objects.filter(applicant=applicant,guarantor=guarantor).exists():
		messages.info(request,'This Member is already Added as guarantor to this Applicant')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing_guarantor_search',args=(loan_pk,)))

	LoanApplicationGuarnators(applicant=applicant,guarantor=guarantor,status='UNTREATED').save()
	return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing_guarantor_search',args=(loan_pk,)))


def Emergency_loan_application_form_processing_guarantor_delete(request,pk,return_pk):
	LoanApplicationGuarnators.objects.get(id=pk).delete()
	return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


def Emergency_loan_application_form_processing_bank_account_delete(request,pk,return_pk):
	LoanApplication.objects.filter(id=pk).update(bank_account=None)
	return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


def Emergency_loan_application_preview(request,pk, return_pk,loan_path,ignore):
	form=MemberShipRequestAdditionalInfo_form(request.POST or None)

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=LoanApplication.objects.get(id=pk)

	nok_list=[]
	if MembersNextOfKins.objects.filter(member=applicant.applicant.member).exists():
		nok_record = MembersNextOfKins.objects.filter(member=applicant.applicant.member).first()
		nok_list.append(nok_record.name)
		nok_list.append(nok_record.relationships.title)
		nok_list.append(nok_record.address)
		nok_list.append(nok_record.phone_number)

		applicant.nok_name=nok_record.name
		applicant.nok_Relationship=nok_record.relationships.title
		applicant.nok_address=nok_record.address
		applicant.nok_phone_no=nok_record.phone_number
		applicant.save()
	else:
		messages.error(request,'There is no registered Next of Kin for this Member')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))

	net_pay=applicant.net_pay

	if not net_pay and float(net_pay)<=0:
		messages.error(request,'Please add Net Pay')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


	status = 'UNTREATED'

	apex_loan=TransactionSources.objects.get(title='LOAN')
	maximum_loan = apex_loan.maximum_amount

	loan_type=applicant.applicant.loan.name
	loan_amount=applicant.applicant.loan_amount
	duration = applicant.applicant.loan.duration


	admin_charges_minimum = applicant.applicant.loan.admin_charges_minimum

	if float(admin_charges_minimum) >= float(loan_amount):
		admin_charge=applicant.applicant.loan.default_admin_charges
	else:
		if applicant.applicant.loan.admin_charges_rating == "PERCENTAGE":
			admin_charge=math.ceil((float(applicant.applicant.loan.admin_charges) / 100) * float(loan_amount))
		else:
			admin_charge=applicant.applicant.loan.admin_charges

	membership_waver=False
	savings_made_waver=False
	multiple_loans_waver=False
	salary_status_waver=False
	standing_order_status =False

	if MembersExclusiveness.objects.filter(transaction=applicant.applicant.loan,processing_status='UNPROCESSED',approval_status='APPROVED').exists():
		wavers=MembersExclusiveness.objects.filter(transaction=applicant.applicant.loan,processing_status='UNPROCESSED',approval_status='APPROVED')

		for item in wavers:
			if item.task.title == 'MEMBERSHIP AGE':
				membership_waver=True
			elif item.task.title == 'SAVINGS MADE':
				savings_made_waver=True
			elif item.task.title == 'SALARY STATUS':
				salary_status_waver=True


	bank_account=LoanApplication.objects.exclude(Q(bank_account__isnull=True)).filter(id=pk)
	if bank_account:
		bank_account_status=True
	else:
		bank_account_status=False
		messages.error(request,'Bank Details missing')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))

	guarantor_list=[]
	try:
		guarantors=LoanApplicationGuarnators.objects.filter(applicant=applicant)
		for guarantor in guarantors:
			small_guarantor=(guarantor.id,guarantor.guarantor.admin.first_name + " " + guarantor.guarantor.admin.last_name + " " + guarantor.guarantor.middle_name)
			guarantor_list.append(small_guarantor[1])
	except:
		guarantor_list=[]
	# for i in range(len(guarantor_list)):
	# 	print(guarantor_list[i])

	total_guarantors=applicant.applicant.loan.guarantors

	if int(guarantors.count())==int(total_guarantors):
		guarnator_status=True
	else:
		guarnator_status=False
		messages.error(request,'Guarantors missing')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))

	loan_savings_status=False
	loan_based_saving=[]
	savings_saved=0
	loan_saving_relationship=[]

	if applicant.applicant.loan.savings_rate == 'YES':
		if LoanBasedSavings.objects.all().exists():
			loan_based_saving = LoanBasedSavings.objects.first()
		else:
			messages.error(request,'Loan Based Savings not Set')
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))

		# loans_anchored=TransactionTypes.objects.filter(savings_rate='YES')

		loans_anchored_sum=LoansRepaymentBase.objects.filter(transaction__savings_rate='YES').filter(Q(balance__lt=0) & Q(member_id=applicant.applicant.member_id)).aggregate(total_amount=Sum('balance'))
		total_loans_anchored=loans_anchored_sum['total_amount']
		if not total_loans_anchored:
			total_loans_anchored=0

		expected_total_loans=abs(float(total_loans_anchored)) + float(loan_amount)


		savings_saved=0

		if MembersAccountsDomain.objects.filter(transaction=loan_based_saving.savings,member=applicant.applicant.member).exists():
			account_id=MembersAccountsDomain.objects.get(transaction=loan_based_saving.savings,member=applicant.applicant.member)

			if PersonalLedger.objects.filter(account_number=account_id.account_number).exists():
				savings_ledger=PersonalLedger.objects.filter(account_number=account_id.account_number).last()
				savings_saved=savings_ledger.balance
			else:
				messages.error(request,'No Savings Available for Loan Based Savings')
				return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))
		else:
			messages.error(request,'No account for Loan Based Savings')
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))

		loan_based_saving_rating=apex_loan.loan_based_saving

		if not float(loan_based_saving_rating):
			messages.error(request,'Loan Based Saving Rating not set')
			return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


		loan_saving_relationship= math.ceil( float(int(loan_based_saving_rating)/100) * float(expected_total_loans))
		if savings_made_waver:
			loan_savings_status=True
		else:

			if float(savings_saved) >= float(loan_saving_relationship):
				loan_savings_status=True

		if not loan_savings_status:
			if not ignore:
				messages.error(request,'You do not Have Expected Savings for this Loan Amount, You have  ' + str(savings_saved) + ' while you need ' + str(loan_saving_relationship) )
				return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


	total_savings=0
	savings_sum=get_standing_orders_sum(applicant.applicant.member_id)
	if savings_sum==None:
		total_savings=0
		standing_order_status=False
	else:
		total_savings=savings_sum
		standing_order_status=True

	total_loans=0
	balance_total=0
	loans_sum=LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.applicant.member_id)).aggregate(total_amount=Sum('repayment'),total_balance=Sum('balance'))
	total_loans=loans_sum['total_amount']
	balance_total= loans_sum['total_balance']
	
	if total_loans==None:
		total_loans=0
	else:
		total_loans=abs(float(total_loans))
	
	if balance_total == None:
		balance_total=0
	else:
		balance_total=abs(float(balance_total))

	shop_balance=0
	shops =CooperativeShopLedger.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.applicant.member_id)).order_by('-id').first()
	if shops:
		shop_balance=abs(shops.balance)


	total_debit=math.ceil(float(total_savings)+float(total_loans)) #+float(shop_balance))


	balance=float(net_pay)-total_debit
	
	

	date_joined = applicant.applicant.member.date_joined
	now = datetime.datetime.now()

	salary_loan_relationship = apex_loan.salary_loan_relationship
	if not float(salary_loan_relationship):
		messages.error(request,'Salary Loan Relationship not set')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


	salary_loan_relationship_computed= math.ceil(float(int(salary_loan_relationship)/100) * float(balance))

	interest_rate = applicant.applicant.loan.interest_rate

	if not float(interest_rate):
		messages.error(request,'Interest Rate not set')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


	interest= float(int(interest_rate)/100) * float(applicant.loan_amount)

	loan_age = applicant.applicant.loan.loan_age
	if not float(loan_age):
		messages.error(request,'Members Loan Age not set')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))


	members_age = (now.year - date_joined.year) * 12 + (now.month - date_joined.month)
	interest_deduction=applicant.applicant.loan.interest_deduction
	if not interest_deduction:
		messages.error(request,'Interest deduction source not set')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))



	if interest_deduction == "SOURCE":
		amount_scheduled = float(loan_amount)
		cash_recieved=float(amount_scheduled)-(float(admin_charge) + float(interest))
	else:
		amount_scheduled = float(loan_amount)+ float(interest)
		cash_recieved=float(amount_scheduled)-float(admin_charge)

	if int(duration) == 0:
		messages.error(request,'Please set the Loan Duration')
		return HttpResponseRedirect(reverse('Emergency_loan_application_form_processing',args=(return_pk,)))

	monthly_repayment=math.ceil(float(amount_scheduled)/float(duration))

	salary_status=True
	if salary_status_waver:
		salary_status=False
	else:
		if float(monthly_repayment)> float(salary_loan_relationship_computed):
			salary_status=False

	Member_Status = False
	if membership_waver:
		Member_Status = True
	else:
		if int(members_age)>int(loan_age):
			Member_Status = True



	record_array=[]

	if float(balance)<=0:
		balance="INADEQUATE"

	if request.method=="POST":

		date_applied_id = request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_applied_id, date_format)
		date_applied=get_current_date(dtObj)



		comment=request.POST.get("comment")
		applicant.comment=comment
		applicant.submission_status='SUBMITTED'
		applicant.admin_charge=admin_charge
		applicant.date_applied=date_applied
		applicant.save()

		description="NET PAY"
		value=net_pay
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="SALARY BALANCE AFTER DEDUCTIONS"
		value=balance
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description=loan_type
		value=loan_amount
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MONTHLY DEDUCTIONS"
		value=total_savings
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="OUTSTANDING MONTHLY LOAN REPAYMENTS"
		value='{0:.2f}'.format(total_loans)
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="COOPERATIVE SHOP"
		value=shop_balance
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="LOAN DURATION"
		value=str(duration) + " MONTHS"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="SALARY LOAN RELATIONSHIP"
		value=str(salary_loan_relationship) + "%"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="SALARY LOAN RELATIONSHIP COMPUTED"
		value=salary_loan_relationship_computed
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MATURITY AGE"
		value=str(loan_age) + " MONTHS"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="DATE JOINED"
		value=date_joined
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MEMBER AGE"
		value=str(members_age) + "MONTH(S)"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="LOAN INTEREST RATE"
		value=str(interest_rate) + "%"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="INTEREST DEDUCTION"
		value=interest_deduction
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="LOAN INTEREST"
		value=interest
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="AMOUNT SCHEDULED"
		value=amount_scheduled
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)
		
		description="AMOUNT RECIEVED"
		value=cash_recieved
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="MONTHLY REPAYMENT"
		value=round(float(monthly_repayment),2)
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		if savings_saved:
			description="LOAN BASED SAVINGS"
			value=loan_based_saving.savings.name
			category='ANALYSIS'
			waver=0
			tag=0
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

			description="SAVED AMOUNT"
			value=savings_saved
			category='ANALYSIS'
			waver=0
			tag=0
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

			description="LOAN BASED SAVINGS RATE"
			value=str(loan_based_saving_rating) + "%"
			category='ANALYSIS'
			waver=0
			tag=0
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="GUARANTORS"
		value=guarantor_list
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="NEXT OF KIN"
		value=nok_list
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)



		description="BANK DETAILS"
		value=applicant.bank_account.account_name + " - " + applicant.bank_account.account_number + ' - ' + applicant.bank_account.bank.title
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="ADMIN CHARGES"
		value=admin_charge
		waver=0
		tag=0
		category='ANALYSIS'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MEMBER STATUS"
		value=Member_Status
		waver=membership_waver
		tag=0
		if value:
			tag=1
		category='ANALYSIS'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="SALARY STATUS"
		value=salary_status
		waver=salary_status_waver
		tag=0
		if value:
			tag=1
		category='SUMMARY'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		if savings_saved:
			description="LOAN SAVINGS BASED STATUS"
			value=loan_savings_status
			waver=savings_made_waver
			tag=0
			if value:
				tag=1
			category='SUMMARY'
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="Bank Account Status"
		value=bank_account_status
		waver=0
		tag=0
		if value:
			tag=1
		category='SUMMARY'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="Guarantors Status"
		value=guarnator_status
		waver=0
		tag=0
		if value:
			tag=1
		category='SUMMARY'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)



		applicant1=LoanFormIssuance.objects.get(id=applicant.applicant_id)
		applicant1.processing_status='PROCESSED'
		applicant1.status='TREATED'
		applicant1.save()
		return HttpResponseRedirect(reverse('Emergency_Loan_Dashboard_Load'))

	compulsory_saving_status = False
	if CompulsorySavings.objects.all().exists():
		compulsory_saving = CompulsorySavings.objects.first()

		if StandingOrderAccounts.objects.filter(transaction__member=applicant.applicant.member,transaction__transaction=compulsory_saving.transaction).exists():
			compulsory_saving_status = True

	maximum_loan_status = False
	compound_loan =float(abs(balance_total)) + float(applicant.loan_amount)

	if float(compound_loan)<= float(maximum_loan):
		maximum_loan_status =True


	# print(maximum_loan_status)


	if maximum_loan_status and guarnator_status and bank_account_status and compulsory_saving_status and standing_order_status:
		if not ignore:
			if membership_waver:
				button_enabled=True
			else:
				button_enabled=False
				if Member_Status == True:
					button_enabled=True
			# print(f'1. {button_enabled}')

			if savings_made_waver:
				button_enabled=True
			else:
				button_enabled=False
				if loan_savings_status == True:
					button_enabled=True
			# print(f'2. {button_enabled}')

			if salary_status_waver:
				button_enabled=True
			else:
				button_enabled=False
				if salary_status == True:
					button_enabled=True

			# print(f'3. {button_enabled}')
		else:
			button_enabled=True
	else:
		button_enabled=False

	
	record_array.append(("Net Pay",net_pay))
	record_array.append(("Salary Balance After Deductions",balance))
	record_array.append((loan_type,loan_amount))
	record_array.append(('Monthly Contributions',total_savings))
	record_array.append(('Loan Monthly Repayment',total_loans))
	record_array.append(('Cooperative Shop',shop_balance))
	record_array.append(('Loan Duration',str(duration) + " Months"))
	record_array.append(('Salary Loan Relationshipp',salary_loan_relationship))
	record_array.append(('Salary Loan Relationship Computed',salary_loan_relationship_computed))
	record_array.append(('Maturity Age',str(loan_age)[:-3] + " Months"))
	record_array.append(('Date Joined',date_joined))
	record_array.append(('Members Age',f'{members_age} Months'))
	record_array.append(('Loan Interest Rate',f'{interest_rate}%'))
	record_array.append(('Interest Deduction',interest_deduction))
	record_array.append(('Loan Interest',f'=N={interest}'))
	record_array.append(('Amount Scheduled',f'=N={amount_scheduled}'))
	record_array.append(('Monthly Repayment',f"=N={monthly_repayment}"))
	record_array.append(('Admin Charges',f"=N={admin_charge}"))
	record_array.append(('Cash Recieved',f"=N={cash_recieved}"))

	if savings_saved:
		record_array.append(('Loan Based Savings',loan_based_saving.savings.name))
		record_array.append(('Saved Amount (' + str(loan_based_saving.savings.name) +")",savings_saved))
		record_array.append(('Loan Based Savings Rate',str(loan_based_saving_rating) + "%"))

	record_array.append(('Guarantors',guarantor_list))

	record_array.append(('Bank Details',applicant.bank_account.account_name + " - " + str(applicant.bank_account.account_number) + ' - ' +  applicant.bank_account.bank.title))
	record_array.append(('Next of Kin',f'{nok_list[0]}, {nok_list[1]}, {nok_list[2]}'))

	form.fields['comment'].initial="FOR YOUR CONSIDERATION"
	form.fields['date_applied'].initial=get_current_date(now)
	context={
	'loan_path':loan_path,
	'form':form,
	'savings_anchored':applicant.applicant.loan.savings_rate,
	'record_array':record_array,
	'membership_waver':membership_waver,
	'applicant':applicant,
	'ignore':ignore,
	'pk':pk,
	'salary_status':salary_status,
	'Member_Status':Member_Status,
	'loan_savings_status':loan_savings_status,
	'button_enabled':button_enabled,
	'guarnator_status':guarnator_status,
	'bank_account_status':bank_account_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/Emergency_loan_application_preview.html',context)


def Emergency_Loan_application_active_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = LoanApplication.objects.filter(transaction_status='UNTREATED',applicant__loan_path='EMERGENCY')

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Emergency_Loan_application_active_list_load.html',context)

def Emergency_Loan_application_active_drop(request,pk):
	record = LoanApplication.objects.get(id=pk)
	receipt=record.applicant.receipt
	LoanFormIssuance.objects.filter(receipt=receipt).update(status='UNTREATED')
	record.delete()
	return HttpResponseRedirect(reverse('Emergency_Loan_application_active_list_load'))

def Emergency_Loan_application_history_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=emergency_loan_request_order_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)


		exist_loans = LoanApplication.objects.filter(applicant__loan_path='EMERGENCY',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Emergency_Loan_application_history_period_load.html',context)



def emergency_loan_application_shortlisting_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	# LoanFormIssuance.objects.all().update(status='UNTREATED')
	# LoanApplication.objects.all().delete()

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=emergency_loan_request_order_form(request.POST or None)
	records=[]
	if request.method == 'POST':
		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('emergency_loan_application_shortlisting_records_load',args=(loan_id,)))
	context={
	'records':records,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_shortlisting_list_load.html',context)


def emergency_loan_application_shortlisting_records_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	# LoanFormIssuance.objects.all().update(status='UNTREATED')
	# LoanApplication.objects.all().delete()

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=emergency_loan_request_order_form(request.POST or None)

	loan = TransactionTypes.objects.get(id=pk)

	records = LoanApplication.objects.filter(applicant__loan=loan,transaction_status='UNTREATED')

	context={
	'records':records,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_shortlisting_records_load.html',context)


def emergency_loan_application_shortlisting_process(request,pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_shortlisting_process_form(request.POST or None)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	record = LoanApplication.objects.get(id=pk)

	if request.method == 'POST':

		date_shortlisted_id = request.POST.get('date_shortlisted')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_shortlisted_id, date_format)
		date_shortlisted=get_current_date(dtObj)

		LoanApplicationShortListing(tdate=tdate,applicant=record,processed_by=processed_by,status="UNTREATED",approval_status='PENDING').save()
		LoanApplication.objects.filter(id=pk).update(transaction_status='TREATED')
		return	HttpResponseRedirect(reverse('emergency_loan_application_shortlisting_records_load',args=(record.applicant.loan.pk,)))



	form.fields['date_applied'].initial=get_print_date(record.date_applied)
	form.fields['amount'].initial	=record.loan_amount
	form.fields['date_shortlisted'].initial=get_current_date(now)
	context={
	'record':record,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_shortlisting_process.html',context)



def emergency_loan_application_shortlisted_active_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = LoanApplicationShortListing.objects.filter(approval_status='PENDING',status='UNTREATED',applicant__applicant__loan_path ="EMERGENCY")

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_loan_application_shortlisted_active_list_load.html',context)



def emergency_Loan_application_shortlisting_KIV_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=emergency_loan_request_order_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)


		exist_loans = LoanApplicationShortListing.objects.filter(~Q(approval_status='APPROVED') & ~Q(approval_status='PENDING')).filter(applicant__applicant__loan_path='EMERGENCY',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_Loan_application_shortlisting_KIV_period_load.html',context)


def emergency_Loan_application_shortlisting_KIV_activate(request,pk):
	LoanApplicationShortListing.objects.filter(id=pk).update(approval_status='PENDING')
	return HttpResponseRedirect(reverse('emergency_Loan_application_shortlisting_KIV_period_load'))





def emergency_Loan_application_processing_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=emergency_loan_request_order_form(request.POST or None)

	exist_loans=[]
	if request.method == 'POST':

		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('emergency_Loan_application_processing_records_load',args=(loan_id,)))
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_Loan_application_processing_period_load.html',context)


def emergency_Loan_application_processing_records_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	loan = TransactionTypes.objects.get(id=pk)

	exist_loans = LoanApplicationShortListing.objects.filter(applicant__applicant__loan=loan,status='UNTREATED',approval_status='APPROVED')

	context={
	'exist_loans':exist_loans,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_Loan_application_processing_records_load.html',context)


def emergency_loan_application_approved_process_preview(request,pk):

	now = datetime.datetime.now()
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_application_approved_process_preview_form(request.POST or None)
	transaction_period=TransactionPeriods.objects.get(status='ACTIVE')


	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	tdate=get_current_date(now)

	applicant=LoanApplicationShortListing.objects.get(id=pk)

	# Application applicant ID
	applicant1=LoanApplication.objects.get(id=applicant.applicant_id)
	# applicant1 = applicant.applicant
	transaction=applicant.applicant.applicant

	nok_name = applicant1.nok_name
	nok_Relationship=applicant1.nok_Relationship
	nok_phone_no=applicant1.nok_phone_no
	nok_address=applicant1.nok_address

	guarantors = LoanApplicationGuarnators.objects.filter(applicant=applicant1)

	records=LoanApplicationSettings.objects.filter(applicant=applicant1)

	loan_type=transaction.loan.name


	loan_amount=applicant.approved_amount

	duration = applicant.applicant.duration
	admin_charge = applicant.applicant.admin_charge
	start_date=[]
	stop_date=[]

	interest_rate = transaction.loan.interest_rate

	interest= float(int(interest_rate)/100) * float(loan_amount)
	interest_deduction=transaction.loan.interest_deduction


	if interest_deduction== "SOURCE":
		amount_scheduled = float(loan_amount)
		cash_recieved=float(amount_scheduled)-(float(admin_charge) + float(interest))
	else:
		amount_scheduled = float(loan_amount)+ float(interest)
		cash_recieved=float(amount_scheduled)-float(admin_charge) 

	monthly_repayment=math.ceil(float(amount_scheduled)/float(duration))

	my_id=transaction.member.coop_no
	loan_code=transaction.loan.code


	button_show = False

	if request.method=="POST" and 'btn-fetch' in request.POST:
		start_date=request.POST.get('effective_date')
		start_date=datetime.datetime.strptime(start_date, '%Y-%m-%d')
		stop_date = start_date+ relativedelta(months=int(duration))
		start_date=get_current_date(start_date)
		stop_date=get_current_date(stop_date)
		button_show=True



	if request.method=="POST" and 'btn-process' in request.POST:

		loan_number = generate_number(loan_code,my_id,now)
		if loan_number==0:
			messages.error(request,'Please set the loan Code')
			return HttpResponseRedirect(reverse('emergency_loan_application_approved_process_preview',args=(pk,)))

		member=transaction.member #applicant.applicant.applicant.member

		effective_date_add=request.POST.get('effective_date_add')

		if effective_date_add:
			start_date=request.POST.get('effective_date')
			start_date=datetime.datetime.strptime(start_date, '%Y-%m-%d')
			stop_date = start_date+ relativedelta(months=int(duration))
			start_date=get_current_date(start_date)
			stop_date=get_current_date(stop_date)
		else:
			messages.error(request,"Please Accept the Effective Date")
			return HttpResponseRedirect(reverse('emergency_loan_application_approved_process_preview',args=(pk,)))

		# transaction=applicant.applicant.applicant.applicant.applicant.loan #applicant.applicant.applicant.applicant.loan


		if not nok_name:
			messages.error(request,"No Next of Kin recorded for this Member")
			return HttpResponseRedirect(reverse('emergency_loan_application_approved_process_preview',args=(pk,)))

		particulars=transaction.loan.name + " Loan Issuance"
		s = titlecase(particulars)
		particulars=s
		debit=abs(float(loan_amount)) #+float(interest))
		credit=0
		balance=-debit

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)


		ledger_balance=balance


		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		debit=0
		credit=abs(float(loan_amount))
		balance=float(cash_book_balance)+float(credit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)



		particulars=  "Interest on"  + transaction.loan.name.title()
		s = titlecase(particulars)
		particulars=s
		debit=abs(float(interest))
		credit=0
		balance=-(abs(float(ledger_balance)) + abs(float(interest)))

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)

		ledger_balance=balance

		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		credit=0
		debit=abs(float(debit))
		balance=float(cash_book_balance)-float(debit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)

		particulars=  "Admin Charges on :  "  + transaction.loan.name.title()
		s = titlecase(particulars)
		particulars=s
		debit=abs(float(admin_charge))
		credit=0
		balance=-(abs(float(ledger_balance)) + abs(float(admin_charge)))

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)

		ledger_balance=balance

		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		credit=abs(float(admin_charge))
		debit=0
		balance=float(cash_book_balance)+float(credit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)


		particulars=  "Deduction of Admin Charges from Source 0n:  "  + transaction.loan.name.title()
		s = titlecase(particulars)
		particulars=s
		debit=0
		credit=abs(float(admin_charge))
		balance=(float(ledger_balance) + abs(float(admin_charge)))

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)

		ledger_balance=balance
		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		debit=abs(float(admin_charge))
		credit=0
		balance=float(cash_book_balance)-float(debit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)


		if interest_deduction == "SOURCE":
			particulars= "Interest Deduction at source"
			s = titlecase(particulars)
			particulars=s
			debit=0
			credit=float(interest)
			balance=-(abs(float(ledger_balance)) - float(interest))

			post_to_ledger(member,
							transaction.loan,
							loan_number,
							particulars,
							debit,
							credit,
							balance,
							get_current_date(now),
							'ACTIVE',
							tdate,processed_by)



			Loans_Repayment_Base(member,
								nok_name,
								nok_Relationship,
								nok_phone_no,
								nok_address,
								duration,
								interest_deduction,
								interest_rate,
								interest,
								admin_charge,
								transaction.loan,
								loan_number,
								float(loan_amount),
								float(monthly_repayment),
								-float(loan_amount),
								0,
								start_date,
								stop_date,
								processed_by,
								'ACTIVE',
								tdate,
								'SCHEDULED')


			cash_book_balance=main_cashbook_balance()

			ledger_particulars= particulars + '(' + str(loan_number) + ')'
			debit=abs(float(interest))
			credit=0
			balance=float(cash_book_balance)-float(debit)
			ref_no=get_ticket()
			status='ACTIVE'
			tdate=get_current_date(now)
			source='LOAN ISSUEANCE'
			main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)

		else:

			Loans_Repayment_Base(member,
								duration,
								interest_deduction,
								interest_rate,
								interest,
								admin_charge,
								transaction.loan,
								loan_number,
								float(amount_scheduled),
								float(monthly_repayment),
								-amount_scheduled,
								0,
								start_date,
								stop_date,
								processed_by,
								'ACTIVE',
								tdate,
								'SCHEDULED')


		loan = LoansRepaymentBase.objects.get(loan_number=loan_number)
		for guarantor in guarantors:
			LoanGuarantors(loan=loan,member=guarantor.guarantor).save()


		applicant.status='TREATED'
		applicant.save()


		if transaction.loan.auto_stop_savings == 'YES':
			savings=LoanBasedSavings.objects.all()
			if savings:
				record=LoanBasedSavings.objects.all().first()
				StandingOrderAccounts.objects.filter(transaction__transaction=record.savings,transaction__member=member).update(status='INACTIVE')

				queryset=StandingOrderAccounts.objects.get(transaction__transaction=record.savings,transaction__member=member)
				StandingOrderDeactivatedAccounts(transaction=queryset,status='UNTREATED',processed_by=processed_by,tdate=tdate).save()

		return HttpResponseRedirect(reverse('Emergency_Loan_application_processing_confirmation',args=(loan_number,)))

	form.fields['effective_date'].initial=transaction_period.transaction_period
	context={
	'button_show':button_show,
	'start_date':start_date,
	'stop_date':stop_date,
	'loan_type':loan_type,
	'applicant':applicant,
	'loan_amount':loan_amount,
	'pk':pk,
	'duration':duration,
	'interest_rate':interest_rate,
	'interest_deduction':interest_deduction,
	'interest':interest,
	'monthly_repayment':monthly_repayment,
	'amount_scheduled':amount_scheduled,
	'cash_recieved':cash_recieved,
	'records':records,
	'admin_charge':admin_charge,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/emergency_loan_application_approved_process_preview.html',context)


def emergency_loan_application_reprint_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Reprint"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/emergency_loan_application_reprint_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,})

def emergency_loan_application_reprint_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request Form Reprint"
	form = searchForm(request.POST)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('emergency_loan_application_reprint_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/emergency_loan_application_reprint_list_load.html',context)



def emergency_members_loan_application_history_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=PersonalLedger_Transaction_Account_Load_form(request.POST or None)

	applicants=[]
	member=Members.objects.get(id=pk)
	if request.method == 'POST':

		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')



		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)
		tdate2 = datetime.datetime.strptime(stop_date, date_format)

		applicants=LoanApplicationShortListing.objects.filter(tdate__range=[tdate1,tdate2],applicant__applicant__member=member)

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'form':form,
	'member':member,
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/emergency_members_loan_application_history_load.html',context)




# def emergency_loan_application_discard(request):
# 	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
# 	task_array=[]
# 	for task in tasks:
# 		task_array.append(task.task.title)

# 	task_enabler=TransactionEnabler.objects.filter(status="YES")
# 	task_enabler_array=[]
# 	for item in task_enabler:
# 		task_enabler_array.append(item.title)

# 	default_password="NO"
# 	if Staff.objects.filter(admin=request.user,default_password='YES'):
# 		default_password="YES"


# 	records = LoanRequest.objects.filter(submission_status='PENDING',loan_path='PROJECT')


# 	context={
# 	'records':records,
# 	'task_array':task_array,
# 	'task_enabler_array':task_enabler_array,
# 	'default_password':default_password,
# 	}
# 	return render(request,'deskofficer_templates/loan_request_order_discard.html',context)


# def emergency_loan_application_order_discard_delete(request,pk):
# 	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
# 	task_array=[]
# 	for task in tasks:
# 		task_array.append(task.task.title)



# 	task_enabler=TransactionEnabler.objects.filter(status="YES")
# 	task_enabler_array=[]
# 	for item in task_enabler:
# 		task_enabler_array.append(item.title)

# 	default_password="NO"
# 	if Staff.objects.filter(admin=request.user,default_password='YES'):
# 		default_password="YES"

# 	LoanRequest.objects.filter(id=pk).delete()
# 	return HttpResponseRedirect(reverse('loan_request_order_discard'))




def Project_Loan_Dashboard_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Project_Loan_Dashboard_Load.html',context)



def loan_request_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Loan Request"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/loan_request_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def loan_request_list_load(request):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('loan_request_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/loan_request_list_load.html',context)


def loan_request_order(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	submission_status="PENDING"
	transaction_status='UNTREATED'
	form=loan_request_order_form(request.POST or None)

	member=Members.objects.get(id=pk)

	exist_loans = LoanRequest.objects.filter(member_id=member,submission_status='PENDING',transaction_status='UNTREATED')


	loan_based_saving=[]
	if LoanBasedSavings.objects.all().exists():
		loan_based_saving=LoanBasedSavings.objects.all().first()
		loan_based_code=loan_based_saving.savings.code


	if request.method=="POST":
		if TransactionSources.objects.filter(title='LOAN').exists():
			queryset=TransactionSources.objects.get(title='LOAN')
			

			if queryset.maximum_amount<=0:
				messages.error(request,'Overall Maximum Loan Amount not Set')
				return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))
			if queryset.salary_loan_relationship<=0:
				messages.error(request,'Salary Loan Relationship not Set')
				return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))
		else:
			messages.error(request,'Please configure Sources')
			return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))

		tdate=get_current_date(now)
		if form.is_valid():
			category='MONETARY'
			saving_status='NO'

			processed_by=CustomUser.objects.get(id=request.user.id)

			date_applied_id=request.POST.get('date_applied')
			date_format = '%Y-%m-%d'
			dtObj = datetime.datetime.strptime(date_applied_id, date_format)
			date_applied=get_current_date(dtObj)

			loan_obj = form.cleaned_data["loans"]
			loan=TransactionTypes.objects.get(id=loan_obj)

			amount = form.cleaned_data["amount"]
			applied_amount=amount

			maximum_amount = loan.maximum_amount
			multiple_loan_status=loan.multiple_loan_status
			desired_duration=request.POST.get('duration')

		
			if desired_duration and int(desired_duration)>0:
				if int(desired_duration) > int(loan.duration):
					messages.error(request,'The Desired Duration cannot be greater than the Default')
					return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))
				else:
					duration=desired_duration
			else:
				duration=int(loan.duration)


			if not amount:
				messages.error(request,'Loan Amount Missing')
				return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))

			
			grand_total=amount
			
			total_loan=0
			if LoansRepaymentBase.objects.filter(member=member,transaction=loan).filter(Q(balance__lt=0)).exists():
				if multiple_loan_status == 'NOT ALLOWED':
					messages.info(request,"Additional Loan not allowed for the Transaction")
					return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))

				loans=LoansRepaymentBase.objects.filter(member=member).filter(Q(balance__lt=0))
				loans_sum=LoansRepaymentBase.objects.filter(member=member).filter(Q(balance__lt=0)).aggregate(total_repayment=Sum('repayment'),total_amount=Sum('balance'))
				total_loan=abs(loans_sum['total_amount'])
				repayment_total=loans_sum['total_repayment']
				
				
				
			shop_balance=0
			if CooperativeShopLedger.objects.filter(member=member).exists():
				shops =CooperativeShopLedger.objects.filter(Q(balance__lt=0) & Q(member=member)).filter(status-'ACTIVE').order_by('-id').first()
				if shops:
					shop_balance=abs(shops.balance)

			grand_total=float(total_loan)+float(amount) #+float(shop_balance)

			selected_trannsaction_rate=0
			
			if loan.savings_rate == "YES":
				selected_transaction_rate=loan.saving_rating
				
				if selected_transaction_rate > 0:

					percentage_amount=(float(selected_transaction_rate)/100)*float(grand_total)
					loan_based_account_number=str(loan_based_code) + str(member.coop_no)
					# return HttpResponse(percentage_amount) 142362.5
	
					saved_amount=0
					if PersonalLedger.objects.filter(account_number=loan_based_account_number).exists():
						ledger_balance=PersonalLedger.objects.filter(account_number=loan_based_account_number).last()
						saved_amount=ledger_balance.balance
					
					# return HttpResponse(saved_amount)
					if not saved_amount:
						messages.error(request,'You do not have any savings for this Amount')
						return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))

					approved_amount = applied_amount
					new_approved_amount=applied_amount

					# return HttpResponse(new_approved_amount)
					savings_made_waver=False
			
					if MembersExclusiveness.objects.filter(member=member,transaction=loan,processing_status='UNPROCESSED',approval_status='APPROVED').exists():
						wavers=MembersExclusiveness.objects.filter(member=member,transaction=loan,processing_status='UNPROCESSED',approval_status='APPROVED')
						for item in wavers:
							if item.task.title == 'SAVINGS MADE':
								savings_made_waver=True	

					# return HttpResponse(new_approved_amount)

					if savings_made_waver == False:
						
						if float(percentage_amount) > float(saved_amount):
							# balance_remainer=float(percentage_amount)-float(saved_amount)
							
							approved_amount=math.ceil((100*float(saved_amount))/float(selected_transaction_rate))
							new_approved_amount=float(approved_amount)-abs(float(total_loan)) # Overall Approved Amount less existing loan Balances	
							
							saving_status='NO'
							# return HttpResponse(new_approved_amount)
						else:
							# return HttpResponse("less")
							saving_status='YES'
							approved_amount=approved_amount
							new_approved_amount=float(approved_amount) #-float(abs(total_loan))  Overall Approved Amount less existing loan Balances	
					
						# if new_approved_amount and float(new_approved_amount)<=0:
						# 	new_approved_amount=0
	
				else:
					messages.error(request,'Please Setup Saving Rating')
					return HttpResponseRedirect(reverse('loan_request_order',args=(pk,)))
			
			max_amount=queryset.maximum_amount
			salary_rate=queryset.salary_loan_relationship
			
			# return HttpResponse(f'next {approved_amount}')
			current_amount_due=new_approved_amount
			
			# return HttpResponse(f'next {current_amount_due}')
			
			if float(new_approved_amount) > float(max_amount):
				current_amount_due = float(max_amount)-float(abs(total_loan)) # MAXIMUM LOAN AMOUNT LESS TOTAL EXISTING LOANS
				# current_amount_due=float(amount_due)-float(total_loan)

			
			if loan.category==category:
				if float(current_amount_due)>float(maximum_amount):
					messages.error(request,f"Amount Due of {current_amount_due} is More than " + str(maximum_amount) + " Maximum Amount allowed for this Transaction")
					return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))


			if LoanRequest.objects.filter(member=member,loan=loan,transaction_status='UNTREATED').exists():
				messages.error(request,"You still have Open Transaction")
				return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))

			
			if not current_amount_due or float(current_amount_due)<=0:
				messages.error(request,"You do not have enough Savings for this Amount")
				return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))
			
			# return HttpResponse(f'{current_amount_due} going')
			
			record=LoanRequest(date_applied=date_applied,
								duration=duration,
								tdate=tdate,
								member=member,
								applied_amount=applied_amount,
								loan_amount=current_amount_due,
								existing_loan_balance=total_loan,
								loan=loan,
								saving_status=saving_status,
								savings=saved_amount,
								submission_status=submission_status,
								transaction_status=transaction_status,
								processed_by=processed_by.username)
			record.save()
			return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(record.pk,)))

		else:
			messages.error(request,"One or more record is missing")
			return HttpResponseRedirect(reverse('loan_request_order', args=(pk,)))

	form.fields['date_applied'].initial=get_current_date(now)
	context={

	'form':form,

	'member':member,
	'exist_loans':exist_loans,
	'pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_order.html',context)



def loan_request_order_delete(request,pk,return_pk):
	record=LoanRequest.objects.get(id=pk)
	LoanRequestAttachments.objects.filter(applicant=record).delete()
	record.delete()
	return HttpResponseRedirect(reverse('loan_request_order', args=(return_pk,)))


def loan_request_criteria_Loading(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=LoanRequest.objects.get(id=pk)

	total_savings=applicant.savings
	total_loans=applicant.existing_loan_balance
	
	savings=[]

	
	if CompulsorySavings.objects.all().exists():
		compulsory_savings=CompulsorySavings.objects.first()
		compulsory_savings_record=get_compulsory_savings(compulsory_savings.transaction,applicant.member_id)

		if not compulsory_savings_record:
			messages.error(request,'No record for Compulsary Savings')
			return HttpResponseRedirect(reverse('loan_request_order',args=(applicant.member_id,)))
	else:
		messages.error(request,'Compulsary Savings Not Set')
		return HttpResponseRedirect(reverse('loan_request_order',args=(applicant.member_id,)))

	savings = get_standing_orders(applicant.member_id)
	total_savings=get_standing_orders_sum(applicant.member_id)

	
	loans=[]
	total_loan=[]
	repayment_total=[]
	if LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.member_id,status='ACTIVE')).exists():
		loans=LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.member_id))
		loans_sum=LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.member_id)).aggregate(total_repayment=Sum('repayment'),total_amount=Sum('balance'))
		total_loan=abs(loans_sum['total_amount'])
		repayment_total=loans_sum['total_repayment']
	else:
		repayment_total=0	
		total_loan=0		
		

	shop_balance=0
	shops=[]
	if CooperativeShopLedger.objects.filter(member_id=applicant.member_id).exists():
		shops =CooperativeShopLedger.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.member_id)).order_by('-id').first()
		shop_balance=abs(shops.balance)

	total_debit=float(total_savings)+ abs(float(repayment_total)) #+float(shop_balance)

	attachment_form=loan_request_document_attachment_form(request.POST or None)
	
	if request.method=="POST" and 'attachment' in request.POST:
		description = request.POST.get("payment_as_at")
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(description, date_format)
		description=get_current_date(dtObj)

		net_pay=request.POST.get('net_pay')
		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)
		else:
			image_url=None

		if not description:
			messages.error(request,'Description Missing')
			return HttpResponseRedirect(reverse('loan_request_criteria_Loading',args=(pk,)))

		if not net_pay or float(net_pay) == 0:
			messages.error(request,'Net Pay Missing')
			return HttpResponseRedirect(reverse('loan_request_criteria_Loading',args=(pk,)))

		applicant.description=description
		applicant.net_pay=net_pay
		applicant.image=image_url
		applicant.save()
		applicant.member.last_used_net_pay=net_pay
		applicant.member.net_pay_as_at=description
		applicant.member.save()
		return HttpResponseRedirect(reverse('loan_request_criteria_Loading',args=(pk,)))

	form =loan_approved_amount_form(request.POST or None)
	
	if request.method == 'POST' and 'btn-continue' in request.POST:
		approved_amount=request.POST.get('approved_amount')
		if not approved_amount or float(approved_amount)<=0:
			approved_amount=request.POST.get('default_amount')
		
		applicant.loan_amount=approved_amount
		applicant.save()

		return HttpResponseRedirect(reverse('loan_request_preview',args=(pk,)))
	
	attachment_form.fields['net_pay'].initial=applicant.member.last_used_net_pay
	if applicant.member.net_pay_as_at:
		attachment_form.fields['payment_as_at'].initial=applicant.member.net_pay_as_at
	else:
		attachment_form.fields['payment_as_at'].initial=now
	
	button_enabled=False
	if applicant.net_pay:
		button_enabled=True

	form.fields['loan_amount'].initial=applicant.applied_amount
	form.fields['default_amount'].initial=applicant.loan_amount
	form.fields['approved_amount'].initial=applicant.loan_amount
	context={
	'button_enabled':button_enabled,
	'form':form,
	'applicant':applicant,
	'savings':savings,
	'loans':loans,
	'shops':shops,
	'shop_balance':shop_balance,
	'total_debit':total_debit,
	'pk':pk,
	'attachment_form':attachment_form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_criteria_Loading.html',context)


def LoanRequestAttachments_delete(request,pk,return_pk):
	item=LoanRequest.objects.get(id=pk)

	item.image=None
	item.gross_pay=0
	item.net_pay=0
	item.description=""
	item.save()
	return HttpResponseRedirect(reverse('loan_request_criteria_Loading',args=(return_pk,)))


def loan_request_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=MemberShipRequestAdditionalInfo_form(request.POST or None)

	apex_loan=TransactionSources.objects.get(title='LOAN')

	applicant=LoanRequest.objects.get(id=pk)
	savings_rate=applicant.loan.saving_rating
	net_pay=applicant.net_pay
	loan_type=applicant.loan.name

	member_code=applicant.member.coop_no
	loan_amount=applicant.loan_amount
	duration = applicant.duration
	
	savings_rate_computed=float(savings_rate)/100*float(loan_amount)

	membership_waver=False
	salary_status_waver=False
	savings_made_waver=False

	if MembersExclusiveness.objects.filter(member=applicant.member,processing_status='UNPROCESSED',approval_status='APPROVED').exists():
		wavers=MembersExclusiveness.objects.filter(member=applicant.member,processing_status='UNPROCESSED',approval_status='APPROVED')
		for item in wavers:
			if item.task.title == 'MEMBERSHIP AGE':
				membership_waver=True
			elif item.task.title == 'SALARY STATUS':
				salary_status_waver=True	
			elif item.task.title == 'SAVINGS MADE':
				savings_made_waver=True

	loan_based_saving=[]
	savings_saved=applicant.savings

	total_savings=0
	total_savings=get_standing_orders_sum(applicant.member_id)
	if total_savings==None:
		total_savings=0


	# Computing Outstanding Fascilities
	# ==============================
	total_loans=applicant.existing_loan_balance
	
	shop_balance=0
	shops =CooperativeShopLedger.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.member_id)).order_by('-id').first()
	if shops:
		shop_balance=abs(shops.balance)

	total_debit=float(total_savings)+float(total_loans)+float(shop_balance)


	# Computin Date Joined
	# ==============================
	date_joined = applicant.member.date_joined
	now = datetime.datetime.now()

	# Computing Salary Loan Relationship
	# =============================
	salary_loan_relationship = apex_loan.salary_loan_relationship

	if not float(salary_loan_relationship):
		messages.error(request,'Salary Loan Relationship not set')
		return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))



	# Computing Interest Rate
	# ==============================

	interest_rate = applicant.loan.interest_rate

	if not float(interest_rate):
		messages.error(request,'Interest Rate not set')
		return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))

	interest= float(int(interest_rate)/100) * float(loan_amount)

	# Computing Maturity Age

	loan_age = int(applicant.loan.loan_age)

	if not int(loan_age):
		messages.error(request,'Members Loan Age not set')
		return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))


	# Computing Member's Age
	members_age = (now.year - date_joined.year) * 12 + (now.month - date_joined.month)

	if members_age == 0:
		d_date=get_current_date(date_joined)
		p_date=get_current_date(now)
		member_age_pick=str(p_date-d_date) + " DAY(s)"
	else:
		members_age=members_age
		# member_age_pick=str(date_joined.day) + "MONTH(S)"
		member_age_pick=str(members_age) + " MONTH(S)"



	# Computing Interest Deduction
	# ==============================
	interest_deduction=applicant.loan.interest_deduction

	if not interest_deduction:
		messages.error(request,'Interest deduction source not set')
		return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))


	if interest_deduction == "SOURCE":
		amount_scheduled = float(loan_amount)

	else:
		amount_scheduled = float(loan_amount)+ float(interest)

	if int(duration) == 0:
		messages.error(request,'Please set the Loan Duration')
		return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))


	# Computing Admin Chages
	# ==============================
	admin_charges_minimum = applicant.loan.admin_charges_minimum

	if float(admin_charges_minimum) > float(loan_amount):
		admin_charge=applicant.loan.default_admin_charges
	else:
		if applicant.loan.admin_charges_rating == "PERCENTAGE":
			admin_charge=(float(applicant.loan.admin_charges) / 100) * float(loan_amount)
		else:
			admin_charge=applicant.loan.admin_charges


	# Computing Monthly Repayment
	# ==============================
	monthly_repayment=math.ceil(float(amount_scheduled)/float(duration))

	balance=float(net_pay)-(float(total_debit)+float(monthly_repayment))


	salary_loan_relationship_computed= math.ceil(float(int(salary_loan_relationship)/100) * float(net_pay))


	# Computing Button Enabler
	# ==============================
	salary_status=True
	if salary_status_waver:
		salary_status=False
	else:
		if float(monthly_repayment)> float(salary_loan_relationship_computed):
			salary_status=False
	
	
	if applicant.saving_status=="NO":
		savings_made_status=False
		if savings_made_waver:
			savings_made_status=True
	else:
		savings_made_status=True
	
	# return HttpResponse(savings_made_status)
	Member_Status = False
	if membership_waver:
		Member_Status = True
	else:
		if int(members_age)>int(loan_age):
			Member_Status = True

	record_array=[]

	if request.method=="POST":
		comment=request.POST.get("comment")

		applicant.comment=comment
		applicant.submission_status='SUBMITTED'
		applicant.short_listed='NO'
		applicant.admin_charge=admin_charge
		applicant.interest=interest
		applicant.save()

		description="NET PAY"
		value=net_pay
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="SALARY BALANCE AFTER DEDUCTIONS"
		value=balance
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description=loan_type
		value=loan_amount
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="MONTHLY DEDUCTIONS"
		value=total_savings
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="MONTHLY LOAN REPAYMENTS"
		value=total_loans
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="COOPERATIVE SHOP"
		value=shop_balance
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="LOAN DURATION"
		value=str(duration) + " MONTHS"
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="SALARY LOAN RELATIONSHIP"
		value=str(salary_loan_relationship) + "%"
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="SALARY LOAN RELATIONSHIP COMPUTED"
		value=salary_loan_relationship_computed
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="MATURITY AGE"
		value=str(loan_age) + " MONTHS"
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="DATE JOINED"
		value=date_joined
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="MEMBERS AGE"
		value=member_age_pick
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="LOAN INTEREST RATE"
		value=str(interest_rate) + "%"
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="INTEREST DEDUCTION"
		value=interest_deduction
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="LOAN INTEREST"
		value=interest
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="AMOUNT SCHEDULED"
		value=amount_scheduled
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="MONTHLY REPAYMENT"
		value= monthly_repayment
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="ADMIN CHARGE"
		value= admin_charge
		category='ANALYSIS'
		waver=False
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		if loan_based_saving:
			description="LOAN BASED SAVINGS"
			value=loan_based_saving.savings.name
			category='ANALYSIS'
			waver=False
			Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)


			description="AMOUNT SAVED"
			value='#' + str(savings_saved)
			category='ANALYSIS'
			waver=False
			Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)


			description="LOAN BASED SAVINGS RATE"
			value=str(loan_based_saving_rating) + "%"
			category='ANALYSIS'
			waver=False
			Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)


		description="MEMBERSHIP STATUS"
		value=Member_Status
		category='SUMMARY'
		waver=membership_waver
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		description="SALARY STATUS"
		value=salary_status
		category='SUMMARY'
		waver=salary_status_waver
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		
		description="SAVINGS MADE STATUS"
		value=savings_made_status 
		category='SUMMARY'
		waver=savings_made_waver
		Loan_Request_Posting(applicant,description,value,category,'UNTREATED',waver)

		return HttpResponseRedirect(reverse('loan_request_search'))

	if membership_waver:
		membership_button_enabled=True
	else:
		membership_button_enabled=False
		if Member_Status == True:
			membership_button_enabled=True

	if salary_status_waver:
		salary_status_button_enabled=True
	else:
		salary_status_button_enabled=False
		if salary_status == True:
			salary_status_button_enabled=True



	button_enabled=False


	# if membership_button_enabled and savings_made_button_enabled and salary_status_button_enabled:
	if membership_button_enabled and salary_status_button_enabled:
		button_enabled=True
	record_array.append(('Net Pay',net_pay))
	record_array.append(('Amount Saved',savings_saved))
	record_array.append(('Monthly Contributions',total_savings))
	record_array.append(('Existing Loan Monthly Repayment',total_loans))
	record_array.append(('Cooperative Shop',shop_balance))
	record_array.append(('Salary Balance After Deductions',math.ceil(balance)))
	record_array.append((loan_type,loan_amount))
	record_array.append(('Loan Duration',str(duration) + " Month(s)"))
	record_array.append(('Salary Loan Relationship',str(salary_loan_relationship) + "%"))
	record_array.append(('Salary Loan Relationship Computed',salary_loan_relationship_computed))
	record_array.append(('Maturity Age',str(loan_age) + " Month(s)"))
	record_array.append(('Date Joined',date_joined))
	record_array.append(('Members Age',member_age_pick))
	record_array.append(('Loan Interest Rate',str(interest_rate) + "%"))
	record_array.append(('Interest Deduction',interest_deduction))
	record_array.append(('Loan Interest',interest))
	record_array.append(('Amount Scheduled',amount_scheduled))
	record_array.append(('Monthly Repayment',monthly_repayment))
	record_array.append(('Admin Charge',admin_charge))
	if loan_based_saving:
		record_array.append(('Loan Based Savings',loan_based_saving.savings.name))
		record_array.append(('Amount Saved (' + loan_based_saving.savings.name + ")",savings_saved))
		record_array.append(('Loan Based Savings Rate',str(loan_based_saving_rating) + "%"))

	form.fields['comment'].initial="For Your Consideration and Kind Approval"

	context={
	'record_array':record_array,
	'form':form,
	'savings_anchored':applicant.loan.savings_rate,
	'membership_waver':membership_waver,
	'salary_status_waver':salary_status_waver,
	'applicant':applicant,
	'pk':pk,
	'salary_status':salary_status,
	'Member_Status':Member_Status,
	'savings_made_status':savings_made_status,
	'savings_made_waver':savings_made_waver,
	'button_enabled':button_enabled,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'savings_saved':savings_saved,
	}

	return render(request,'deskofficer_templates/loan_request_preview.html',context)




def loan_request_active_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records= LoanRequest.objects.filter(loan_path='PROJECT',transaction_status='UNTREATED')
	if not records:

		return HttpResponseRedirect(reverse('Project_Loan_Dashboard_Load'))
	context={
	'records':records,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_active_load.html',context)


def loan_request_active_update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = loan_request_active_update_form(request.POST or None)
	record= LoanRequest.objects.get(id=pk)
	
	if request.method == 'POST':
		net_pay=request.POST.get('net_pay')
		loan_amount=request.POST.get('loan_amount')
		applied_amount=request.POST.get('applied_amount')

		savings=request.POST.get('savings')

		interest_rate = record.loan.interest_rate
		admin_charge=(float(record.loan.admin_charges) / 100) * float(loan_amount)
		interest= float(int(interest_rate)/100) * float(loan_amount)

		record.interest=interest
		record.admin_charge=admin_charge
		record.net_pay=net_pay
		record.loan_amount=loan_amount
		record.applied_amount=applied_amount
		record.savings=savings
		record.save()
		return HttpResponseRedirect(reverse('loan_request_active_load'))

	
	if record.savings:
		form.fields['savings'].initial=record.savings
	else:
		
		loan_based_saving=[]
		if LoanBasedSavings.objects.all().exists():
			loan_based_saving = LoanBasedSavings.objects.first()
			account_number=str(loan_based_saving.savings.code) + str(record.member.coop_no)
		else:
			messages.error(request,'Loan Based Savings not Set')
			return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))

		savings_saved=0
	
		savings_saved=0
		if PersonalLedger.objects.filter(account_number=account_number).exists():
			savings_ledger=PersonalLedger.objects.filter(account_number=account_number).last()
			savings_saved=savings_ledger.balance
		else:
			messages.error(request,'No Savings Available for Loan Based Savings')
			return HttpResponseRedirect(reverse('loan_request_criteria_Loading', args=(pk,)))

		form.fields['savings'].initial=savings_saved
	form.fields['net_pay'].initial=record.net_pay
	form.fields['loan_amount'].initial=record.loan_amount
	form.fields['applied_amount'].initial=record.applied_amount
	
	context={
	'record':record,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_active_update.html',context)



def loan_request_delete_record(request,pk):
	LoanRequest.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('loan_request_active_load'))


def loan_request_archive_record(request,pk):
	LoanRequest.objects.filter(id=pk).update(transaction_status='ARCHIVED')
	return HttpResponseRedirect(reverse('loan_request_active_load'))


###########################################################################
########################## Loading History Loan request #####################
############################################################################


def loan_request_history_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_history_period_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)

		# LoanRequest.objects.filter(id=127).update(transaction_status='UNTREATED')
		exist_loans = LoanRequest.objects.filter(loan_path='PROJECT',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_history_period_load.html',context)




def loan_request_manage_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_order_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':


		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('loan_request_manage_records_load',args=(loan_id,)))
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_manage_period_load.html',context)


def loan_request_manage_records_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_order_form(request.POST or None)
	exist_loans=[]
	
	loan = TransactionTypes.objects.get(id=pk)

	exist_loans = LoanRequest.objects.filter(loan=loan,submission_status='SUBMITTED',transaction_status='UNTREATED',loan_path='PROJECT')

	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_manage_records_load.html',context)


def loan_request_manage_transaction_delete(request,pk):
	record=LoanRequest.objects.get(id=pk)
	return_pk=record.loan.pk
	record.delete()
	return HttpResponseRedirect(reverse('loan_request_manage_records_load',args=(return_pk,)))



def loan_request_shortlisting_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)
	
	if request.method == 'POST':

		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('loan_request_shortlisting_application_Load',args=(loan_id,)))


	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_shortlisting_load.html',context)


def loan_request_shortlisting_application_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)
	exist_loans=[]

	loan = TransactionTypes.objects.get(id=pk)
	exist_loans = LoanRequest.objects.filter(loan=loan,submission_status='SUBMITTED',transaction_status='UNTREATED',loan_path='PROJECT')

	context={
	'exist_loans':exist_loans,
	'pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_shortlisting_application_Load.html',context)


def loan_request_shortlisting_process(request,pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_shortlisting_process_form(request.POST or None)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	record = LoanRequest.objects.get(id=pk)
	loan_type = record.loan

	if request.method == 'POST':

		date_shortlisted_id = request.POST.get('date_shortlisted')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_shortlisted_id, date_format)
		date_shortlisted=get_current_date(dtObj)

		LoanRequestShortListing(tdate=tdate,applicant=record,processed_by=processed_by,status="UNTREATED",approval_status='PENDING').save()
		LoanRequest.objects.filter(id=pk).update(transaction_status='TREATED')
		return	HttpResponseRedirect(reverse('loan_request_shortlisting_application_Load',args=(loan_type.pk,)))



	form.fields['date_applied'].initial=get_print_date(record.date_applied)
	form.fields['amount'].initial	=record.loan_amount
	form.fields['savings'].initial	=record.savings
	form.fields['net_pay'].initial	=record.net_pay
	form.fields['date_shortlisted'].initial=get_current_date(now)
	context={
	'record':record,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_shortlisting_process.html',context)


def loan_request_shortlisting_view_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)
	records=[]
	if request.method == 'POST':

		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('loan_request_shortlisting_records_load',args=(loan_id,)))
	context={
	'records':records,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_shortlisting_view_load.html',context)



def loan_request_shortlisting_records_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	loan = TransactionTypes.objects.get(id=pk)

	records = LoanRequestShortListing.objects.filter(applicant__loan=loan,status='UNTREATED',approval_status='PENDING')

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_shortlisting_records_load.html',context)



def loan_request_shortlisting_drop(request,pk):
	record = LoanRequestShortListing.objects.get(id=pk)
	return_pk=record.applicant.loan.pk
	LoanRequest.objects.filter(id=record.applicant_id).update(transaction_status='UNTREATED')
	record.delete()
	return HttpResponseRedirect(reverse('loan_request_shortlisting_records_load',args=(return_pk,)))


def loan_request_order_Shortlisting_history(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records = LoanRequestShortListing.objects.filter(approval_status='APPROVED',applicant__loan_path='PROJECT').order_by('applicant__member__admin__last_name')

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_order_Shortlisting_history.html',context)



def loan_request_order_Shortlisting_history_Drop(request,pk):
	record = LoanRequestShortListing.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('loan_request_order_Shortlisting_history'))
	

def loan_request_order_KIV(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = LoanRequestShortListing.objects.filter(approval_status='KIV',applicant__loan_path='PROJECT')


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_order_KIV.html',context)


def loan_request_order_KIV_activate(request,pk):
	record = LoanRequestShortListing.objects.filter(id=pk).update(approval_status='PENDING')
	return HttpResponseRedirect(reverse('loan_request_order_KIV'))


def loan_request_order_discard(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = LoanRequest.objects.filter(submission_status='PENDING',loan_path='PROJECT')


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_order_discard.html',context)


def loan_request_order_discard_delete(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	LoanRequest.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('loan_request_order_discard'))


def loan_request_approved_Issue_form_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicants=[]
	form=loan_request_order_form(request.POST or None)

	if request.method == 'POST':

		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('loan_request_approved_Issue_form_transactions_load',args=(loan_id,)))

		
	context={
	'form':form,
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_approved_Issue_form_period_load.html',context)



def loan_request_approved_Issue_form_transactions_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicants=[]


	loan = TransactionTypes.objects.get(id=pk)

	applicants = LoanRequestShortListing.objects.filter(applicant__loan=loan,approval_status='APPROVED',status='UNTREATED')
	context={

	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_approved_Issue_form_transactions_load.html',context)



def loan_request_approved_list_form_sales(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = loan_request_approved_list_form_sales_form(request.POST or None)
	processed_by=CustomUser.objects.get(id=request.user.id)
#
	loan=LoanRequestShortListing.objects.get(id=pk)
	transaction_type=loan.applicant.loan.id
	loan_amount=loan.approved_amount
	admin_charge=loan.applicant.admin_charge
	receipt_type = loan.applicant.loan.receipt_type

	date_applied=loan.applicant.date_applied
	date_approved=loan.approval_date

	amount_saved=loan.applicant.savings
	
	

	# if LoanRequestSettings.objects.filter(description='AMOUNT SAVED',applicant=loan.applicant).exists():
	# 	amount_saved = LoanRequestSettings.objects.get(description='AMOUNT SAVED',applicant=loan.applicant)
	# 	amount_saved = str(amount_saved.value)[1:-3]

	member=loan.applicant.member

	tdate=get_current_date(now)
	form.fields['amount'].initial=admin_charge
	form.fields['loan_amount'].initial=loan_amount

	if request.method == "POST":

		if receipt_type == "MANUAL":
			receipt_no_id = request.POST.get('receipt')
			if Receipts.objects.filter(receipt=receipt_no_id).exists():
				receipt_obj = Receipts.objects.get(receipt=receipt_no_id)
				receipt=receipt_obj.receipt
			else:
				messages.error(request,'Receipt do not exist')
				return HttpResponseRedirect(reverse('loan_request_approved_list_form_sales',args=(pk,)))

		elif receipt_type == "AUTO":
			receipt_obj=AutoReceipt.objects.first()
			receipt= str(receipt_obj.receipt).zfill(5)
			receipt_obj.receipt=int(receipt_obj.receipt)+1
			receipt_obj.save()
		else:
			messages.error(request,'Receipt Format No Set')
			return HttpResponseRedirect(reverse('loan_request_approved_list_form_sales',args=(pk,)))

		record = LoanFormIssuance(processing_status='UNPROCESSED',
								tdate=tdate,
								loan=loan.applicant.loan,
								member=member,
								date_applied=date_applied,
								date_approved=date_approved,
								loan_amount=loan_amount,
								amount_saved=amount_saved,
								receipt=receipt,
								processed_by=processed_by.username,
								status='UNTREATED',
								loan_path="PROJECT")
		record.save()

		loan.status='TREATED'
		loan.save()

		loan.applicant.receipt=receipt
		loan.applicant.save()

		if receipt_type == "MANUAL":
			receipt_obj.status='USED'
			receipt_obj.save()

		return HttpResponseRedirect(reverse('loan_application_request_form_issuanace_confirmation',args=(receipt,)))
	context={
	'transaction_type':transaction_type,
	'form':form,
	'loan':loan,
	'receipt_type':receipt_type,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_request_approved_list_form_sales.html',context)



def loan_application_request_form_issuanace_confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)

	applicant = LoanFormIssuance.objects.get(receipt=pk)
	transaction_type=applicant.loan.id
	if request.method == 'POST':
		pass

	context={
	'form':form,
	'transaction_type':transaction_type,
	# 'batch':batch,
	# 'transaction':loan,
	'applicant':applicant,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_request_form_issuanace_confirmation.html',context)


def loan_application_request_form_issuanace_reprint_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Reprint"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/loan_application_request_form_issuanace_reprint_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,})


def loan_application_request_form_issuanace_reprint_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request Form Reprint"
	form = searchForm(request.POST)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('loan_application_request_form_issuanace_reprint_search'))

		members=LoanFormIssuance.objects.filter(Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value()) | Q(member__coop_no__icontains=form['title'].value()))
	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/loan_application_request_form_issuanace_reprint_list_load.html',context)


def loan_application_request_form_issuanace_History_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=PersonalLedger_Transaction_Account_Load_form(request.POST or None)

		
	if request.method == 'POST':

		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')





		# applicants=LoanFormIssuance.objects.filter(loan_path='PROJECT',tdate__range=[tdate1,tdate2])
		return HttpResponseRedirect(reverse('loan_application_request_form_issuanace_History_load',args=(start_date,stop_date,)))
		# return render(request,'deskofficer_templates/loan_application_request_form_issuanace_History_load.html',context)
	date2 = now+ relativedelta(days=1)
	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(date2)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_request_form_issuanace_History_Period_Load.html',context)


def loan_application_request_form_issuanace_History_load(request,date1,date2):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
		
	date_format = '%Y-%m-%d'
	tdate1 = datetime.datetime.strptime(date1, date_format)
	tdate2 = datetime.datetime.strptime(date2, date_format)

	tdate2 = tdate2+ relativedelta(days=1)

	applicants=LoanFormIssuance.objects.filter(loan_path='PROJECT',tdate__range=[tdate1,tdate2])
		
	context={
	'start_date':date1,
	'stop_date':date2,
	'ddate1':get_print_date(tdate1),
	'ddate2':get_print_date(tdate2),
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_request_form_issuanace_History_load.html',context)


def loan_application_request_form_issuanace_History_Print_Status(request,pk,date1,date2):
	applicant=LoanFormIssuance.objects.filter(id=pk).update(print_status='YES')
	return HttpResponseRedirect(reverse('loan_application_request_form_issuanace_History_load',args=(date1,date2,)))
		


def Members_Loan_Request_History_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=PersonalLedger_Transaction_Account_Load_form(request.POST or None)

	applicants=[]
	member=Members.objects.get(coop_no=pk)

	start_date=get_current_date(now)
	stop_date=get_current_date(now)
	if request.method == 'POST':

		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')



		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)
		tdate2 = datetime.datetime.strptime(stop_date, date_format)

		tdate2 = tdate2+ relativedelta(days=1)

		applicants=LoanFormIssuance.objects.filter(loan_path='PROJECT',tdate__range=[tdate1,tdate2],member=member)
		# applicants=LoanFormIssuance.objects.filter(loan_path='PROJECT').order_by('member__admin__last_name')

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)

	context={
	'start_date':start_date,
	'stop_date':stop_date,	
	
	'form':form,
	'member':member,
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Loan_Request_History_load.html',context)


def Members_Loan_Request_History_load_Print_Status(request,pk):
	LoanFormIssuance.objects.filter(id=pk).update(print_status='YES')
	return HttpResponseRedirect(reverse('loan_application_request_form_issuanace_reprint_search'))
		

def Members_Loan_Request_History_load_drop(request,pk):
	
	applicant=LoanFormIssuance.objects.get(id=pk)
	return_pk=applicant.member.coop_no
	applicant.delete()
	return HttpResponseRedirect(reverse('Members_Loan_Request_History_load',args=(return_pk,)))

def loan_application_approved_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicants=[]
	form=loan_request_order_form(request.POST or None)

	transaction=[]
	loan=[]

	if request.method == 'POST':

		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('loan_application_approved_transaction_period_load', args=(loan_id,)))
	context={
	'form':form,

	'transaction':loan,
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_approved_period_load.html',context)



def loan_application_approved_transaction_period_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicants=[]


	transaction=[]
	loan=[]

	loan = TransactionTypes.objects.get(id=pk)
	applicants = LoanFormIssuance.objects.filter(loan=loan,status='UNTREATED',loan_path='PROJECT',print_status='YES')
	context={
	'transaction':loan,
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_approved_transaction_period_load.html',context)



def loan_application_form_processing(request,pk):
	form=loan_application_processing_form(request.POST or None)

	net_form=loan_request_document_attachment_form(request.POST or None)

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	tdate = get_current_date(now)

	applicant=LoanFormIssuance.objects.get(id=pk)

	record_exist=[]
	if LoanRequestShortListing.objects.filter(applicant__receipt=applicant.receipt).exists():
		record_exist = LoanRequestShortListing.objects.get(applicant__receipt=applicant.receipt)

	total_guarantors=applicant.loan.guarantors

	bank_accounts=MembersBankAccounts.objects.filter(member_id=applicant.member)

	processed_by = CustomUser.objects.get(id=request.user.id)

	loan_settings=LoanRequestSettings.objects.filter(applicant__receipt=applicant.receipt)

	seleected_guarantors=[]
	new_loan=[]
	new_amount=0
	loan_pk=0


	loan_based_saving=[]
	if LoanBasedSavings.objects.all().exists():
		loan_based_saving=LoanBasedSavings.objects.all().first()
		loan_based_code=loan_based_saving.savings.code


	if LoanApplication.objects.filter(applicant=applicant).exists():
		new_loan=LoanApplication.objects.get(applicant=applicant)

		new_amount=new_loan.loan_amount
		loan_pk=new_loan.pk

		seleected_guarantors=LoanApplicationGuarnators.objects.filter(applicant=new_loan)


	if  request.method =='POST' and 'application' in request.POST:
		exist_amount=record_exist.approved_amount
		new_amount=request.POST.get('loan_new_amount')

		if float(new_amount)<=0:
			messages.error(request,'Invalid Loan Amount Specification')
			return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))

		if float(exist_amount) < float(new_amount):
			messages.error(request,'You cannot apply for Amount beyond the already approved amount of ' + str(exist_amount))
			return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))


		selected_trannsaction_rate=0
		saved_amount=0
		if applicant.loan.savings_rate == "YES":

			selected_trannsaction_rate=applicant.loan.saving_rating


			if selected_trannsaction_rate > 0:
				# percentage_amount=(float(selected_trannsaction_rate)/100)*float(new_amount)

				loan_based_account_number=str(loan_based_code) + str(applicant.member.coop_no)

				saved_amount=0
				if PersonalLedger.objects.filter(account_number=loan_based_account_number).exists():
					ledger_balance=PersonalLedger.objects.filter(account_number=loan_based_account_number).last()
					saved_amount=ledger_balance.balance

				if not saved_amount:
					messages.error(request,'You do not have any savings for this Amount')
					return HttpResponseRedirect(reverse('loan_application_form_processing',args=(pk,)))

				# if float(percentage_amount) > float(saved_amount):
				# 	messages.error(request,'You do not have required savings for this Amount')
				# 	return HttpResponseRedirect(reverse('loan_application_form_processing',args=(pk,)))


		date_applied_id = request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_applied_id, date_format)
		date_applied=get_current_date(dtObj)



		desired_duration=request.POST.get("duration")

		if desired_duration and int(desired_duration)>0:
			if int(desired_duration) > int(applicant.loan.duration):
				messages.error(request,'The Desired Duration cannot be greater than the Default')
				return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))
			else:
				duration=desired_duration
		else:
			duration=int(applicant.loan.duration)


		if LoanApplication.objects.filter(applicant=applicant).exists():
			record=LoanApplication.objects.get(applicant=applicant)
			record.loan_amount=new_amount
			record.save()
			return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))



		record=LoanApplication(transaction_status='UNTREATED',
								duration=duration,
								date_applied=date_applied,
								tdate=tdate,applicant=applicant,
								loan_amount=new_amount,processed_by=processed_by.username)
		record.save()
		return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))



	if request.method=='POST' and 'btn_account' in request.POST:
		account_id=request.POST.get('account')
		account=MembersBankAccounts.objects.get(id=account_id)

		record=LoanApplication.objects.get(applicant=applicant)
		record.bank_account=account
		record.save()
		messages.success(request,'Bank Account Details Added Successfully')
		return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))


	if request.method=='POST' and 'btn_net_pay' in request.POST:
		payment_as_at=request.POST.get('payment_as_at')
		net_pay=request.POST.get('net_pay')

		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)

		else:
			image_url=None

		if not payment_as_at:
			messages.error(request,'Description is Missing')
			return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))


		if not net_pay or float(net_pay) <=0:
			messages.error(request,'Net Pay Missing')
			return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))

		record=LoanApplication.objects.get(applicant=applicant)
		record.payment_as_at=payment_as_at
		record.net_pay=net_pay
		record.image=image_url
		record.save()



		record.applicant.member.last_used_net_pay=net_pay
		record.applicant.member.net_pay_as_at=payment_as_at
		record.applicant.member.save()

		messages.success(request,'Net Pay Added Successfully')
		return HttpResponseRedirect(reverse('loan_application_form_processing', args=(pk,)))

	if request.method == 'POST' and 'btn-preview' in request.POST:
		record=LoanApplication.objects.get(applicant=applicant)

		ignore=request.POST.get('ignore')
		if ignore:
			record.ignore_restriction="YES"
		else:
			record.ignore_restriction="NO"
		record.save()

		return HttpResponseRedirect(reverse('loan_application_preview',args=(loan_pk,pk,'PROJECT',)))


	form.fields['loan_type'].initial=applicant.loan.name
	form.fields['loan_amount'].initial=applicant.loan_amount
	form.fields['duration'].initial=applicant.loan.duration
	form.fields['date_applied'].initial=get_current_date(now)

	form.fields['loan_new_amount'].initial=record_exist.approved_amount
	net_form.fields['net_pay'].initial=applicant.member.last_used_net_pay
	net_form.fields['payment_as_at'].initial=applicant.member.net_pay_as_at
	image_link=[]
	new_loan_pk=0
	if new_loan:
		image_link=new_loan.image
		new_loan_pk=new_loan.pk

	if LoanApplication.objects.filter(applicant=applicant).exists():
		form.fields['loan_new_amount'].initial=new_amount

	context={
	'form':form,
	'image_link':image_link,
	'net_form':net_form,
	'applicant':applicant,
	'loan_settings':loan_settings,
	'loan_pk':loan_pk,
	'new_amount':new_amount,
	'new_loan':new_loan,
	'new_loan_pk':new_loan_pk,
	'bank_accounts':bank_accounts,
	'seleected_guarantors':seleected_guarantors,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'return_pk':pk,
	}
	return render(request,'deskofficer_templates/loan_application_form_processing.html',context)

def loan_application_form_processing_guarantor_search(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Gaurantors"
	form = searchForm(request.POST or None)
	record=LoanApplication.objects.get(id=pk)
	return_pk=record.applicant_id
	return render(request,'deskofficer_templates/loan_application_form_processing_guarantor_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,'pk':pk,'return_pk':return_pk,})

def loan_application_form_processing_guarantor_add_list_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	form = searchForm(request.POST)
	record=LoanApplication.objects.get(id=pk)
	member=Members.objects.get(id=record.applicant.member_id)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('loan_application_form_processing_guarantor_search',args=(pk,)))

		members=searchGuarantorMembers(form['title'].value(),'ACTIVE',member)

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'pk':pk,
	}
	return render(request,'deskofficer_templates/loan_application_form_processing_guarantor_add_list_load.html',context)


def loan_application_form_processing_guarantor_add(request,pk,loan_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	guarantor=Members.objects.get(id=pk)
	applicant=LoanApplication.objects.get(id=loan_pk)
	total_guarantors=applicant.applicant.loan.guarantors

	if LoanApplicationGuarnators.objects.filter(applicant=applicant).count() >= total_guarantors:
		messages.info(request,'You Have added the required Guarantors')
		return HttpResponseRedirect(reverse('loan_application_form_processing_guarantor_search',args=(loan_pk,)))

	if LoanApplicationGuarnators.objects.filter(applicant=applicant,guarantor=guarantor).exists():
		messages.info(request,'This Member is already Added as guarantor to this Applicant')
		return HttpResponseRedirect(reverse('loan_application_form_processing_guarantor_search',args=(loan_pk,)))

	LoanApplicationGuarnators(applicant=applicant,guarantor=guarantor,status='UNTREATED').save()
	return HttpResponseRedirect(reverse('loan_application_form_processing_guarantor_search',args=(loan_pk,)))

def loan_application_form_processing_guarantor_delete(request,pk,return_pk):
	LoanApplicationGuarnators.objects.get(id=pk).delete()
	return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


def loan_application_form_processing_bank_account_delete(request,pk,return_pk):
	LoanApplication.objects.filter(id=pk).update(bank_account=None)
	return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))



def loan_application_preview(request,pk, return_pk,loan_path):
	form=MemberShipRequestAdditionalInfo_form(request.POST or None)

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	applicant=LoanApplication.objects.get(id=pk)
	ignore=applicant.ignore_restriction
	
	nok_list=[]
	if MembersNextOfKins.objects.filter(member=applicant.applicant.member).exists():
		nok_record = MembersNextOfKins.objects.filter(member=applicant.applicant.member).first()
		nok_list.append(nok_record.name)
		nok_list.append(nok_record.relationships.title)
		nok_list.append(nok_record.address)
		nok_list.append(nok_record.phone_number)

		applicant.nok_name=nok_record.name
		applicant.nok_Relationship=nok_record.relationships.title
		applicant.nok_address=nok_record.address
		applicant.nok_phone_no=nok_record.phone_number
		applicant.save()
	else:
		messages.error(request,'There is no registered Next of Kin for this Member')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))

	net_pay=applicant.net_pay

	if not net_pay or float(net_pay)<=0:
		messages.error(request,'Please add Net Pay')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


	status = 'UNTREATED'

	apex_loan=TransactionSources.objects.get(title='LOAN')
	maximum_loan = apex_loan.maximum_amount

	loan_type=applicant.applicant.loan.name
	loan_amount=applicant.loan_amount
	duration = applicant.duration


	admin_charges_minimum = applicant.applicant.loan.admin_charges_minimum

	if float(admin_charges_minimum) >= float(loan_amount):
		admin_charge=applicant.applicant.loan.default_admin_charges
	else:
		if applicant.applicant.loan.admin_charges_rating == "PERCENTAGE":
			admin_charge=(float(applicant.applicant.loan.admin_charges) / 100) * float(loan_amount)
		else:
			admin_charge=applicant.applicant.loan.admin_charges

	membership_waver=False
	savings_made_waver=False
	multiple_loans_waver=False
	salary_status_waver=False
	standing_order_status =False

	if MembersExclusiveness.objects.filter(transaction=applicant.applicant.loan,processing_status='UNPROCESSED',approval_status='APPROVED').exists():
		wavers=MembersExclusiveness.objects.filter(transaction=applicant.applicant.loan,processing_status='UNPROCESSED',approval_status='APPROVED')

		for item in wavers:
			if item.task.title == 'MEMBERSHIP AGE':
				membership_waver=True
			elif item.task.title == 'SAVINGS MADE':
				savings_made_waver=True
			elif item.task.title == 'SALARY STATUS':
				salary_status_waver=True


	bank_account=LoanApplication.objects.exclude(Q(bank_account__isnull=True)).filter(id=pk)
	if bank_account:
		bank_account_status=True
	else:
		bank_account_status=False
		messages.error(request,'Bank Details missing')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))

	guarantor_list=[]
	try:
		guarantors=LoanApplicationGuarnators.objects.filter(applicant=applicant)
		for guarantor in guarantors:
			small_guarantor=(guarantor.id,guarantor.guarantor.admin.first_name + " " + guarantor.guarantor.admin.last_name + " " + guarantor.guarantor.middle_name)
			guarantor_list.append(small_guarantor[1])
	except:
		guarantor_list=[]
	# for i in range(len(guarantor_list)):
	# 	print(guarantor_list[i])

	total_guarantors=applicant.applicant.loan.guarantors

	if int(guarantors.count())==int(total_guarantors):
		guarnator_status=True
	else:
		guarnator_status=False
		messages.error(request,'Guarantors missing')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))

	loan_savings_status=False
	loan_based_saving=[]
	savings_saved=0
	loan_saving_relationship=[]

	if applicant.applicant.loan.savings_rate == 'YES':
		if LoanBasedSavings.objects.all().exists():
			loan_based_saving = LoanBasedSavings.objects.first()
		else:
			messages.error(request,'Loan Based Savings not Set')
			return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))

		# loans_anchored=TransactionTypes.objects.filter(savings_rate='YES')

		loans_anchored_sum=LoansRepaymentBase.objects.filter(transaction__savings_rate='YES').filter(Q(balance__lt=0) & Q(member_id=applicant.applicant.member_id)).aggregate(total_amount=Sum('balance'))
		total_loans_anchored=loans_anchored_sum['total_amount']
		
		if not total_loans_anchored:
			total_loans_anchored=0

		expected_total_loans=abs(float(total_loans_anchored)) + float(loan_amount)


		savings_saved=0

		if MembersAccountsDomain.objects.filter(transaction=loan_based_saving.savings,member=applicant.applicant.member).exists():
			account_id=MembersAccountsDomain.objects.get(transaction=loan_based_saving.savings,member=applicant.applicant.member)

			if PersonalLedger.objects.filter(account_number=account_id.account_number).exists():
				savings_ledger=PersonalLedger.objects.filter(account_number=account_id.account_number).last()
				savings_saved=savings_ledger.balance
			else:
				messages.error(request,'No Savings Available for Loan Based Savings')
				return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))
		else:
			messages.error(request,'No account for Loan Based Savings')
			return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))

		loan_based_saving_rating=apex_loan.loan_based_saving

	

		if not float(loan_based_saving_rating):
			messages.error(request,'Loan Based Saving Rating not set')
			return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


		loan_saving_relationship=float(int(loan_based_saving_rating)/100) * float(expected_total_loans)
		if savings_made_waver:
			loan_savings_status=True
		else:

			if float(savings_saved) >= float(loan_saving_relationship):
				loan_savings_status=True

		if not ignore:
			if not loan_savings_status:
				loan_saving_relationship=math.ceil(loan_saving_relationship)
				messages.error(request,f'You do not Have Expected Savings for this Loan Amount, You have   {savings_saved}   while you need  {loan_saving_relationship}' )
				return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


	total_savings=0
	savings_sum=get_standing_orders_sum(applicant.applicant.member_id)
	if savings_sum==None:
		total_savings=0
		standing_order_status=False
	else:
		total_savings=savings_sum
		standing_order_status=True

	total_loans=0
	balance_total=0
	loans_sum=LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.applicant.member_id)).aggregate(total_amount=Sum('repayment'),total_balance=Sum('balance'))
	total_loans=loans_sum['total_amount']
	balance_total= loans_sum['total_balance']
	
	if total_loans==None:
		total_loans=0
	else:
		total_loans=abs(float(total_loans))
	
	if balance_total == None:
		balance_total=0
	else:
		balance_total=abs(float(balance_total))

	
	shop_balance=0
	shops =CooperativeShopLedger.objects.filter(Q(balance__lt=0) & Q(member_id=applicant.applicant.member_id)).order_by('-id').first()
	if shops:
		shop_balance=abs(shops.balance)


	total_debit=float(total_savings)+float(total_loans) #+float(shop_balance)


	balance=float(net_pay)-total_debit 
	if not balance or float(balance)<=0:
		balance=0
	
	date_joined = applicant.applicant.member.date_joined
	now = datetime.datetime.now()

	salary_loan_relationship = apex_loan.salary_loan_relationship
	if not float(salary_loan_relationship):
		messages.error(request,'Salary Loan Relationship not set')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


	salary_loan_relationship_computed= math.ceil(float(int(salary_loan_relationship)/100) * float(balance))

	interest_rate = applicant.applicant.loan.interest_rate

	if not float(interest_rate):
		messages.error(request,'Interest Rate not set')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


	interest= float(int(interest_rate)/100) * float(loan_amount)

	loan_age = applicant.applicant.loan.loan_age
	if not float(loan_age):
		messages.error(request,'Members Loan Age not set')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))


	members_age = (now.year - date_joined.year) * 12 + (now.month - date_joined.month)
	interest_deduction=applicant.applicant.loan.interest_deduction
	if not interest_deduction:
		messages.error(request,'Interest deduction source not set')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))



	if interest_deduction == "SOURCE":
		amount_scheduled = float(loan_amount)
	else:
		amount_scheduled = float(loan_amount)+ float(interest)

	if int(duration) == 0:
		messages.error(request,'Please set the Loan Duration')
		return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))

	monthly_repayment=math.ceil(float(amount_scheduled)/float(duration))

	salary_status=True
	if salary_status_waver:
		salary_status=False
	else:
		if float(monthly_repayment)> float(salary_loan_relationship_computed):
			if not ignore:
				messages.error(request,'Please Your Salary cannot sustain this Loan')
				return HttpResponseRedirect(reverse('loan_application_form_processing',args=(return_pk,)))
			salary_status=False


	Member_Status = False
	if membership_waver:
		Member_Status = True
	else:
		if int(members_age)>int(loan_age):
			Member_Status = True



	record_array=[]
	cash_recieved=float(amount_scheduled) - (float(admin_charge) + float(interest))

	if request.method=="POST":

		date_applied_id = request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_applied_id, date_format)
		date_applied=get_current_date(dtObj)

		comment=request.POST.get("comment")
		applicant.comment=comment
		applicant.submission_status='SUBMITTED'
		applicant.admin_charge=admin_charge
		applicant.date_applied=date_applied
		applicant.save()

		description="NET PAY"
		value=net_pay
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="SALARY BALANCE AFTER DEDUCTIONS"
		value=balance
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description=loan_type
		value=loan_amount
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MONTHLY DEDUCTIONS"
		value=total_savings
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="OUTSTANDING MONTHLY LOAN REPAYMENTS"
		value='{0:.2f}'.format(total_loans)
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="COOPERATIVE SHOP"
		value=shop_balance
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="LOAN DURATION"
		value=str(duration) + " MONTHS"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="SALARY LOAN RELATIONSHIP"
		value=str(salary_loan_relationship) + "%"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="SALARY LOAN RELATIONSHIP COMPUTED"
		value=salary_loan_relationship_computed
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MATURITY AGE"
		value=str(loan_age) + " MONTHS"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="DATE JOINED"
		value=date_joined
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MEMBER AGE"
		value=str(members_age) + "MONTH(S)"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="LOAN INTEREST RATE"
		value=str(interest_rate) + "%"
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="INTEREST DEDUCTION"
		value=interest_deduction
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="LOAN INTEREST"
		value=interest
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="AMOUNT SCHEDULED"
		value=amount_scheduled
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)
		

		description="AMOUNT RECIEVED"
		value=cash_recieved
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="MONTHLY REPAYMENT"
		value=round(float(monthly_repayment),2)
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		if savings_saved:
			description="LOAN BASED SAVINGS"
			value=loan_based_saving.savings.name
			category='ANALYSIS'
			waver=0
			tag=0
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

			description="SAVED AMOUNT"
			value=savings_saved
			category='ANALYSIS'
			waver=0
			tag=0
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

			description="LOAN BASED SAVINGS RATE"
			value=str(loan_based_saving_rating) + "%"
			category='ANALYSIS'
			waver=0
			tag=0
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="GUARANTORS"
		value=guarantor_list
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="NEXT OF KIN"
		value=nok_list
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)



		description="BANK DETAILS"
		value=applicant.bank_account.account_name + " - " + applicant.bank_account.account_number + ' - ' + applicant.bank_account.bank.title
		category='ANALYSIS'
		waver=0
		tag=0
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="ADMIN CHARGES"
		value=admin_charge
		waver=0
		tag=0
		category='ANALYSIS'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="MEMBER STATUS"
		value=Member_Status
		waver=membership_waver
		tag=0
		if value:
			tag=1
		category='ANALYSIS'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="SALARY STATUS"
		value=salary_status
		waver=salary_status_waver
		tag=0
		if value:
			tag=1
		category='SUMMARY'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		if savings_saved:
			description="LOAN SAVINGS BASED STATUS"
			value=loan_savings_status
			waver=savings_made_waver
			tag=0
			if value:
				tag=1
			category='SUMMARY'
			Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)


		description="Bank Account Status"
		value=bank_account_status
		waver=0
		tag=0
		if value:
			tag=1
		category='SUMMARY'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)

		description="Guarantors Status"
		value=guarnator_status
		waver=0
		tag=0
		if value:
			tag=1
		category='SUMMARY'
		Loan_Application_Posting(applicant,description,value,category,'UNTREATED',tag,waver)



		applicant1=LoanFormIssuance.objects.get(id=applicant.applicant_id)
		applicant1.processing_status='PROCESSED'
		applicant1.status='TREATED'
		applicant1.save()

		if loan_path == "PROJECT":
			return HttpResponseRedirect(reverse('loan_application_approved_transaction_period_load', args=(applicant.applicant.loan.pk,)))
		else:
			return HttpResponseRedirect(reverse('Project_Loan_Dashboard_Load'))

	compulsory_saving_status = False
	if CompulsorySavings.objects.all().exists():
		compulsory_saving = CompulsorySavings.objects.first()

		if StandingOrderAccounts.objects.filter(transaction__member=applicant.applicant.member,transaction__transaction=compulsory_saving.transaction).exists():
			compulsory_saving_status = True

	maximum_loan_status = False
	compound_loan =float(abs(balance_total)) + float(applicant.loan_amount)

	if float(compound_loan)<= float(maximum_loan):
		maximum_loan_status =True


	# print(maximum_loan_status)

	if not ignore:
		if maximum_loan_status and guarnator_status and bank_account_status and compulsory_saving_status and standing_order_status:
		# if guarnator_status and bank_account_status and compulsory_saving_status and standing_order_status:

			if membership_waver:
				button_enabled=True
			else:
				button_enabled=False
				if Member_Status == True:
					button_enabled=True
			# print(f'1. {button_enabled}')

			if savings_made_waver:
				button_enabled=True
			else:
				button_enabled=False
				if loan_savings_status == True:
					button_enabled=True
			# print(f'2. {button_enabled}')

			if salary_status_waver:
				button_enabled=True
			else:
				button_enabled=False
				if salary_status == True:
					button_enabled=True

			# print(f'3. {button_enabled}')
		else:
			button_enabled=False
	else:
		button_enabled=True


	record_array.append(("Net Pay",net_pay))
	record_array.append(("Salary Balance After Deductions",balance))
	record_array.append((loan_type,loan_amount))
	record_array.append(('Monthly Contributions',total_savings))
	record_array.append(('Loan Monthly Repayment',total_loans))
	record_array.append(('Cooperative Shop',shop_balance))
	record_array.append(('Loan Duration',str(duration) + " Months"))
	record_array.append(('Salary Loan Relationshipp',salary_loan_relationship))
	record_array.append(('Salary Loan Relationship Computed',salary_loan_relationship_computed))
	record_array.append(('Maturity Age',str(loan_age)[:-3] + " Months"))
	record_array.append(('Date Joined',date_joined))
	record_array.append(('Members Age',str(members_age) + " Months"))
	record_array.append(('Loan Interest Rate',str(interest_rate) + "%"))
	record_array.append(('Interest Deduction',interest_deduction))
	record_array.append(('Loan Interest','=N=' +str(interest)))
	record_array.append(('Amount Scheduled',f'=N={amount_scheduled}'))
	record_array.append(('Monthly Repayment',f"=N={monthly_repayment}"))
	record_array.append(('Admin Charges',f"=N={admin_charge}"))
	record_array.append(('Amount Recieved',f"=N={cash_recieved}"))

	if savings_saved:
		record_array.append(('Loan Based Savings',loan_based_saving.savings.name))
		record_array.append(('Saved Amount (' + str(loan_based_saving.savings.name) +")",savings_saved))
		record_array.append(('Loan Based Savings Rate',str(loan_based_saving_rating) + "%"))

	record_array.append(('Guarantors',guarantor_list))

	record_array.append(('Bank Details',applicant.bank_account.account_name + " - " + str(applicant.bank_account.account_number) + ' - ' +  applicant.bank_account.bank.title))
	record_array.append(('Next of Kin',f'{nok_list[0]}, {nok_list[1]}, {nok_list[2]}'))

	form.fields['comment'].initial="FOR YOUR CONSIDERATION"
	form.fields['date_applied'].initial=get_current_date(now)
	context={
	'loan_path':loan_path,
	'form':form,
	'savings_anchored':applicant.applicant.loan.savings_rate,
	'record_array':record_array,
	'membership_waver':membership_waver,
	'applicant':applicant,
	'pk':pk,
	'salary_status':salary_status,
	'Member_Status':Member_Status,
	'loan_savings_status':loan_savings_status,
	'button_enabled':button_enabled,
	'guarnator_status':guarnator_status,
	'bank_account_status':bank_account_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/loan_application_preview.html',context)


def Loan_application_active_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = LoanApplication.objects.filter(transaction_status='UNTREATED',applicant__loan_path='PROJECT')

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_application_active_list_load.html',context)


def Loan_application_history_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_history_period_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)


		exist_loans = LoanApplication.objects.filter(applicant__loan_path='PROJECT',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_application_history_period_load.html',context)




def loan_application_shortlisting_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	# LoanFormIssuance.objects.all().update(status='UNTREATED')
	# LoanApplication.objects.all().delete()

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_order_form(request.POST or None)
	records=[]
	if request.method == 'POST':
		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('loan_application_shortlisting_records_load',args=(loan_id,)))
	context={
	'records':records,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_shortlisting_list_load.html',context)


def loan_application_shortlisting_records_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	loan = TransactionTypes.objects.get(id=pk)

	records = LoanApplication.objects.filter(applicant__loan=loan,transaction_status='UNTREATED')

	context={
	'loan':loan,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_shortlisting_records_load.html',context)



def loan_application_shortlisting_process(request,pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_shortlisting_process_form(request.POST or None)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	record = LoanApplication.objects.get(id=pk)

	if request.method == 'POST':

		date_shortlisted_id = request.POST.get('date_shortlisted')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(date_shortlisted_id, date_format)
		date_shortlisted=get_current_date(dtObj)

		LoanApplicationShortListing(tdate=tdate,applicant=record,processed_by=processed_by,status="UNTREATED",approval_status='PENDING').save()
		LoanApplication.objects.filter(id=pk).update(transaction_status='TREATED')
		return	HttpResponseRedirect(reverse('loan_application_shortlisting_records_load',args=(record.applicant.loan.pk,)))



	form.fields['date_applied'].initial=get_print_date(record.date_applied)
	form.fields['amount'].initial	=record.loan_amount
	form.fields['date_shortlisted'].initial=get_current_date(now)
	context={
	'record':record,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_shortlisting_process.html',context)



def loan_application_shortlisted_active_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = LoanApplicationShortListing.objects.filter(approval_status='PENDING',status='UNTREATED',applicant__applicant__loan_path ="PROJECT")

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_application_shortlisted_active_list_load.html',context)



def Loan_application_shortlisting_KIV_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_history_period_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)


		exist_loans = LoanApplicationShortListing.objects.filter(~Q(approval_status='APPROVED') & ~Q(approval_status='PENDING')).filter(applicant__applicant__loan_path='PROJECT',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_application_shortlisting_KIV_period_load.html',context)


def Loan_application_shortlisting_KIV_activate(request,pk):
	LoanApplicationShortListing.objects.filter(id=pk).update(approval_status='PENDING')
	return HttpResponseRedirect(reverse('Loan_application_shortlisting_KIV_period_load'))

def Loan_application_shortlisting_history_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=loan_request_history_period_form(request.POST or None)
	exist_loans=[]
	if request.method == 'POST':
		start_date_id=request.POST.get('start_date')
		stop_date_id=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date_id, date_format)
		stop_date=get_current_date(dtObj)


		loan_id = request.POST.get('loans')
		loan = TransactionTypes.objects.get(id=loan_id)


		exist_loans = LoanApplicationShortListing.objects.filter(applicant__applicant__loan_path='PROJECT',tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_application_shortlisting_history_period_load.html',context)


def Loan_application_processing_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)

	exist_loans=[]
	if request.method == 'POST':

		
		loan_id = request.POST.get('loans')
		return HttpResponseRedirect(reverse('Loan_application_processing_records_load',args=(loan_id,)))
	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_application_processing_period_load.html',context)


def Loan_application_processing_records_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_request_order_form(request.POST or None)


	loan = TransactionTypes.objects.get(id=pk)

	exist_loans = LoanApplicationShortListing.objects.filter(applicant__applicant__loan_path='PROJECT',applicant__applicant__loan=loan,status='UNTREATED',approval_status='APPROVED')

	context={
	'exist_loans':exist_loans,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_application_processing_records_load.html',context)


def loan_application_approved_process_preview(request,pk):

	now = datetime.datetime.now()
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=loan_application_approved_process_preview_form(request.POST or None)
	transaction_period=TransactionPeriods.objects.get(status='ACTIVE')


	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	tdate=get_current_date(now)

	applicant=LoanApplicationShortListing.objects.get(id=pk)

	# Application applicant ID
	applicant1=LoanApplication.objects.get(id=applicant.applicant_id)
	# applicant1 = applicant.applicant
	transaction=applicant.applicant.applicant

	nok_name = applicant1.nok_name
	nok_Relationship=applicant1.nok_Relationship
	nok_phone_no=applicant1.nok_phone_no
	nok_address=applicant1.nok_address

	guarantors = LoanApplicationGuarnators.objects.filter(applicant=applicant1)

	records=LoanApplicationSettings.objects.filter(applicant=applicant1)

	loan_type=transaction.loan.name


	loan_amount=applicant.approved_amount

	duration = applicant.applicant.duration
	admin_charge = applicant.applicant.admin_charge
	start_date=[]
	stop_date=[]

	interest_rate = transaction.loan.interest_rate

	interest= float(int(interest_rate)/100) * float(loan_amount)
	interest_deduction=transaction.loan.interest_deduction

	if interest_deduction== "SOURCE":
		amount_scheduled = float(loan_amount)
		cash_recieved=float(amount_scheduled)-(float(admin_charge) + float(interest))
	else:
		amount_scheduled = float(loan_amount)+ float(interest)
		cash_recieved=float(loan_amount)-float(admin_charge)

	
	monthly_repayment=math.ceil(float(amount_scheduled)/float(duration))

	my_id=transaction.member.coop_no
	loan_code=transaction.loan.code


	button_show = False

	if request.method=="POST" and 'btn-fetch' in request.POST:
		start_date=request.POST.get('effective_date')
		start_date=datetime.datetime.strptime(start_date, '%Y-%m-%d')
		stop_date = start_date+ relativedelta(months=int(duration))
		start_date=get_current_date(start_date)
		stop_date=get_current_date(stop_date)
		button_show=True



	if request.method=="POST" and 'btn-process' in request.POST:

		loan_number = generate_number(loan_code,my_id,now)
	
		if loan_number==0:
			messages.error(request,'Please set the loan Code')
			return HttpResponseRedirect(reverse('loan_application_approved_process_preview',args=(pk,)))

		member=transaction.member #applicant.applicant.applicant.member

		effective_date_add=request.POST.get('effective_date_add')

		if effective_date_add:
			start_date=request.POST.get('effective_date')
			start_date=datetime.datetime.strptime(start_date, '%Y-%m-%d')
			stop_date = start_date+ relativedelta(months=int(duration))
			start_date=get_current_date(start_date)
			stop_date=get_current_date(stop_date)
		else:
			messages.error(request,"Please Accept the Effective Date")
			return HttpResponseRedirect(reverse('loan_application_approved_process_preview',args=(pk,)))

		# transaction=applicant.applicant.applicant.applicant.applicant.loan #applicant.applicant.applicant.applicant.loan


		if not nok_name:
			messages.error(request,"No Next of Kin recorded for this Member")
			return HttpResponseRedirect(reverse('loan_application_approved_process_preview',args=(pk,)))

		particulars=transaction.loan.name + " Loan Issuance"
		s = titlecase(particulars)
		particulars=s
		debit=abs(float(loan_amount)) #+float(interest))
		credit=0
		balance=-debit

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)


		ledger_balance=balance


		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		debit=0
		credit=abs(float(loan_amount))
		balance=float(cash_book_balance)+float(credit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)



		particulars=  "Interest on"  + transaction.loan.name.title()
		s = titlecase(particulars)
		particulars=s
		debit=abs(float(interest))
		credit=0
		balance=-(abs(float(ledger_balance)) + abs(float(interest)))

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)

		ledger_balance=balance

		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		credit=0
		debit=abs(float(debit))
		balance=float(cash_book_balance)-float(debit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)

		particulars=  "Admin Charges on :  "  + transaction.loan.name.title()
		s = titlecase(particulars)
		particulars=s
		debit=abs(float(admin_charge))
		credit=0
		balance=-(abs(float(ledger_balance)) + abs(float(admin_charge)))

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)

		ledger_balance=balance

		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		credit=abs(float(admin_charge))
		debit=0
		balance=float(cash_book_balance)+float(credit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)


		particulars=  "Deduction of Admin Charges from Source 0n:  "  + transaction.loan.name.title()
		s = titlecase(particulars)
		particulars=s
		debit=0
		credit=abs(float(admin_charge))
		balance=(float(ledger_balance) + abs(float(admin_charge)))

		post_to_ledger(member,
						transaction.loan,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						'ACTIVE',
						tdate,processed_by)

		ledger_balance=balance
		cash_book_balance=main_cashbook_balance()

		ledger_particulars= particulars + '(' + str(loan_number) + ')'
		debit=abs(float(admin_charge))
		credit=0
		balance=float(cash_book_balance)-float(debit)
		ref_no=get_ticket()
		status='ACTIVE'
		tdate=get_current_date(now)
		source='LOAN ISSUEANCE'
		main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)


		if interest_deduction == "SOURCE":
			particulars= "Interest Deduction at source"
			s = titlecase(particulars)
			particulars=s
			debit=0
			credit=float(interest)
			balance=-(abs(float(ledger_balance)) - float(interest))

			post_to_ledger(member,
							transaction.loan,
							loan_number,
							particulars,
							debit,
							credit,
							balance,
							get_current_date(now),
							'ACTIVE',
							tdate,processed_by)



			Loans_Repayment_Base(member,
								nok_name,
								nok_Relationship,
								nok_phone_no,
								nok_address,
								duration,
								interest_deduction,
								interest_rate,
								interest,
								admin_charge,
								transaction.loan,
								loan_number,
								float(loan_amount),
								float(monthly_repayment),
								-float(loan_amount),
								0,
								start_date,
								stop_date,
								processed_by,
								'ACTIVE',
								tdate,
								'SCHEDULED')


			cash_book_balance=main_cashbook_balance()

			ledger_particulars= particulars + '(' + str(loan_number) + ')'
			debit=abs(float(interest))
			credit=0
			balance=float(cash_book_balance)-float(debit)
			ref_no=get_ticket()
			status='ACTIVE'
			tdate=get_current_date(now)
			source='LOAN ISSUEANCE'
			main_cashbook_posting(ledger_particulars,debit,credit,balance,ref_no,status,tdate,processed_by,source)

		else:

			Loans_Repayment_Base(member,
								duration,
								interest_deduction,
								interest_rate,
								interest,
								admin_charge,
								transaction.loan,
								loan_number,
								float(amount_scheduled),
								float(monthly_repayment),
								-amount_scheduled,
								0,
								start_date,
								stop_date,
								processed_by,
								'ACTIVE',
								tdate,
								'SCHEDULED')


		loan = LoansRepaymentBase.objects.get(loan_number=loan_number)
		for guarantor in guarantors:
			LoanGuarantors(loan=loan,member=guarantor.guarantor).save()


		applicant.status='TREATED'
		applicant.loan_number=loan_number
		applicant.save()


		if transaction.loan.auto_stop_savings == 'YES':
			savings=LoanBasedSavings.objects.all()
			if savings:
				record=LoanBasedSavings.objects.all().first()
				StandingOrderAccounts.objects.filter(transaction__transaction=record.savings,transaction__member=member).update(status='INACTIVE')

				queryset=StandingOrderAccounts.objects.get(transaction__transaction=record.savings,transaction__member=member)
				StandingOrderDeactivatedAccounts(transaction=queryset,status='UNTREATED',processed_by=processed_by,tdate=tdate).save()

		return HttpResponseRedirect(reverse('Loan_application_processing_confirmation',args=(loan_number,)))

	form.fields['effective_date'].initial=transaction_period.transaction_period
	context={
	'transaction':transaction,
	'button_show':button_show,
	'start_date':start_date,
	'stop_date':stop_date,
	'loan_type':loan_type,
	'applicant':applicant,
	'loan_amount':loan_amount,
	'pk':pk,
	'duration':duration,
	'interest_rate':interest_rate,
	'interest_deduction':interest_deduction,
	'interest':interest,
	'monthly_repayment':monthly_repayment,
	'amount_scheduled':amount_scheduled,
	'cash_recieved':cash_recieved,
	'records':records,
	'admin_charge':admin_charge,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/loan_application_approved_process_preview.html',context)


def loan_application_reprint_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Reprint"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/loan_application_reprint_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,})

def loan_application_reprint_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request Form Reprint"
	form = searchForm(request.POST)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('loan_application_reprint_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/loan_application_reprint_list_load.html',context)



def Members_Loan_application_History_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=PersonalLedger_Transaction_Account_Load_form(request.POST or None)

	applicants=[]
	member=Members.objects.get(id=pk)
	if request.method == 'POST':

		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')



		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)
		tdate2 = datetime.datetime.strptime(stop_date, date_format)

		applicants=LoanApplicationShortListing.objects.filter(tdate__range=[tdate1,tdate2],applicant__applicant__member=member)

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'form':form,
	'member':member,
	'applicants':applicants,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Loan_application_History_load.html',context)


def Loan_processing_scheduling_dashboard(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_processing_scheduling_dashboard.html',context)


def Loan_processing_scheduling_all_unscheduled(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=LoansRepaymentBase.objects.filter(status='ACTIVE',schedule_status='UNSCHEDULED')
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Loan_processing_scheduling_all_unscheduled.html',context)


def Loan_processing_scheduling_all_unscheduled_processed(request,pk):

	LoansRepaymentBase.objects.filter(id=pk).update(schedule_status='SCHEDULED')
	return HttpResponseRedirect(reverse('Loan_processing_scheduling_all_unscheduled'))


def Loan_processing_scheduling_based_on_date(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=PersonalLedger_Transaction_Account_Load_form(request.POST or None)

	records=[]
	if request.method == 'POST':
		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')



		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)
		tdate2 = datetime.datetime.strptime(stop_date, date_format)

		records=LoansRepaymentBase.objects.filter(start_date__range=[tdate1,tdate2],status='ACTIVE',schedule_status='UNSCHEDULED')

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'records':records,
	}
	return render(request,'deskofficer_templates/Loan_processing_scheduling_based_on_date.html',context)


def Loan_processing_scheduling_based_on_date_processed(request,pk):
	LoansRepaymentBase.objects.filter(id=pk).update(schedule_status='SCHEDULED')
	return HttpResponseRedirect(reverse('Loan_processing_scheduling_based_on_date'))


def loan_unscheduling_request_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Loan for Unscheduling"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/loan_unscheduling_request_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def loan_unscheduling_request_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST or None)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('loan_unscheduling_request_search'))


		records=LoansRepaymentBase.objects.filter(schedule_status='SCHEDULED',status='ACTIVE').filter(Q(loan_number__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value()) | Q(member__file_no__icontains=form['title'].value()) | Q(member__ippis_no__icontains=form['title'].value()))
		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/loan_unscheduling_request_list_load.html',context)


def loan_unscheduling_request_transaction_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=MemberShipRequest_approval_comment_form(request.POST or None)
	loan=LoansRepaymentBase.objects.get(id=pk)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)

	record_exist=[]
	if LoanUnschedulingRequest.objects.filter(loan=loan,approval_status='PENDING',status='UNTREATED').exists():
		record_exist=LoanUnschedulingRequest.objects.filter(loan=loan,approval_status='PENDING',status='UNTREATED').first()



	if request.method == 'POST':
		comment = request.POST.get('comment')
		if LoanUnschedulingRequest.objects.filter(loan=loan,approval_status='PENDING',status='UNTREATED').exists():
			item=LoanUnschedulingRequest.objects.filter(loan=loan,approval_status='PENDING',status='UNTREATED').first()
			item.comment=comment
			item.save()
		else:
			LoanUnschedulingRequest(comment=comment,loan=loan,
									approval_status='PENDING',
									status='UNTREATED',tdate=tdate,
									processed_by=processed_by.username
									).save()


		return HttpResponseRedirect(reverse('deskofficer_home'))

	if record_exist:
		form.fields['comment'].initial=record_exist.comment
	context={
	'record_exist':record_exist,
	'record':loan,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_unscheduling_request_transaction_load.html',context)


def loan_unscheduling_request_transaction_processing(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=LoanUnschedulingRequest.objects.filter(approval_status='APPROVED',status='UNTREATED')
	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_unscheduling_request_transaction_processing.html',context)


def loan_unscheduling_request_transaction_processing_details(request,pk):
	form=loan_unscheduling_request_transaction_processing_details_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=LoanUnschedulingRequest.objects.get(id=pk)
	item=LoansRepaymentBase.objects.get(loan_number=record.loan.loan_number)

	if request.method == 'POST':
		record.status='TREATED'
		record.save()
		item.schedule_status='UNSCHEDULED'
		item.save()
		return HttpResponseRedirect(reverse('loan_unscheduling_request_transaction_processing'))

	form.fields['approval_comment'].initial=record.approval_comment
	form.fields['comment_exist'].initial=record.comment
	form.fields['approved_date'].initial=record.approval_date

	form.fields['approval_officer'].initial=record.approval_officer
	context={
	'record':record,
	'item':item,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_unscheduling_request_transaction_processing_details.html',context)


def loan_unscheduling_request_transaction_processing(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=LoanUnschedulingRequest.objects.filter(approval_status='APPROVED',status='UNTREATED')
	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/loan_unscheduling_request_transaction_processing.html',context)

############################################################
############## MEMBERSHIP COMMODITY LOAN SEARCH ############
############################################################

def Commodity_Loan_Dashboard_Load(request):
	form=loan_unscheduling_request_transaction_processing_details_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Commodity_Loan_Dashboard_Load.html',context)


def membership_essential_commodity_loan_Period_Transactions_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	submission_status='PENDING'
	# member=Members.objects.get(id=pk)


	#about to post
	if request.method == "POST":
		transaction_id=request.POST.get('transaction')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		period_id=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)
		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_load',args=(period_id,batch_id,transaction_id,
																						)))

	form=membership_essential_commodity_loan_Period_Transactions_load_form(request.POST or None)

	context={
	'form':form,
	# 'member':member,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Period_Transactions_load.html',context)


def membership_essential_commodity_loan_Company_load(request,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Essential Commodity Loan"
	# member=Members.objects.get(id=pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)
	
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	
	records=Company_Products.objects.filter(batch=batch,period=period,product__sub_category__category__transaction=transaction).order_by('company_id').values_list('company_id','company__title').distinct()

	company_array = []
	for index, d in enumerate(records):
		company_array.append(d)

	context={
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'records':records,
	'combo_period': str(period.title) + " " + str(batch.title),
	'company_array':company_array,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_load.html',context)


def membership_essential_commodity_loan_search(request,period_id,batch_id,transaction_id,company_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Request Essential Commodity"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_essential_commodity_loan_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,'period_id':period_id,'batch_id':batch_id,'transaction_id':transaction_id,'company_id':company_id,})


def membership_essential_commodity_loan_list_load(request,period_id,batch_id,transaction_id,company_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	form = searchForm(request.POST)
	transaction=TransactionTypes.objects.get(id=transaction_id)
	company=Companies.objects.get(id=company_id)
	period=Commodity_Period.objects.get(id=period_id)
	batch=Commodity_Period_Batch.objects.get(id=batch_id)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('membership_essential_commodity_loan_search'))

		members=searchMembers(form['title'].value().strip(),'ACTIVE')

	context={
	'company':company,
	'members':members,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_list_load.html',context)





def membership_essential_commodity_loan_Company_products(request,member_pk,period_pk,batch_pk,transaction_pk,company_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Company_products_process_Form(request.POST or None)
	status='UNTREATED'
	stock_status='ACTIVE'
	member=Members.objects.get(id=member_pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	company=Companies.objects.get(id=company_pk)

	if not Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category__category__transaction=transaction,status=stock_status).exists():
		messages.error(request,'No Available Records')
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_load', args=(return_pk,period.pk, batch.pk, transaction.pk)))

	records=Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category__category__transaction=transaction,status=stock_status).order_by('product__product_name')

	queryset=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__batch=batch,product__period=period,product__company=company, member=member,status=status,selection_completed="NO").order_by("-product__product__sub_category__category__duration")
	products=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__batch=batch,product__period=period,product__company=company, member=member,status=status,selection_completed="YES").order_by("-product__product__sub_category__category__duration")
	
	button_enabled=False
	if queryset:
		button_enabled=True


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'company':company,
	'records':records,
	'products':products,
	'member_pk':member_pk,
	'member':member,
	'queryset':queryset,
	'form':form,

	'button_enabled':button_enabled,
	}

	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products.html',context)


def membership_essential_commodity_loan_Company_products_details(request,comp_pk,pk, member_pk,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Company_products_details_Form(request.POST or None)
	member=Members.objects.get(id=member_pk)
	processed_by=CustomUser.objects.get(id=request.user.id)

	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	company=Companies.objects.get(id=comp_pk)
	product=Company_Products.objects.get(id=pk)

	record=Commodity_Categories.objects.get(id=product.product.sub_category.category_id)

	comp_unit_cost=product.amount
	coop_unit_cost=product.coop_amount
	
	interest=0
	if product.interest:
		interest=product.interest

	if request.method =='POST':
		status = 'UNTREATED'
		tdate=get_current_date(now)
		quantity=request.POST.get('quantity')

		if quantity and int(quantity) > 0:
			company_price=float(comp_unit_cost)*float(quantity)
			coop_price=float(coop_unit_cost)*float(quantity)
			# interest=float(coop_price)-float(company_price)
			interest=float(interest)*float(quantity)

			if Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(member=member,product=product).exists():
				Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(member=member,product=product).update(interest=interest,company_price=company_price,coop_price=coop_price,quantity=quantity,processed_by=processed_by.username)
				
			else:
				Members_Xmas_Commodity_Loan_Products_Selection(status=status,
						tdate=tdate,
						member=member,
						product=product,
						quantity=quantity,
						company_price=company_price,
						coop_price=coop_price,
						interest=interest,
						processed_by=processed_by.username).save()

			return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,comp_pk,)))
		else:
			messages.error(request,'Quantity Missing')
			return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_details',args=(comp_pk,pk,member_pk,period.pk,batch.pk,transaction.pk)))

	product_data={
	'loan_type':record.transaction.name,
	'title':record.title,
	'product_name':product.product.product_name,
	'product_model':product.product.product_model,
	}

	form.fields['quantity'].initial='1'
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'company':company,
	# 'return_pk':return_pk,
	'form':form,
	'member':member,
	# 'company':company,
	'product':product,
	'record':record,
	'product_data':product_data,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products_details.html',context)



def membership_essential_commodity_loan_Company_products_details_Selection_Completed(request,member_pk,period_pk,batch_pk,transaction_pk,company_pk):
	member=Members.objects.get(id=member_pk)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	
	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	company=Companies.objects.get(id=company_pk)

	if 	Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.filter(member=member,period=period,batch=batch).exists():
		record=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.get(member=member,period=period,batch=batch)
		ticket=record.ticket
	else:
		ticket=get_ticket()
		
	
		Members_Xmas_Commodity_Loan_Products_Selection_Summary(member=member,
														ticket=ticket,
														period=period,
														batch=batch,
														tdate=tdate,
														processed_by=processed_by).save()

	Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__batch=batch,product__period=period,product__company=company, member=member,status='UNTREATED',selection_completed="NO").update(ticket=ticket,selection_completed="YES")
	return HttpResponseRedirect(reverse('membership_essential_commodity_loan_search',args=(period_pk,batch_pk,transaction_pk,company_pk)))


def membership_essential_commodity_loan_Company_products_details_Delete(request,pk,return_pk,period_pk,batch_pk,transaction_pk,company_pk):
	Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(id=pk).delete()

	return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products',args=(return_pk,period_pk,batch_pk,transaction_pk,company_pk)))




def membership_essential_commodity_loan_selections_active_Period_Transactions_load_product(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	#about to post
	if request.method == "POST":
		
		period_id=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)
		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_selections_active_products_load',args=(period_id,batch_id)))

	form=membership_essential_commodity_loan_Period_Transactions_load_form(request.POST or None)

	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_selections_active_Period_Transactions_load_product.html',context)



def membership_essential_commodity_loan_selections_active_products_xls(request,period_id,batch_id):
	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="commodity.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Description', 'Packs', 'Units', 'Total Qty','No in Pack']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	period=Commodity_Period.objects.get(id=period_id)
	batch=Commodity_Period_Batch.objects.get(id=batch_id)
	# queryset=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch)
	records=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,status='UNTREATED').order_by('product__product_id').values_list('product__product_id','product__product__product_name','product__product__no_in_pack').distinct()
	
	
	rows = []
	for record in records:
		queryset=  Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,status='UNTREATED',product__product__product_name=record[1]).aggregate(quantity=Sum('quantity'))
		total_qty=queryset['quantity']
		pack_id=int(total_qty)//int(record[2])
		if pack_id:
			pack=pack_id
		else:
			pack=[]

		unit_id=int(total_qty)%int(record[2])
		if unit_id:
			unit=unit_id
		else:
			unit=[]
		rows.append((record[1],pack,unit,total_qty,record[2]))


	# rows = MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).values_list('member__coop_no','member__file_no','member__ippis_no','member__full_name', 'amount').order_by('member__coop_no')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


def membership_essential_commodity_loan_selections_active_products_load(request,period_id,batch_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	period=Commodity_Period.objects.get(id=period_id)
	batch=Commodity_Period_Batch.objects.get(id=batch_id)
	# queryset=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch)
	records=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,status='UNTREATED').order_by('product__product_id').values_list('product__product_id','product__product__product_name','product__product__no_in_pack').distinct()
	
	
	product_array = []
	for record in records:
		queryset=  Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,status='UNTREATED',product__product__product_name=record[1]).aggregate(quantity=Sum('quantity'))
		total_qty=queryset['quantity']
		pack=int(total_qty)//int(record[2])
		unit=int(total_qty)%int(record[2])
		product_array.append((record[0],record[1],pack,unit,total_qty,record[2]))

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'product_array':product_array,
	'period':period,
	'batch':batch,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_selections_active_products_load.html',context)



def membership_essential_commodity_loan_selections_products_details(request,period_id,batch_id,product_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	period=Commodity_Period.objects.get(id=period_id)
	batch=Commodity_Period_Batch.objects.get(id=batch_id)

	product=Company_Products.objects.get(period=period,batch=batch,product__product_name=product_id)
	records=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,status='UNTREATED',product__product__product_name=product_id)


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'period':period,
	'batch':batch,
	'product_id':product_id,
	'product':product,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_selections_products_details.html',context)


def membership_essential_commodity_loan_selections_products_details_Update(request,pk,period_id,batch_id,product_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=membership_essential_commodity_loan_Company_products_selections_update_Form(request.POST or None)
	record=Members_Xmas_Commodity_Loan_Products_Selection.objects.get(id=pk)
	
	company_price=0
	if record.product.amount and float(record.product.amount)>0:
		company_price=record.product.amount

	coop_price=0
	if record.product.coop_amount and float(record.product.coop_amount)>0:
		coop_price=record.product.coop_amount
	
	interest=0	
	if record.product.interest and float(record.product.interest)>0:
		interest=record.product.interest

	if request.method == 'POST':
		quantity=request.POST.get('new_quantity')
		if not quantity or int(quantity)<=0:
			quantity=request.POST.get('existing_quantity')

		company_price=float(quantity)*float(company_price)
		coop_price=float(quantity)*float(coop_price)
		interest=float(quantity)*float(interest)
		
		record.quantity=quantity
		record.company_price=company_price
		record.coop_price=coop_price
		record.interest=interest
		record.save()

		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_selections_products_details',args=(period_id,batch_id,product_id,)))

	form.fields['product_name'].initial = record.product.product.product_name
	form.fields['existing_quantity'].initial = record.quantity
	form.fields['new_quantity'].initial = record.quantity
	
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'record':record,
	'period_id':period_id,
	'batch_id':batch_id,
	'product_id':product_id,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_selections_products_details_Update.html',context)

def membership_essential_commodity_loan_selections_products_details_Delete(request,pk,period_id,batch_id,product_id):
	record=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('membership_essential_commodity_loan_selections_products_details',args=(period_id,batch_id,product_id,)))


def membership_essential_commodity_loan_selections_products_details_price_Update(request,period_id,batch_id,product_id):
	period=Commodity_Period.objects.get(id=period_id)
	batch=Commodity_Period_Batch.objects.get(id=batch_id)

	product=Company_Products.objects.get(period=period,batch=batch,product__product_name=product_id)
	
	company_price=0
	if product.amount and float(product.amount)>0:
		company_price=float(product.amount)
	
	coop_amount=0
	if product.coop_amount and float(product.coop_amount)>0:
		coop_amount=float(product.coop_amount)

	interest=0
	if product.interest and float(product.interest)>0:
		interest=float(product.interest)

	records=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,status='UNTREATED',product__product__product_name=product_id)
	for item in records:
		Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(id=item.pk).update(company_price=float(item.quantity)*float(company_price),
		coop_price=float(item.quantity)*float(coop_amount),
		interest=float(item.quantity)*float(interest))
		
	

		# item.company_price=float(item.quantity)*float(company_price)
		# item.coop_amount=float(item.quantity)*float(coop_amount)
		# item.interest=float(item.quantity)*float(interest)
		# item.save()


	return HttpResponseRedirect(reverse('membership_essential_commodity_loan_selections_products_details',args=(period_id,batch_id,product_id,)))
	


	

def membership_essential_commodity_loan_selections_active_Period_Transactions_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	#about to post
	if request.method == "POST":
		
		period_id=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)
		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_active',args=(period_id,batch_id)))

	form=membership_essential_commodity_loan_Period_Transactions_load_form(request.POST or None)

	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_selections_active_Period_Transactions_load.html',context)


def membership_essential_commodity_loan_Company_products_selections_active(request,period_pk,batch_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	members=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.filter(period=period,batch=batch,status='UNTREATED').order_by('member__coop_no')
	# queryset=Members_Commodity_Loan_Products_Selection.objects.filter()			
	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period_pk':period_pk,
	'batch_pk':batch_pk,
	'members':members,
	
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products_selections_active.html',context)


def membership_essential_commodity_loan_Company_products_selections_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.get(id=pk)
	batch=member.batch
	period=member.period

	products=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(ticket=member.ticket)		
	product_array=[]
	for item in products:

		product_array.append((item.pk,item.product.product.product_name,int(item.quantity)//int(item.product.product.no_in_pack),int(item.quantity)%int(item.product.product.no_in_pack),float(item.coop_price),item.quantity,item.product.product.no_in_pack,item.status))
	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'products':products,
	'member':member,
	'period':period,
	'batch':batch,
	'product_array':product_array,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products_selections_details.html',context)

def membership_essential_commodity_loan_Company_products_selections_delete_all(request,pk,period_pk,batch_pk):
	member=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.get(ticket=pk).delete()
	member=Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(ticket=pk).delete()
	return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_active',args=(period_pk,batch_pk)))			
	
	



def membership_essential_commodity_loan_Company_products_selections_delete_all_confirmation(request,pk,period_pk,batch_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	applicant=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.get(ticket=pk)
	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicant':applicant,
	'period_pk':period_pk,
	'batch_pk':batch_pk,
	}
	return render(request, 'deskofficer_templates/membership_essential_commodity_loan_Company_products_selections_delete_all_confirmation.html',context)



	

def membership_essential_commodity_loan_Company_products_selections_delete(request,pk):
	product=Members_Xmas_Commodity_Loan_Products_Selection.objects.get(id=pk)
	
	ticket=product.ticket
	queryset=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.get(ticket=ticket)
	period_id=queryset.period.pk
	batch_id=queryset.batch.pk
	product.delete()	
	if Members_Xmas_Commodity_Loan_Products_Selection.objects.filter(ticket=ticket).exists():
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_details',args=(queryset.pk,)))
	else:
		queryset.delete()
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_active',args=(period_id,batch_id,)))
		
	
def membership_essential_commodity_loan_Company_products_selections_update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = membership_essential_commodity_loan_Company_products_selections_update_Form(request.POST or None)
	product=Members_Xmas_Commodity_Loan_Products_Selection.objects.get(id=pk)		
	member=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.get(ticket=product.ticket)
	# batch=product.batch
	# period=product.period.amount
	
	company_price=0
	if product.product.amount and float(product.product.amount)>0:
		company_price=product.product.amount

	coop_price=0
	if product.product.coop_amount and float(product.product.coop_amount)>0:
		coop_price=product.product.coop_amount
	
	interest=0	
	if product.product.interest and float(product.product.interest)>0:
		interest=product.product.interest

	if request.method == 'POST':
		quantity=request.POST.get('new_quantity')
		if not quantity or int(quantity)<=0:
			messages.error(request, "Quantity is missing")
			return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_update',args=(pk,)))
		company_price=float(quantity)*float(company_price)
		coop_price=float(quantity)*float(coop_price)
		interest=float(quantity)*float(interest)

		product.quantity=quantity
		product.company_price=company_price
		product.coop_price=coop_price
		product.interest=interest
		product.save()
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_details',args=(member.pk,)))
	
	form.fields['product_name'].initial = product.product.product.product_name
	form.fields['existing_quantity'].initial = product.quantity
	form.fields['new_quantity'].initial = product.quantity
	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'product':product,
	'member':member,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products_selections_update.html',context)




def membership_essential_commodity_loan_Company_products_selections_comprehensive_list_Transactions_Period(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	#about to post
	if request.method == "POST":
		
		period_id=request.POST.get('period')
		# period=Commodity_Period.objects.get(id=period_id)
		batch_id=request.POST.get('batch')
		# batch=Commodity_Period_Batch.objects.get(id=batch_id)
		return HttpResponseRedirect(reverse('membership_essential_commodity_loan_Company_products_selections_comprehensive_list',args=(period_id,batch_id)))

	form=membership_essential_commodity_loan_Period_Transactions_load_form(request.POST or None)

	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products_selections_comprehensive_list_Transactions_Period.html',context)




def membership_essential_commodity_loan_Company_products_selections_comprehensive_list(request,period_pk,batch_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	period=Commodity_Period.objects.get(id=period_pk)

	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	headers=Company_Products.objects.filter(period=period,batch=batch,product__sub_category__category__transaction__code='204')

	records=Members_Xmas_Commodity_Loan_Products_Selection_Summary.objects.filter(period=period,batch=batch).order_by('member__coop_no')
	for item in records:
		print(item.member.get_full_name)
	

	context={
	'headers':headers,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_essential_commodity_loan_Company_products_selections_comprehensive_list.html',context)

	

def membership_commodity_loan_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Request Commodity"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_commodity_loan_search.html',{'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,'form':form,'title':title,})


def membership_commodity_loan_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	form = searchForm(request.POST)
	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('membership_commodity_loan_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_list_load.html',context)




def membership_commodity_loan_Company_load(request,pk,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	member=Members.objects.get(id=pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)
	
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	
	records=Company_Products.objects.filter(batch=batch,period=period,product__sub_category__category__transaction=transaction).order_by('company_id').values_list('company_id','company__title').distinct()

	company_array = []
	for index, d in enumerate(records):
		company_array.append(d)

	context={
	'member':member,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'records':records,
	'combo_period': str(period.title) + " " + str(batch.title),
	'company_array':company_array,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_load.html',context)





def membership_commodity_loan_Company_products(request,return_pk,period_pk,batch_pk,transaction_pk,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Company_products_process_Form(request.POST or None)
	status='UNTREATED'
	stock_status='ACTIVE'
	member=Members.objects.get(id=return_pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	company=Companies.objects.get(id=pk)

	if not Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category__category__transaction=transaction,status=stock_status).exists():
		messages.error(request,'No Available Records')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_load', args=(return_pk,period.pk, batch.pk, transaction.pk)))

	records=Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category__category__transaction=transaction,status=stock_status).order_by('product__product_name')

	queryset=Members_Commodity_Loan_Products_Selection.objects.filter(product__batch=batch,product__period=period,product__company=company, member=member,status=status).order_by("-product__product__sub_category__category__duration")

	querysum=Members_Commodity_Loan_Products_Selection.objects.filter(product__batch=batch,product__period=period,product__company=company, member=member,status=status).aggregate(total_coop=Sum('coop_price'),total_comp=Sum('company_price'),total_interest=Sum('interest'),total_admin_charge=Sum('admin_charges'))

	button_enabled=False
	if queryset:
		button_enabled=True


	total_coop=querysum['total_coop']
	total_comp=querysum['total_comp']
	total_interest=querysum['total_interest']
	total_admin_charge=querysum['total_admin_charge']

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'company':company,
	'return_pk':return_pk,
	'records':records,
	'member':member,
	'queryset':queryset,
	'form':form,
	'total_coop':total_coop,
	'total_comp':total_comp,
	'total_interest':total_interest,
	'total_admin_charge':total_admin_charge,
	'button_enabled':button_enabled,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_products.html',context)



def membership_commodity_loan_Company_products_details(request,comp_pk,pk, member_pk,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Company_products_details_Form(request.POST or None)
	member=Members.objects.get(id=member_pk)
	processed_by=CustomUser.objects.get(id=request.user.id)

	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	company=Companies.objects.get(id=comp_pk)
	product=Company_Products.objects.get(id=pk)

	record=Commodity_Categories.objects.get(id=product.product.sub_category.category_id)

	interest=0
	coop_price=0
	admin_charges=0

	if not product.amount:
		messages.error(request,'Product Cost is Missing')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,company.pk)))

	if record.interest_rate_required == '1':
		interest=float(product.amount) *  (float(record.interest_rate)/100)
		coop_price=float(interest) + float(product.amount)
	else:
		coop_price=float(product.coop_amount)
		interest=float(product.coop_amount) -  float(product.amount)



	if record.admin_charges_required == '1':
		if not record.admin_charges or float(record.admin_charges)<=0:
			messages.error(request,"Please Admin Charges not set, consult the Administrator")
			return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,company.pk)))

		if record.admin_charges_rating == 'CASH':
			admin_charges=float(record.admin_charges)  #*  (float(record.interest_rate)/100)
		else:
			admin_charges=(float(record.admin_charges)/100)*float(product.amount)


	if request.method =='POST':
		status = 'UNTREATED'
		tdate=get_current_date(now)
		quantity=request.POST.get('quantity')

		if quantity and int(quantity) > 0:
			admin_charges=float(admin_charges)*float(quantity)
			duration=record.duration
			company_price=float(product.amount) *float(quantity)
			coop_price=float(coop_price)*float(quantity)
			interest=float(interest)*float(quantity)


			Members_Commodity_Loan_Products_Selection(status=status,
					tdate=tdate,
					member=member,
					product=product,
					quantity=quantity,
					admin_charges=admin_charges,
					duration=duration,
					company_price=company_price,
					coop_price=coop_price,
					interest=interest,
					processed_by=processed_by.username).save()

			return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,comp_pk,)))
		else:
			messages.error(request,'Quantity Missing')
			return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_details',args=(comp_pk,pk,member_pk,period.pk,batch.pk,transaction.pk)))

	product_data={

	'loan_type':record.transaction.name,
	'title':record.title,
	'product_name':product.product.product_name,
	'product_model':product.product.product_model,
	'company_price':product.amount,
	'coop_price':product.coop_amount,
	'interest_amount':interest,
	'duration':record.duration,
	'interest_rate':record.interest_rate,
	'admin_charges_rating':record.admin_charges_rating,
	'admin_charges':admin_charges,
	'gaurantors':record.guarantors,
	}

	form.fields['quantity'].initial='1'
	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'company':company,
	# 'return_pk':return_pk,
	'form':form,
	'member':member,
	'product':product,
	'record':record,
	'interest':interest,
	'product_data':product_data,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_products_details.html',context)


def membership_commodity_loan_Company_products_delete(request,pk,mem_pk,period_pk,batch_pk,transaction_pk,comp_pk):
	record=Members_Commodity_Loan_Products_Selection.objects.get(id=pk)
	record.delete()

	return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(mem_pk,period_pk,batch_pk,transaction_pk,comp_pk)))



def membership_commodity_loan_Company_products_proceed(request,pk,mem_pk,comp_pk,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=membership_commodity_loan_Company_products_proceed_Form(request.POST or None)
	processed_by=CustomUser.objects.get(id=request.user.id)
	status='UNTREATED'
	status1='TREATED'
	stock_status='ACTIVE'
	approval_status='PENDING'
	certification_status='PENDING'
	submission_status='PENDING'

	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	member=Members.objects.get(id=mem_pk)
	company=Companies.objects.get(id=comp_pk)

	queryset=Members_Commodity_Loan_Products_Selection.objects.get(id=pk)

	
	
	if CompulsorySavings.objects.all().exists():
		compulsory_savings_id=CompulsorySavings.objects.first()

	else:
		messages.error(request,"Compulsary Savings Not Set")
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,company.pk)))

	compulsory_saving_total=0
	compulsory_savings =StandingOrderAccounts.objects.filter(transaction__member=member,transaction__transaction=compulsory_savings_id.transaction)


	if compulsory_savings:
		compulsory_saving_sum=StandingOrderAccounts.objects.filter(transaction__member=member,transaction__transaction=compulsory_savings_id.transaction).aggregate(total_amount=Sum('amount'))
		compulsory_saving_total=compulsory_saving_sum['total_amount']
	else:
		messages.error(request,"Compulsory Savings Not Available")
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,company.pk)))


	transaction_type=transaction.name

	if LoanBasedSavings.objects.all().exists():
		loan_based_savings_id=LoanBasedSavings.objects.first()
		loan_based_account_number=f'{loan_based_savings_id.savings.code}{member.coop_no}'
	else:
		messages.error(request,"Loan Based Savings Not Set")
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,company.pk)))
	loan_based_saving_total=get_ledger_balance(loan_based_account_number)
	

	standing_order_total=0
	standing_orders =StandingOrderAccounts.objects.filter(transaction__member=member)


	if standing_orders:
		standing_order_sum=StandingOrderAccounts.objects.filter(transaction__member=member).aggregate(total_amount=Sum('amount'))
		standing_order_total=standing_order_sum['total_amount']
	else:
		messages.error(request,"No Available Savings")
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products',args=(member.pk,period.pk,batch.pk,transaction.pk,company.pk)))


	loan_total=0
	loans=LoansRepaymentBase.objects.filter(member=member).filter(Q(balance__lt=0))
	if loans:
		loan_sum=LoansRepaymentBase.objects.filter(member=member).filter(Q(balance__lt=0)).aggregate(total_amount=Sum('repayment'))
		loan_total=loan_sum['total_amount']


	total_debit=float(standing_order_total) + float(loan_total)

	total_coop=queryset.coop_price
	total_comp=queryset.company_price
	total_interest=queryset.interest
	total_admin_charge=queryset.admin_charges

	selected_Duration=queryset.duration
	monthly_repayment=math.ceil(float(total_coop)/float(selected_Duration))


	button_enabled=True
	if request.method == 'POST':

		tdate=get_current_date(now)
		ticket=get_ticket()

		if ticket == 'a':
			messages.error(request,"Default Ticket Id not set")
			return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_proceed',args=(mem_pk,comp_pk,period_pk,batch_pk,transaction_pk)))
		
		# receipt_obj=AutoReceipt.objects.first()
		# receipt= str(receipt_obj.receipt).zfill(5)
		# receipt_obj.receipt=int(receipt_obj.receipt)+1
		# receipt_obj.save()
		receipt=get_receipt()
		# return HttpResponse(f'{queryset.member.coop_no}')

		applicant=Members_Commodity_Loan_Application(ticket=ticket, #receipt=receipt,
											member=queryset,
											company_price=total_comp,
											coop_price=total_coop,
											interest=total_interest,
											admin_charge=total_admin_charge,
											duration=selected_Duration,
											repayment=monthly_repayment,
											processed_by=processed_by.username,
											status=status,
											tdate=tdate,
											period=period,
											loans=loan_total,
											savings=loan_based_saving_total,
											standing_order=standing_order_total,
											batch=batch,
											approval_status=approval_status,
											submission_status=submission_status,
											)
		applicant.save()
	

		for item in standing_orders:
			description=item.transaction.transaction.name
			value=item.amount
			Members_Commodity_Loan_Application_Settings(status=status,ticket=ticket,applicant=applicant,description=description,value=value).save()

		for item in loans:
			description=item.transaction.name
			value=item.repayment
			Members_Commodity_Loan_Application_Settings(status=status,ticket=ticket,applicant=applicant,description=description,value=value).save()


		Members_Commodity_Loan_Products_Selection.objects.filter(product__period=period,product__batch=batch,product__company=company, member=member,status=status).update(ticket=ticket,status=status1)
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_Criteria_Dashboard',args=(member.pk,period.pk,batch.pk,transaction.pk,)))



	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'button_enabled':button_enabled,
	'company':company,
	# 'records':records,
	'member':member,
	'queryset':queryset,
	'form':form,
	'total_coop':total_coop,
	'total_comp':total_comp,
	'total_interest':total_interest,
	'total_admin_charge':total_admin_charge,
	'selected_Duration':selected_Duration,
	'monthly_repayment':monthly_repayment,
	'total_admin_charge':total_admin_charge,
	'standing_order_total':standing_order_total,
	'loan_total':loan_total,
	'transaction_type':transaction_type,
	'loan_based_saving_total':loan_based_saving_total,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_products_proceed.html',context)





def membership_commodity_loan_Company_products_Criteria_Dashboard(request,member_pk,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transaction=TransactionTypes.objects.get(id=transaction_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	member=Members.objects.get(id=member_pk)

	record=Commodity_Categories.objects.filter(transaction=transaction).first()

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'transaction':transaction,
	'period':period,
	'batch':batch,
	'member':member,
	'record':record,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_products_Criteria_Dashboard.html',context)


def membership_commodity_loan_Company_products_net_pay_Settings(request,member_pk,period_pk,batch_pk,transaction_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Company_products_Criteria_Settings_form(request.POST or None)
	member=Members.objects.get(id=member_pk)

	period = Commodity_Period.objects.get(id=period_pk)
	batch = Commodity_Period_Batch.objects.get(id=batch_pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)


	submission_status='PENDING'
	certification_status='PENDING'
	approval_status='PENDING'
	status='UNTREATED'


	if Members_Commodity_Loan_Application.objects.filter(member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,member__member=member,status=status,approval_status=approval_status,submission_status=submission_status).exists():
		applicant=Members_Commodity_Loan_Application.objects.get(member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,member__member=member,status=status,approval_status=approval_status,submission_status=submission_status)
		if applicant.net_pay and float(applicant.net_pay)>0:
			net_pay=applicant.net_pay
		else:
			net_pay=member.last_used_net_pay
	else:

		messages.info(request,'No record found')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_Criteria_Dashboard',args=(member_pk,period_pk,batch_pk,transaction_pk)))


	if request.method == 'POST':
		net_pay =float(request.POST.get('net_pay'))

		period = request.POST.get('period')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(period, date_format)
		period=get_current_date(dtObj)

		if net_pay <= 0:
			messages.info(request,"Please Net Pay Cannot be Zero(0)")
			return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_net_pay_Settings',args=(member_pk,period_pk,batch_pk,transaction_pk)))


		image_status=request.POST.get('image_status')

		if image_status:
			if request.FILES.get('image', False):
				image = request.FILES['image']
				fs=FileSystemStorage()
				filename=fs.save(image.name,image)
				image_url=fs.url(filename)

			else:
				image_url=None

			applicant.image = image_url


		applicant.net_pay = net_pay
		applicant.net_pay_as_at = period
		applicant.save()

		member.last_used_net_pay=net_pay
		member.net_pay_as_at=period
		member.save()
		messages.success(request,'Net Pay Updated Successfully')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_Criteria_Dashboard',args=(member_pk,period_pk,batch_pk,transaction_pk)))

	if net_pay and float(net_pay)>0:
		form.fields['period'].initial=member.net_pay_as_at
	else:
		form.fields['period'].initial=now
	# form.fields['gross_pay'].initial=member.gross_pay
	form.fields['net_pay'].initial=net_pay
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	# 'records':records,
	'member':member,
	'form':form,

	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_products_net_pay_Settings.html',context)


def membership_commodity_loan_application_submit(request,member_pk,period_pk,batch_pk,transaction_pk):
	member=Members.objects.get(id=member_pk)

	period = Commodity_Period.objects.get(id=period_pk)
	batch = Commodity_Period_Batch.objects.get(id=batch_pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)

	submission_status='PENDING'
	submission_status1='SUBMITTED'
	approval_status='PENDING'
	status='UNTREATED'


	if Members_Commodity_Loan_Application.objects.filter(batch=batch,period=period,member__member=member,status=status,approval_status=approval_status,submission_status=submission_status).exists():
		transaction=Members_Commodity_Loan_Application.objects.get(batch=batch,period=period,member__member=member,status=status,approval_status=approval_status,submission_status=submission_status)
	else:
		messages.info(request,'No record found')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_Criteria_Dashboard',args=(member_pk,period_pk,batch_pk,transaction_pk)))


	if not transaction.net_pay:
		messages.info(request,'Net Pay not Set')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_Criteria_Dashboard',args=(member_pk,period_pk,batch_pk,transaction_pk)))



	transaction.submission_status = submission_status1
	transaction.save()
	messages.success(request,'Net Pay Updated Successfully')
	return HttpResponseRedirect(reverse('membership_commodity_loan_search'))



def membership_commodity_loan_Period__manage_transaction_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	applicants=[]
	if request.method == 'POST':
		transaction_id = request.POST.get('transaction')
		transaction = TransactionTypes.objects.get(id=transaction_id)

		period_id =request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)

		batch_id =request.POST.get('batch')
		batch= Commodity_Period_Batch.objects.get(id=batch_id)
		submission_status="SUBMITTED"
		status='UNTREATED'
		approval_status='PENDING'
		applicants=Members_Commodity_Loan_Application.objects.filter(approval_status=approval_status,period=period,batch=batch,member__product__product__sub_category__category__transaction=transaction,submission_status=submission_status,status=status)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicants':applicants,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Period__manage_transaction_load.html',context)



def membership_commodity_loan_Period__manage_transaction_delete_Confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title = "Are you sure you want to drop this Request"
	record=Members_Commodity_Loan_Application.objects.get(ticket=pk)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'record':record,
	'title':title,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Period__manage_transaction_delete_Confirmation.html',context)

def membership_commodity_loan_Period__manage_transaction_delete(request,pk):
	Members_Commodity_Loan_Products_Selection.objects.filter(ticket=pk).delete()
	return HttpResponseRedirect(reverse('membership_commodity_loan_Period__manage_transaction_load'))


def membership_commodity_loan_Period_Transactions_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Commodity Loan"
	submission_status='PENDING'
	member=Members.objects.get(id=pk)

	applicants=Members_Commodity_Loan_Application.objects.filter(member__member=member,submission_status=submission_status)

	#about to post
	if request.method == "POST":
		transaction_id=request.POST.get('transaction')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		period_id=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)
		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)
		return HttpResponseRedirect(reverse('membership_commodity_loan_Company_load',args=(member.pk,
																						period_id,batch_id,transaction_id,
																						)))

	form=Product_Linking_Period_Load_form(request.POST or None)

	context={
	'form':form,
	'member':member,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'applicants':applicants,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Period_Transactions_load.html',context)


def membership_commodity_loan_Period_Transactions_drop(request,pk,member_pk):
	applicant=Members_Commodity_Loan_Application.objects.get(id=pk)

	applicant.delete()
	return HttpResponseRedirect(reverse('membership_commodity_loan_Period_Transactions_load',args=(member_pk,)))




def membership_commodity_loan_Dashboard_load(request,pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Commodity Loan"
	submission_status='PENDING'
	member=Members.objects.get(id=return_pk)

	applicant=Members_Commodity_Loan_Application.objects.get(id=pk)

	context={
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicant':applicant,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Dashboard_load.html',context)



def membership_commodity_loan_Company_products_net_pay_SettingsB(request,pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Company_products_Criteria_Settings_form(request.POST or None)
	member=Members.objects.get(id=return_pk)

	net_pay=0
	transaction=Members_Commodity_Loan_Application.objects.get(id=pk)
	if transaction.net_pay and float(transaction.net_pay)>0:
		net_pay=transaction.net_pay
	else:
		net_pay=member.last_used_net_pay

	if request.method == 'POST':
		net_pay=request.POST.get('net_pay')


		if not float(net_pay)>0:
			messages.info(request,'Please Enter Net Pay')
			return HttpResponseRedirect(reverse('membership_commodity_loan_Company_products_net_pay_SettingsB',args=(pk,return_pk,)))



		transaction.net_pay=net_pay
		transaction.save()
		return HttpResponseRedirect(reverse('membership_commodity_loan_Dashboard_load',args=(transaction.pk,return_pk,)))

	form.fields['period'].initial=member.net_pay_as_at
	form.fields['net_pay'].initial=member.last_used_net_pay
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	# 'records':records,
	'member':member,
	'form':form,

	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Company_products_net_pay_SettingsB.html',context)



def membership_commodity_loan_application_submitB(request,pk,return_pk):
	submission_status='SUBMITTED'
	applicant=Members_Commodity_Loan_Application.objects.get(id=pk)

	if float(applicant.net_pay) <= 0:
		messages.info(request,"Net Pay Cannot be Zero(0)")
		return HttpResponseRedirect(reverse('membership_commodity_loan_Dashboard_load',args=(pk,return_pk,)))

	applicant.submission_status=submission_status
	applicant.save()

	return HttpResponseRedirect(reverse('membership_commodity_loan_search'))



def Savings_Lockup_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Savings_Lockup_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Savings_Lockup_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Members Exclusiveness"
	status="ACTIVE"
	lock_status='YES'
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Savings_Lockup_search'))

		records=MembersAccountsDomain.objects.filter(Q(member__ippis_no__icontains=form['title'].value()) | Q(member__file_no__icontains=form['title'].value()) | Q(member__phone_number__icontains=form['title'].value()) | Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value())).filter(status=status,loan_lock=lock_status)
		context={
		'records':records,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Savings_Lockup_list_load.html',context)


def Savings_Lockup_Processing(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	lock_status='NO'
	record=MembersAccountsDomain.objects.filter(id=pk).update(loan_lock=lock_status)
	return HttpResponseRedirect(reverse('Savings_Lockup_search'))


#########################################################
############### TRANSACTION PERIOD MANAGER  ###############
#########################################################
def TransactionPeriodManager(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status='INACTIVE'
	records=TransactionPeriods.objects.all().order_by('transaction_period')
	form=TransactionPeriod_form(request.POST or None)
	if request.method=="POST":
		transaction_period=request.POST.get('transaction_period')
		if TransactionPeriods.objects.filter(transaction_period=transaction_period).exists():
			return HttpResponseRedirect(reverse('TransactionPeriodManager'))

		record=TransactionPeriods(transaction_period=transaction_period,status=status)
		record.save()
		return HttpResponseRedirect(reverse('TransactionPeriodManager'))
	form.fields['transaction_period'].initial=now

	context={
	'form':form,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/TransactionPeriodManager.html',context)


def TransactionPeriodsUpdate(request,pk):
	status='ACTIVE'
	status1='INACTIVE'
	all_record_update=TransactionPeriods.objects.all().update(status=status1)
	record=TransactionPeriods.objects.get(id=pk)
	record.status=status
	record.save()
	return HttpResponseRedirect(reverse('TransactionPeriodManager'))


def TransactionPeriodsDelete(request,pk):
	TransactionPeriods.objects.get(id=pk).delete()
	return HttpResponseRedirect(reverse('TransactionPeriodManager'))

def AdjustmentPeriodManager(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status='INACTIVE'
	records=AdjustmentPeriods.objects.all().order_by('transaction_period')
	form=TransactionPeriod_form(request.POST or None)
	if request.method=="POST":
		
		transaction_period=request.POST.get('transaction_period')
		
		if TransactionPeriods.objects.filter(transaction_period=transaction_period).exists():
			
			return HttpResponseRedirect(reverse('AdjustmentPeriodManager'))

	
		record=AdjustmentPeriods(transaction_period=transaction_period,status=status)
		record.save()
		
		return HttpResponseRedirect(reverse('AdjustmentPeriodManager'))
	form.fields['transaction_period'].initial=now

	context={
	'form':form,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/AdjustmentPeriodManager.html',context)


def AdjustmentPeriodsUpdate(request,pk):
	status='ACTIVE'
	status1='INACTIVE'

	all_record_update=AdjustmentPeriods.objects.all().update(status=status1)
	record=AdjustmentPeriods.objects.get(id=pk)
	record.status=status
	record.save()
	return HttpResponseRedirect(reverse('AdjustmentPeriodManager'))


def AdjustmentPeriodsDelete(request,pk):
	AdjustmentPeriods.objects.get(id=pk).delete()
	return HttpResponseRedirect(reverse('AdjustmentPeriodManager'))


#########################################################
############### MONTHLY DEDUCTIONS SECTION  ###############
#########################################################
def Monthly_Deductions_OutgoingTransactions(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_OutgoingTransactions.html',context)

def Monthly_Deduction_Salary_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Salary_Institution_Load.html',context)



def Monthly_Individual_Transactions_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	source1=TransactionSources.objects.get(title='SAVINGS')
	source2=TransactionSources.objects.get(title='LOAN')
	source3=TransactionSources.objects.get(title='SHOP')

	status='ACTIVE'
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	transactions1=TransactionTypes.objects.filter(source=source1)
	transactions2=TransactionTypes.objects.filter(source=source2)
	transactions3=TransactionTypes.objects.filter(source=source3)

	salary_institution=SalaryInstitution.objects.get(id=pk)

	generated_transactions=MonthlyGeneratedTransactions.objects.filter(transaction_period=transaction_period)

	savings_status=False
	loans_status=False
	if MonthlyDeductionGenerationHeading.objects.filter(transaction_period=transaction_period,heading='SAVINGS'):
		savings_status=True

	if MonthlyDeductionGenerationHeading.objects.filter(transaction_period=transaction_period,heading='LOANS'):
		loans_status=True

	context={
	'savings_status':savings_status,
	'loans_status':loans_status,
	'transactions1':transactions1,
	'transactions2':transactions2,
	'transactions3':transactions3,
	'transaction_period':transaction_period,
	'salary_institution':salary_institution,
	'generated_transactions':generated_transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Individual_Transactions_Load.html',context)



def Monthly_Savings_Contribution_preview(request,pk, salary_inst_key):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status='ACTIVE'


	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=salary_inst_key)

	transaction=TransactionTypes.objects.get(id=pk)

	members=StandingOrderAccounts.objects.filter(transaction__transaction=transaction,status=status,transaction__member__salary_institution=salary_institution)
	if members.count() == 0:
		messages.info(request,'No record found for this transaction')
		return HttpResponseRedirect(reverse('Monthly_Individual_Transactions_Load', args=(salary_inst_key)))

	record_exist=False
	if MonthlyGeneratedTransactions.objects.filter(salary_institution=salary_institution,transaction=transaction,transaction_period=transaction_period).exists():
		record_exist=True

	context={

	'transaction':transaction,
	'members':members,
	'transaction_period':transaction_period,
	'pk':pk,
	'members':members,
	'salary_institution':salary_institution,
	'salary_inst_key':salary_inst_key,
	'record_exist':record_exist,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Savings_Contribution_preview.html',context)



def Monthly_Savings_Contribution_Generate(request,pk,salary_inst_key):
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	tdate=get_current_date(now)
	status='ACTIVE'
	transaction_status='UNTREATED'
	processing_status='UNPROCESSED'

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=salary_inst_key)
	transaction=TransactionTypes.objects.get(id=pk)
	members=StandingOrderAccounts.objects.filter(transaction__transaction=transaction,status=status,transaction__member__salary_institution=salary_institution)

	if MonthlyDeductionList.objects.filter(transaction_period=transaction_period,transaction=transaction,member__salary_institution=salary_institution).exists():
		messages.error(request,"Transaction already generated")
		return HttpResponseRedirect(reverse('Monthly_Savings_Contribution_preview',args=(pk,salary_inst_key)))

	for member in members:
		MonthlyDeductionList(
							member=member.transaction.member,
							transaction_period=transaction_period,
							transaction=transaction,
							account_number=member.transaction.account_number,
							amount=member.amount,
							balance=0,
							processing_status=processing_status,
							processed_by=processed_by,
							salary_institution=salary_institution,
							status=transaction_status,
							tdate=tdate).save()

	if MonthlyDeductionList.objects.filter(transaction_period=transaction_period,transaction=transaction).exists():
		MonthlyGeneratedTransactions(salary_institution=salary_institution,tdate=tdate,transaction=transaction,transaction_period=transaction_period,processed_by=processed_by,transaction_status=transaction_status).save()

	return HttpResponseRedirect(reverse('Monthly_Individual_Transactions_Load',args=(salary_inst_key,)))



def Monthly_loan_repayement_preview(request,pk, salary_inst_key):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='ACTIVE'
	schedule_status='SCHEDULED'

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period=transaction_period.transaction_period

	salary_institution=SalaryInstitution.objects.get(id=salary_inst_key)
	transaction=TransactionTypes.objects.get(id=pk)
	members=LoansRepaymentBase.objects.filter(schedule_status=schedule_status,transaction=transaction,status=status,member__salary_institution=salary_institution).filter(Q(balance__lt=0))

	if not members:
		messages.info(request,'No record found for this transaction')
		return HttpResponseRedirect(reverse('Monthly_Individual_Transactions_Load', args=(salary_inst_key)))

	context={
	'transaction':transaction,
	'members':members,
	'transaction_period':transaction_period,
	'pk':pk,
	'salary_inst_key':salary_inst_key,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_loan_repayement_preview.html',context)



def Monthly_loan_repayement_Generate(request,pk, salary_inst_key):
	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)

	status='ACTIVE'
	transaction_status="UNTREATED"
	processing_status='UNPROCESSED'

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=salary_inst_key)
	transaction=TransactionTypes.objects.get(id=pk)

	penalty_enabler = "NO"

	if FailedLoanPenaltyEnabler.objects.all().exists():
		penalty_enabled=FailedLoanPenaltyEnabler.objects.first()
		if penalty_enabled.status == "YES":
			penalty_enabler="YES"

	
	if penalty_enabler == "YES":
		# return HttpResponse(penalty_enabler)

		defaulter_duration=0
		if FailedLoanPenaltyDuration.objects.all().exists():
			defaulter_duration_id=FailedLoanPenaltyDuration.objects.first()
			defaulter_duration=defaulter_duration_id.duration

		# defaulted_members=LoansRepaymentBase.objects.filter(transaction=transaction,status=status,member__salary_institution=salary_institution).filter(balance__lt=0).update(penalty_status='NORMAL')
		defaulted_members=LoansRepaymentBase.objects.filter(transaction=transaction,status=status,member__salary_institution=salary_institution).filter(Q(balance__lt=0) and ~Q(penalty_status='DEFAULTED'))

		for item in defaulted_members:
			expected_stop_date=item.stop_date
			expected_stop_date=get_current_date(expected_stop_date)

			new_date=transaction_period
			grace_period=expected_stop_date + relativedelta(months=int(defaulter_duration))
			if new_date > grace_period:
				item.penalty_status = 'DEFAULTED'
				item.save()
				# print(f'SNO: {item.pk}-{item.member.get_full_name} ({item.member.coop_no}) - Expected Stop Date: {expected_stop_date} -Allowed Defult date: {expected_stop_date + relativedelta(months=int(defaulter_duration))} - Current Date: {new_date}')

	members=LoansRepaymentBase.objects.filter(transaction=transaction,status=status,member__salary_institution=salary_institution).filter(Q(balance__lt=0))
	# return HttpResponse(f"{penalty_enabler} Please wait")



	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if MonthlyDeductionList.objects.filter(transaction_period=transaction_period,transaction=transaction).exists():
		messages.error(request,"Transaction already generated")
		return HttpResponseRedirect(reverse('Monthly_loan_repayement_preview',args=(pk, salary_inst_key)))

	n_transaction=request.POST.get('transaction')
	if not n_transaction:
		messages.error(request,'Number of Expected Transactions Missing')
		return HttpResponseRedirect(reverse('Monthly_loan_repayement_preview',args=(pk, salary_inst_key)))



	for member in members:
		# expected_stop_date=member.stop_date
		# expected_stop_date=get_current_date(expected_stop_date)

		# new_date=transaction_period
		penalty_rate=0

		deduction_amount= float(n_transaction)*float(member.repayment)

		generated_amount=0
		repayment=0
		penalty=0

		# if abs(float(member.balance)) >= float(deduction_amount):

		generated_amount=member.repayment
		# else:
		# 	generated_amount=member.balance



		if member.penalty_status == 'DEFAULTED':
			penalty=FailedLoanPenalty.objects.all().first()
			penalty_rate=penalty.code
			penalty_amount=(float(penalty_rate)/100)*float(member.balance)

			ledger_balance=get_ledger_balance(member.loan_number)

			new_ledger_balance=float(ledger_balance)+ float(penalty_amount)
			debit=abs(penalty_amount)
			credit=0
			particulars="Penalty on loan with balance of " + str(abs(member.balance))

			penalty=debit

			post_to_ledger(member.member,
						transaction,
						member.loan_number,
						particulars,
						debit,
						credit,
						new_ledger_balance,
						transaction_period,
						status,
						tdate,
						processed_by
						)

			loan_date=get_current_date(member.start_date)
			due_date=get_current_date(member.stop_date)

			FailedLoanPenaltyRecords(transaction=member,
									amount=abs(member.balance),
									penalty=abs(penalty_amount),
									rate=penalty_rate,
									transaction_period=transaction_period,
									loan_date=loan_date,
									due_date=due_date,
									penalty_date=transaction_period,

									processed_by=processed_by,
									status=transaction_status,
									tdate=tdate
									).save()

									# loan_date=member.start_date,
									# due_date=member.stop_date,
									# penalty_date=transaction_period,

			member.loan_amount = float(abs(member.loan_amount)) + float(abs(penalty_amount))
			member.penalty_amount=float(member.penalty_amount) + float(abs(penalty_amount))
			member.balance=-(float(abs(member.balance)) + float(abs(penalty_amount)))
			member.save()
			generated_amount=float(generated_amount)+float(abs(penalty_amount))
		else:
			pass


		record=MonthlyDeductionList(member=member.member,

									transaction_period=transaction_period,
									transaction=transaction,
									account_number=member.loan_number,
									amount=generated_amount,
									amount_deducted=0,
									balance=0,
									repayment=member.repayment,
									penalty=penalty,
									salary_institution=salary_institution,
									processed_by=processed_by,
									status=transaction_status,
									tdate=tdate,
									processing_status=processing_status
									)
		record.save()



	if MonthlyDeductionList.objects.filter(member__salary_institution=salary_institution,transaction_period=transaction_period,transaction=transaction).exists():

		record=MonthlyGeneratedTransactions(salary_institution=salary_institution,tdate=tdate,transaction=transaction,transaction_period=transaction_period,processed_by=processed_by,transaction_status=transaction_status)
		record.save()

	return HttpResponseRedirect(reverse('Monthly_Individual_Transactions_Load',args=(salary_inst_key,)))




def MonthlyDeductionGenerationHeader(request, caption,salary_inst_key):
	status='UNTREATED'
	status1='ACTIVE'

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transaction_period=TransactionPeriods.objects.get(status=status1)
	transaction_period=get_current_date(transaction_period.transaction_period)
	salary_institution=SalaryInstitution.objects.get(id=salary_inst_key)


	if MonthlyDeductionGenerationHeading.objects.filter(transaction_period=transaction_period,heading=caption,salary_institution=salary_institution).exists():
		pass
	else:
		MonthlyDeductionGenerationHeading(salary_institution=salary_institution,transaction_period=transaction_period,heading=caption,status=status).save()
	return HttpResponseRedirect(reverse('Monthly_Individual_Transactions_Load', args=(salary_inst_key)))



def Monthly_Group_transaction_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status='ACTIVE'
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	items=SalaryInstitution.objects.all()

	records=MonthlyGroupGeneratedTransactions.objects.filter(transaction_period=transaction_period)

	context={
	'items':items,
	'transaction_period':transaction_period,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Group_transaction_Institution_Load.html',context)




def Monthly_Group_Generated_Transaction(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)

	transaction_ready=False
	savings_generated=False
	loans_generated=False


	if MonthlyDeductionGenerationHeading.objects.filter(transaction_period=transaction_period,heading="SAVINGS",salary_institution=salary_institution):
		savings_generated=True
	if MonthlyDeductionGenerationHeading.objects.filter(transaction_period=transaction_period,heading="LOANS",salary_institution=salary_institution):
		loans_generated=True

	if savings_generated and loans_generated:
		transaction_ready=True

	if MonthlyGroupGeneratedTransactions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).exists():
		messages.error(request,"Transaction already generated")
		return HttpResponseRedirect(reverse('Monthly_Group_transaction_Institution_Load'))

	records=MonthlyDeductionList.objects.filter(member__salary_institution=salary_institution,transaction_period=transaction_period).order_by('member_id').values_list('member__member_id','member__file_no','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no').distinct()

	if not records:
		messages.error(request,'No Record Found')
		return HttpResponseRedirect(reverse('Monthly_Group_transaction_Institution_Load'))

	members_array = []
	for record in records:
		queryset=  MonthlyDeductionList.objects.filter(member__member_id=record[0],member__salary_institution=salary_institution,transaction_period=transaction_period).aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']
		members_array.append((record[0][13:],f'{record[2]} {record[3]} {record[4]}',record[1],record[5],total_amount))

	context={
	'salary_institution':salary_institution,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'members_array':members_array,
	"savings_generated":savings_generated,
	"loans_generated":loans_generated,
	"transaction_ready":transaction_ready,
	}
	return render(request,'deskofficer_templates/Monthly_Group_Generated_Transaction.html',context)


def Monthly_Group_Transaction_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	member=Members.objects.get(ippis_no=pk)

	records=MonthlyDeductionList.objects.filter(transaction_period=transaction_period,member__ippis_no=pk)
	total_deductions=0

	deduction_sum=MonthlyDeductionList.objects.filter(transaction_period=transaction_period,member__ippis_no=pk).aggregate(total_amount=Sum('amount'))
	total_deductions=deduction_sum['total_amount']

	context={
	'records':records,
	'member':member,
	'transaction_period':transaction_period,
	'total_deductions':total_deductions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Group_Transaction_preview.html',context)



def Monthly_Group_Transaction_generate(request,pk):
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)

	status="ACTIVE"
	processing_status='UNPROCESSED'
	transaction_status1="UNTREATED"
	transaction_status="TREATED"

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)
	members=Members.objects.filter(status=status,salary_institution=salary_institution)

	for member in members:
		total_deductions=0

		if MonthlyDeductionList.objects.filter(transaction_period=transaction_period,member=member,status=transaction_status1).exists():
			deduction_sum=MonthlyDeductionList.objects.filter(transaction_period=transaction_period,member=member,status=transaction_status1).aggregate(total_amount=Sum('amount'))
			amount=deduction_sum['total_amount']

			record=MonthlyDeductionListGenerated(processing_status=processing_status,tdate=tdate,salary_institution=salary_institution,transaction_period=transaction_period,member=member,amount=amount,transaction_status=transaction_status1,processed_by=processed_by.username)
			record.save()

	all_record_update=MonthlyDeductionList.objects.filter(transaction_period=transaction_period).update(status=transaction_status)
	all_record_update=MonthlyGeneratedTransactions.objects.filter(transaction_period=transaction_period).update(transaction_status=transaction_status)

	record=MonthlyGroupGeneratedTransactions(transaction_status=transaction_status1,salary_institution=salary_institution,transaction_period=transaction_period,processed_by=processed_by.username,tdate=tdate)
	record.save()

	return HttpResponseRedirect(reverse('Monthly_Group_transaction_Institution_Load'))



def Monthly_Group_Transaction_View(request,pk):
	status="ACTIVE"

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	salary_institution=SalaryInstitution.objects.get(id=pk)

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period)

	context={
	'transaction_period':transaction_period,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Group_Transaction_View.html',context)


def Monthly_Deduction_Main_and_Shop_Merger_Institution_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	# 'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Main_and_Shop_Merger_Institution_load.html',context)


def Monthly_Deduction_Main_and_Shop_Merger_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction_status='UNTREATED'
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)

	records=MonthlyJointDeductionGeneratedTransactions.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,transaction_status=transaction_status)

	button_show=True
	if not records:
		button_show=False
		# messages.error(request,'No Record Found')
		# return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Institution_load'))


	context={
	'button_show':button_show,
	'transaction_period':transaction_period,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Main_and_Shop_Merger_Load.html',context)


def Monthly_Deduction_Main_and_Shop_Merger_Load_Main_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction_status='UNTREATED'
	transaction_status1='TREATED'
	processing_status='UNPROCESSED'
	status="ACTIVE"


	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)
	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)

	if MonthlyJointDeductionGeneratedTransactions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction='MAIN').exists():
		messages.error(request,'Transaction already generated')
		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(pk,)))

	records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction_status=transaction_status)

	if not records:
		messages.error(request,'No record Found')
		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(pk,)))

	if request.method == 'POST':
		for record in records:
			MonthlyJointDeductionList(member=record.member,
									transaction_period=transaction_period,
									transaction="MAIN",
									amount=record.amount,
									processed_by=processed_by.username,
									salary_institution=salary_institution,
									status=transaction_status,
									processing_status=processing_status,tdate=tdate).save()

		MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction_status=transaction_status).update(transaction_status=transaction_status1)

		MonthlyJointDeductionGeneratedTransactions(salary_institution=salary_institution,
													transaction_period=transaction_period,
													transaction='MAIN',
													processed_by=processed_by.username,
													transaction_status=transaction_status,
													tdate=tdate
													).save()

		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(salary_institution.pk,)))

	context={
	'transaction_period':transaction_period,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Main_and_Shop_Merger_Load_Main_Preview.html',context)


def Monthly_Deduction_Main_and_Shop_Merger_Load_Main_Preview_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	member=Members.objects.get(ippis_no=pk)

	records=MonthlyDeductionList.objects.filter(transaction_period=transaction_period,member__ippis_no=pk)
	total_deductions=0
	deduction_sum=MonthlyDeductionList.objects.filter(transaction_period=transaction_period,member__ippis_no=pk).aggregate(total_amount=Sum('amount'))
	total_deductions=deduction_sum['total_amount']

	context={
	'records':records,
	'member':member,
	'transaction_period':transaction_period,
	'total_deductions':total_deductions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Group_Transaction_preview.html',context)


def Monthly_Deduction_Main_and_Shop_Merger_Load_Shop_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)


	salary_institution=SalaryInstitution.objects.get(id=pk)
	transaction_status='UNTREATED'
	transaction_status1='TREATED'
	processing_status='UNPROCESSED'
	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)

	if MonthlyJointDeductionGeneratedTransactions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction='SHOP').exists():
		messages.error(request,'Transaction already generated')
		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(pk,)))

	records=MonthlyShopdeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,status=transaction_status)

	# if not records:
	# 	messages.error(request,'No Record Found')
	# 	return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(pk,)))

	if request.method == 'POST':
		for record in records:
			MonthlyJointDeductionList(member=record.member,
									transaction_period=transaction_period,
									transaction="SHOP",
									amount=record.coop_amount,
									processed_by=processed_by.username,
									salary_institution=salary_institution,
									status=transaction_status,
									processing_status=processing_status,tdate=tdate).save()

		MonthlyShopdeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,status=transaction_status).update(status=transaction_status1)

		MonthlyJointDeductionGeneratedTransactions(salary_institution=salary_institution,
													transaction_period=transaction_period,
													transaction='SHOP',
													processed_by=processed_by.username,
													transaction_status=transaction_status,
													tdate=tdate
													).save()

		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(salary_institution.pk,)))
	button_enabled=True
	if not records:
		button_enabled=False
	context={
	'transaction_period':transaction_period,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'button_enabled':button_enabled,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Main_and_Shop_Merger_Load_Shop_Preview.html',context)


def Monthly_Deduction_Main_and_Shop_Merger_Load_Shop_Preview_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"

	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	member=Members.objects.get(ippis_no=pk)

	records=MonthlyShopdeductionList.objects.filter(transaction_period=transaction_period,member__ippis_no=pk)
	total_deductions=0
	deduction_sum=MonthlyShopdeductionList.objects.filter(transaction_period=transaction_period,member__ippis_no=pk).aggregate(total_amount=Sum('amount'))
	total_deductions=deduction_sum['total_amount']

	context={
	'records':records,
	'member':member,
	'transaction_period':transaction_period,
	'total_deductions':total_deductions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Group_Transaction_preview.html',context)


def MonthlyJointDeductionsGenerate(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	processing_status='UNPROCESSED'
	transaction_status='UNTREATED'

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction_status1='TREATED'
	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)

	processed_by=CustomUser.objects.get(id=request.user.id)

	tdate=get_current_date(now)

	records=MonthlyJointDeductionList.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,status=transaction_status).order_by('member__member_id').values_list('member__member_id','member__file_no','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no').distinct()
	if not records:
		messages.error(request,'No Record Found')
		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(pk,)))

	if MonthlyJointDeductionGenerated.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution).exists():
		messages.error(request,'Transaction already generated')
		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Load',args=(salary_institution.pk,)))

	members_array = []
	for record in records:
		queryset=  MonthlyJointDeductionList.objects.filter(member__member_id=record[0],salary_institution=salary_institution,transaction_period=transaction_period).aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		members_array.append((record[0][13:],record[2] + " " + record[3]+ " " + record[4],record[1],record[5],total_amount,record[0]))

	if request.method == 'POST':
		for record in records:
			member = Members.objects.get(member_id=record[0])
			queryset=  MonthlyJointDeductionList.objects.filter(member__member_id=record[0],salary_institution=salary_institution,transaction_period=transaction_period).aggregate(total_cash=Sum('amount'))
			total_amount=queryset['total_cash']

			MonthlyJointDeductionGenerated(member=member,
											transaction_period=transaction_period,
											amount=total_amount,
											processed_by=processed_by.username,
											salary_institution=salary_institution,
											status=transaction_status,
											processing_status=processing_status,
											tdate=tdate
											).save()
		MonthlyJointDeductionList.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,status=transaction_status).update(status=transaction_status1)
		MonthlyJointDeductionGeneratedTransactions.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,transaction_status=transaction_status).update(transaction_status=transaction_status1)

		return HttpResponseRedirect(reverse('Monthly_Deduction_Main_and_Shop_Merger_Institution_load'))

	context={
	'members_array':members_array,
	'records':records,
	'transaction_period':transaction_period,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'salary_institution':salary_institution,
	}
	return render(request,'deskofficer_templates/MonthlyJointDeductionsGenerate.html',context)


def MonthlyJointDeductionsGenerateDetails(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)
	member=Members.objects.get(ippis_no=member_pk)

	records=MonthlyJointDeductionList.objects.filter(member=member,salary_institution=salary_institution,transaction_period=transaction_period).order_by('transaction')
	if not records:
		messages.error(request,'No Record Found')
		return HttpResponseRedirect(reverse('MonthlyJointDeductionsGenerate',args=(pk,)))


	context={
	'member':member,
	'records':records,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'salary_institution':salary_institution,
	}
	return render(request,'deskofficer_templates/MonthlyJointDeductionsGenerateDetails.html',context)



def Monthly_Deduction_excel_Export_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	# 'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_excel_Export_Institution_Load.html',context)


def Monthly_Deduction_excel_Export_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	records=MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__coop_no')

	button_enabled=True
	if records.count()==0:
		button_enabled=False

	context={
	'transaction_period':transaction_period,
	'records':records,
	'pk':pk,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'button_enabled':button_enabled,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_excel_Export_load.html',context)


def Monthly_Deduction_excel_Export_Details(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	record=MonthlyJointDeductionGenerated.objects.get(id=member_pk)

	record_array=[]
	grand_total=0
	queryset=MonthlyDeductionList.objects.filter(member=record.member,transaction_period=transaction_period,salary_institution=salary_institution)
	for item in queryset:
		record_array.append((item.transaction.name,item.account_number,item.amount))
		grand_total=grand_total + float(item.amount)

	queryset=MonthlyShopdeductionList.objects.filter(member=record.member,transaction_period=transaction_period,salary_institution=salary_institution)

	for item in queryset:
		record_array.append((item.transaction.name,item.account_number,item.amount))
		grand_total=grand_total + float(item.amount)

	context={
	'transaction_period':transaction_period,
	'record':record,
	'record_array':record_array,
	'grand_total':grand_total,
	'pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Monthly_Deduction_excel_Export_Details.html',context)



def export_monthly_deductions_xls(request,pk):
	salary_institution=SalaryInstitution.objects.get(id=pk)

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="deductions.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Member ID', 'File No', 'IPPIS No', 'Name','Amount']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	rows = MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).values_list('member__coop_no','member__file_no','member__ippis_no','member__full_name', 'amount').order_by('member__coop_no')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response




def Monthly_Deductions_Transaction_Period_Institution_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = Monthly_Deductions_Transaction_Period_Institution_load_Form(request.POST or None)
	if request.method == 'POST':
		transaction_period_id=request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)


		salary_institution_id=request.POST.get('salary_institution')
		# salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

		return HttpResponseRedirect(reverse('Monthly_Deductions_Transaction_Summary_Load',args=(transaction_period,salary_institution_id)))
	
	form.fields['transaction_period'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Transaction_Period_Institution_load.html',context)



def Monthly_Deductions_Transaction_Summary_Load(request,period_pk,salary_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=salary_pk)
	records=MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_pk,transaction_period=period_pk).order_by('member__admin__last_name','member__admin__first_name')
	

	context={
	'records':records,
	'salary_institution':salary_institution,
	'transaction_period':period_pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Transaction_Summary_Load.html',context)



def Monthly_Deductions_Transaction_Summary_Detail_Load(request,pk,period_pk,salary_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	salary_institution=SalaryInstitution.objects.get(id=salary_pk)
	records=MonthlyJointDeductionList.objects.filter(member=member,salary_institution=salary_pk,transaction_period=period_pk).order_by('member__admin__last_name','member__admin__first_name')
	

	context={
	'member':member,
	'records':records,
	'salary_institution':salary_institution,
	'transaction_period':period_pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Transaction_Summary_Detail_Load.html',context)


def Monthly_Deductions_Transaction_Summary_Detail_Branch_Details(request,pk,period_pk,salary_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	salary_institution=SalaryInstitution.objects.get(id=salary_pk)
	records=MonthlyDeductionList.objects.filter(member=member,salary_institution=salary_pk,transaction_period=period_pk).order_by('member__admin__last_name','member__admin__first_name')
	
	date_format = '%Y-%m-%d'


	period_pk = datetime.datetime.strptime(period_pk, date_format)
	
	context={
	'member':member,
	'records':records,
	'salary_institution':salary_institution,
	'transaction_period':get_print_date(period_pk),
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Transaction_Summary_Detail_Branch_Details.html',context)




def Monthly_Deduction_Transaction_Reverse_Institution_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Transaction_Reverse_Institution_load.html',context)


def Monthly_Deduction_Transaction_Reverse_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	trans_id=transaction_period.pk
	transaction_period= get_current_date(transaction_period.transaction_period)

	records=MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__coop_no')

	button_enabled=True
	if records.count()==0:
		button_enabled=False

	context={
	'transaction_period':transaction_period,
	'records':records,
	'trans_id':trans_id,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'button_enabled':button_enabled,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Transaction_Reverse_load.html',context)



def Monthly_Deduction_Transaction_Reverse_Process(request,salary_id,trans_id):
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	# salary_institution=SalaryInstitution.objects.get(title='GISMIS')
	transaction_period=TransactionPeriods.objects.get(id=trans_id)
	records=FailedLoanPenaltyRecords.objects.filter(transaction__member__salary_institution=salary_institution,transaction_period=transaction_period.transaction_period)

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	tdate=get_current_date(now)
	for record in records:
		# print(f'{record.transaction.loan_number} {record.transaction.member.get_full_name}')

		ledger_balance=get_ledger_balance(record.transaction.loan_number)

		new_ledger_balance=float(ledger_balance)+ float(record.penalty)
		debit=0
		credit=abs(record.penalty)
		particulars="Reverse of Penalty on loan with balance of " + str(abs(record.amount))

		penalty=credit

		post_to_ledger(record.transaction.member,
					record.transaction.transaction,
					record.transaction.loan_number,
					particulars,
					debit,
					credit,
					new_ledger_balance,
					transaction_period.transaction_period,
					"ACTIVE",
					tdate,
					processed_by
					)


	FailedLoanPenaltyRecords.objects.filter(transaction__member__salary_institution=salary_institution,transaction_period=transaction_period.transaction_period).delete()
	reset_monthly_generated_transaction(salary_institution,transaction_period.transaction_period)
	return HttpResponseRedirect(reverse('Monthly_Deduction_Transaction_Reverse_Institution_load'))


def export_norminal_roll_xls(request):
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="norminalRoll.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['File No', 'IPPIS No','Last Name', 'Fist_Name','Middle Name','Phone No' ]

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	rows = Members.objects.all().values_list('file_no','ippis_no','admin__last_name','admin__first_name', 'middle_name','phone_number')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


def export_norminal_roll_institution_xls(request,pk):
	response = HttpResponse(content_type='application/ms-excel')
	filename="ben" + ".xls"
	salary_institution=SalaryInstitution.objects.get(id=pk)

	response['Content-Disposition'] = f'attachment; filename="{salary_institution.title}_norminal_roll.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['File No', 'IPPIS No','Last Name', 'First_Name','Middle Name','Phone No' ]

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	rows = Members.objects.filter(salary_institution=salary_institution).values_list('file_no','ippis_no','admin__last_name','admin__first_name', 'middle_name','phone_number')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


def Monthly_Account_deduction_Excel_import_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Account_deduction_Excel_import_Institution_Load.html',context)


def upload_AccountDeductionsResource(request,pk):
	tdate=get_current_date(now)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	transaction_status='UNTREATED'
	salary_institution=SalaryInstitution.objects.get(id=pk)

	if request.method == 'POST':
		if  AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).exists():
			messages.error(request,'Account Deduction for this Period Already Imported')
			return HttpResponseRedirect(reverse('upload_AccountDeductionsResource',args=(pk,)))


		account_deduction_resource = AccountDeductionsResource()
		dataset = Dataset()
		new_account_deductions = request.FILES['myfile']

		if not new_account_deductions.name.endswith('xls'):
			messages.error(request,'Wrong format')
			return HttpResponseRedirect(reverse('upload_AccountDeductionsResource',args=(pk,)))

		imported_data = dataset.load(new_account_deductions.read(),format='xls')
		for data in imported_data:
			value = AccountDeductions(tdate=tdate,salary_institution=salary_institution,
					transaction_period=transaction_period,
					ippis_no=data[0],
					name=data[1],
					amount=data[2],
					transaction_status=transaction_status,
				)
			value.save()

	context={
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/upload.html',context)


def Monthly_Account_deduction_Processing_Institution_Load(request):
	form = Monthly_Account_deduction_Processing_Institution_Load_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"

	items=SalaryInstitution.objects.all()

	context={

	'form':form,
	'items':items,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Account_deduction_Processing_Institution_Load.html',context)



def Monthly_Account_deduction_Processing_Preview(request):
	transaction_period_id=request.POST.get('transaction_period')
	transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
	transaction_period=get_current_date(transaction_period.transaction_period)

	salary_institution_id = request.POST.get('salary_institution')
	salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	transaction_status='UNTREATED'
	status="ACTIVE"
	# AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).update(transaction_status='UNTREATED')
	records=AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction_status=transaction_status)

	if not records:
		messages.error(request,'No record found')
		return HttpResponseRedirect(reverse('Monthly_Account_deduction_Processing_Institution_Load'))

	context={
	'records':records,
	'transaction_period':transaction_period,
	'pk':salary_institution_id,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Account_deduction_Processing_Preview.html',context)


def Monthly_Account_deduction_Process(request,pk,trans_id):
	tdate=get_current_date(now)
	transaction_status='TREATED'
	status="ACTIVE"
	transaction_status1='UNTREATED'
	
	# return HttpResponse(trans_id)
	transaction_period=trans_id
	# transaction_period=get_current_date(transaction_period)

	salary_institution=SalaryInstitution.objects.get(id=pk)

	# AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).update(transaction_status='UNTREATED')
	# NonMemberAccountDeductions.objects.filter().delete()
	# return HttpResponse("UUUSUSUSU")
	
	queryset=AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period)
	for item in queryset:
		if len(item.ippis_no)>6:
			AccountDeductions.objects.filter(id=item.pk).update(ippis_no=str(item.ippis_no)[:-2])
	
	# return HttpResponse('OPPPOPO')

	records=AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period)
	# k=0
	# x=0
	for record in records:
		
		if MonthlyJointDeductionGenerated.objects.filter(member__ippis_no=record.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).exists():
			# k=k+1
			coop_amount=MonthlyJointDeductionGenerated.objects.get(member__ippis_no=record.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period)
			record_update=MonthlyJointDeductionGenerated.objects.filter(member__ippis_no=record.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=record.amount,balance=float(record.amount)-float(coop_amount.amount))
		else:
			# x=x+1
			record=NonMemberAccountDeductions(transaction_status=transaction_status1,tdate=tdate,salary_institution=salary_institution,transaction_period=transaction_period,ippis_no=record.ippis_no,name=record.name,amount=record.amount)
			record.save()
	# return HttpResponse(f'{x} for non-member and {k} for members')
	record_update=AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).update(transaction_status=transaction_status)
	return HttpResponseRedirect(reverse('Monthly_Account_deduction_Processing_Institution_Load'))



def Monthly_Account_Main_and_Shop_Deductions_Separations(request):
	tdate=get_current_date(now)

	transaction_status="UNTREATED"
	transaction_status1="TREATED"

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=deduction_ledger_posting_form(request.POST or None)

	records=[]
	process_status=False

	if request.method=="POST" and 'btnprocess' in request.POST:
	
		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)

		status='UNTREATED'
		status1='TREATED'
		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)
		processing_status='PROCESSED'


		records = MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,status=status)


		for record in records:

			total_amount_deducted=record.amount_deducted
			others_amount=record.amount_deducted

			transaction="SHOP"
		
			if MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).exists():
				item1=MonthlyJointDeductionList.objects.get(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period)

				if float(item1.amount) < float(total_amount_deducted):

					others_amount=float(total_amount_deducted) -float(item1.amount)

					MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=item1.amount)

					MonthlyShopdeductionListGenerated.objects.filter(member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(account_amount=item1.amount)

				elif float(item1.amount) == float(total_amount_deducted):

					others_amount=float(total_amount_deducted) -float(item1.amount)

					MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=item1.amount)

					MonthlyShopdeductionListGenerated.objects.filter(member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(account_amount=item1.amount)

				elif float(item1.amount) > float(total_amount_deducted):
					balance=float(item1.amount)-float(total_amount_deducted)
					others_amount=0
					MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=total_amount_deducted,balance=balance)

					MonthlyShopdeductionListGenerated.objects.filter(member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(account_amount=total_amount_deducted,balance=balance)

			transaction="MAIN"
			# return HttpResponse(MonthlyJointDeductionList.objects.filter(transaction=transaction,member__salary_institution=salary_institution,transaction_period=transaction_period).count())
			if MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).exists():



				item1=MonthlyJointDeductionList.objects.get(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period)

				if float(item1.amount) < float(others_amount):

					over_deduction_amount=float(item1.amount)-float(others_amount)

					MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=item1.amount)

					MonthlyDeductionListGenerated.objects.filter(member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=item1.amount)

				elif float(item1.amount) == float(others_amount):

					over_deduction_amount=0

					MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=item1.amount)

					MonthlyDeductionListGenerated.objects.filter(member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=item1.amount)

				elif float(item1.amount) > float(others_amount):
					balance=float(others_amount)-float(item1.amount)
					over_deduction_amount=0
					MonthlyJointDeductionList.objects.filter(transaction=transaction,member__ippis_no=record.member.ippis_no,member__salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=others_amount,balance=balance)

					MonthlyDeductionListGenerated.objects.filter(member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=others_amount,balance=balance)

		MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,status=status).update(status=status1)


		return HttpResponseRedirect(reverse('Monthly_Account_Main_and_Shop_Deductions_Separations'))


	if request.method=="POST" and 'btnview' in request.POST:

		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)


		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

		records=MonthlyJointDeductionGenerated.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,status=transaction_status)


		if records.count()>0:
			process_status=True

	context={

	'form':form,
	'records':records,
	'process_status':process_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/Monthly_Account_Main_and_Shop_Deductions_Separations.html',context)


def Monthly_Main_Account_deductions_Separations(request):
	tdate=get_current_date(now)
	processing_status = 'UNPROCESSED'
	processing_status1 = 'PROCESSED'
	transaction_status="UNTREATED"
	transaction_status1="TREATED"

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=deduction_ledger_posting_form(request.POST or None)

	records=[]
	process_status=False

	if request.method=="POST" and 'btnprocess' in request.POST:

		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)


		transactions=TransactionTypes.objects.filter(~Q(source__title="GENERAL") | ~Q(source__title="UTILITIES")).order_by('rank')

		records=MonthlyDeductionListGenerated.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,processing_status=processing_status)


		for record in records:

			total_amount_deducted=record.amount_deducted

			for item in transactions:
				if MonthlyDeductionList.objects.filter(transaction=item,member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).exists():
					
					queryset=MonthlyDeductionList.objects.filter(transaction=item,member__ippis_no=record.member.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).order_by('account_number')
					for query in queryset:

						item1=MonthlyDeductionList.objects.get(id=query.pk)

						if float(total_amount_deducted) <= float(item1.amount):
							item1.amount_deducted=total_amount_deducted
							item1.balance=float(item1.amount)-float(total_amount_deducted)
							item1.save()
							break
						elif float(total_amount_deducted) > float(item1.amount):
							item1.amount_deducted=item1.amount
							item1.balance=0
							total_amount_deducted=float(total_amount_deducted)-float(item1.amount)
							item1.save()



		MonthlyDeductionListGenerated.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,processing_status=processing_status).update(processing_status=processing_status1)

		return HttpResponseRedirect(reverse('Monthly_Main_Account_deductions_Separations'))


	if request.method=="POST" and 'btnview' in request.POST:
		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)


		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

		records=MonthlyDeductionListGenerated.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,processing_status=processing_status)


		if records.count()>0:
			process_status=True


	context={

	'form':form,
	'records':records,
	'process_status':process_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/Monthly_Main_Account_deductions_Separations.html',context)




def monthly_wrongful_deduction_transaction_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_view_form(request.POST or None)
	records=[]
	if request.method=="POST":
		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)
		records=NonMemberAccountDeductions.objects.filter(transaction_period=transaction_period)
	context={

	'form':form,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/monthly_wrongful_deduction_transaction_period_load.html',context)



def monthly_wrongful_deduction_members_transaction_search(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=NonMemberAccountDeductions.objects.get(id=pk)
	title="Search Membership for Cash Transafer"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/monthly_wrongful_deduction_members_transaction_search.html',{'form':form,'task_array':task_array,
		'record':record,
	'task_enabler_array':task_enabler_array,
	'title':title,
	'default_password':default_password,})


def monthly_wrongful_deduction_members_transaction_List_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=NonMemberAccountDeductions.objects.get(id=pk)
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('monthly_wrongful_deduction_members_transaction_search',args=(pk,)))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/monthly_wrongful_deduction_members_transaction_List_load.html',context)




def monthly_wrongful_deduction_members_transaction_load(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	form=monthly_wrongful_deduction_members_transaction_load_Form(request.POST or None)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	record=NonMemberAccountDeductions.objects.get(id=pk)
	tdate=get_current_date(now)
	member=Members.objects.get(id=member_pk)
	if request.method=="POST":
		record=WrongfulDeductionTransfer(transaction_period=record.transaction_period,tdate=tdate,processed_by=processed_by,source=record,member=member,amount=record.amount,amount_posted=0,balance=record.amount)
		record.save()
		NonMemberAccountDeductions.objects.filter(id=pk).update(transaction_status='TREATED')
		return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load',args=(record.pk,)))

	form.fields['source'].initial=f'{record.name} => {record.ippis_no}'
	form.fields['recipient'].initial=f'{member.get_full_name} => {member.ippis_no}'
	form.fields['amount'].initial=record.amount
	context={
	'record':record,
	'member':member,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/monthly_wrongful_deduction_members_transaction_load.html',context)


def Monthly_Deductions_IncomingTransactions(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	context={
	
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_IncomingTransactions.html',context)


def Monthly_Deductions_Incoming_Transactions_Complete(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	records = WrongfulDeductionTransfer.objects.filter(Q(transaction_status='UNTREATED') & Q(balance__gt=0))
	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Incoming_Transactions_Complete.html',context)


def Monthly_Deductions_Cash_Transfer_Source_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	record = WrongfulDeductionTransfer.objects.get(id=pk)
	context={
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Cash_Transfer_Source_Load.html',context)


def Monthly_Deductions_Cash_Transfer_Source_Load_Savings(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	record = WrongfulDeductionTransfer.objects.get(id=pk)
	records=MembersAccountsDomain.objects.filter(member=record.member,transaction__source__title='SAVINGS')
	queryset=MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,transaction__source__title='SAVINGS')
	context={
	'queryset':queryset,
	'record':record,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Cash_Transfer_Source_Load_Savings.html',context)


def Monthly_Deductions_Cash_Transfer_Source_Load_Savings_Update(request,pk,account_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	form=Monthly_Deductions_Cash_Transfer_Source_Load_Savings_Update_Form(request.POST or None)
	record = WrongfulDeductionTransfer.objects.get(id=pk)
	saving=MembersAccountsDomain.objects.get(account_number=account_id)
	
	repayment=0
	amount_generated=0
	if MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,account_number=account_id).exists():
		queryset=MonthlyDeductionList.objects.get(member=record.member,transaction_period=record.transaction_period,account_number=account_id)
		repayment=queryset.amount

	elif StandingOrderAccounts.objects.filter(transaction__account_number=account_id).exists():
		queryset  =StandingOrderAccounts.objects.get(transaction__account_number=account_id)
		amount_generated=queryset.amount
		repayment=queryset.amount

	ledger_balance=get_ledger_balance(account_id)

	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if request.method=="POST":
		
		if MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,account_number=account_id,rectified='YES').exists():
			messages.error(request,'This transaction is already treated')
			return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load_Savings_Update',args=(pk,account_id,)))


		repayment=request.POST.get('repayment')

		if not repayment or float(repayment)<=0:
			messages.error(request,'Amount cannot be zero(0)')
			return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load_Savings_Update',args=(pk,account_id,)))
		
		if float(repayment)>float(record.balance):
			repayment=record.balance
	
		credit=repayment
		debit=0
		balance=  float(ledger_balance)+float(repayment)
		
		particulars = f'Monthly Contribution for the Period of {record.transaction_period}'
	
		post_to_ledger(saving.member,
						saving.transaction,
						account_id,
						particulars,
						debit,
						credit,
						balance,
						record.source.transaction_period,
						'ACTIVE',
						tdate,processed_by
						)

		if MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,account_number=account_id).exists():
			queryset=MonthlyDeductionList.objects.get(member=record.member,transaction_period=record.transaction_period,account_number=account_id)
	
			queryset.amount_deducted=repayment
			queryset.balance=float(queryset.amount)-float(repayment)
			queryset.rectified='YES'
			queryset.save()
		else:
			MonthlyDeductionList(member=record.member,
								transaction=saving.transaction,
								transaction_period=record.transaction_period,
								account_number=account_id,
								amount=amount_generated,
								amount_deducted=credit,
								balance=float(amount_generated)-float(repayment),
								salary_institution=saving.member.salary_institution,
								processed_by=processed_by,
								tdate=tdate,
								processing_status='PROCESSED',
								status='TREATED',
								rectified='YES',
								).save()
		# return HttpResponse("ISISISISISISISI")

		record.amount_posted=float(record.amount_posted)+float(credit)
		record.balance=float(record.balance)-float(credit)
		record.save()

		if (float(record.amount_posted)+float(credit))<=0:
			record.status='TREATED'
			record.save()
			return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load',args=(record.pk,)))
		return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load_Savings',args=(record.pk,)))

	form.fields['description'].initial = saving.transaction.name
	form.fields['balance'].initial = ledger_balance
	form.fields['repayment'].initial = repayment
	form.fields['amount'].initial = record.balance
	context={
	'form':form,
	'record':record,
	'ledger_balance':ledger_balance,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Cash_Transfer_Source_Load_Savings_Update.html',context)



def Monthly_Deductions_Cash_Transfer_Source_Load_Loan(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	record = WrongfulDeductionTransfer.objects.get(id=pk)
	records=LoansRepaymentBase.objects.filter(Q(member=record.member) & Q(balance__lt=0))
	queryset=MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,transaction__source__title='LOAN')
	context={
	'record':record,
	'records':records,
	'queryset':queryset,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Cash_Transfer_Source_Load_Loan.html',context)



def Monthly_Deductions_Cash_Transfer_Source_Load_Loan_Update(request,pk,account_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	form=Monthly_Deductions_Cash_Transfer_Source_Load_Loan_Update_Form(request.POST or None)
	record = WrongfulDeductionTransfer.objects.get(id=pk)
	loan=LoansRepaymentBase.objects.get(loan_number=account_id)
	amount_generated=loan.repayment
	ledger_balance=get_ledger_balance(account_id)

	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if request.method=="POST":
		if MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,account_number=account_id,rectified='YES').exists():
			messages.error(request,'This transaction is already treated')
			return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load_Loan_Update',args=(pk,account_id,)))


		repayment=request.POST.get('repayment')

		if not repayment or float(repayment)<=0:
			messages.error(request,'Amount cannot be zero(0)')
			return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load_Loan_Update',args=(pk,account_id,)))
		
		if float(repayment)>float(record.balance):
			repayment=record.balance
	
		credit=repayment
		debit=0
		balance=  float(ledger_balance)+float(repayment)
		
		particulars = f'Loan Repayment for the Period of {record.source.name}({record.source.ippis_no})  AS AT ' + str(record.source.transaction_period.strftime("%d %B, %Y"))
	
		post_to_ledger(loan.member,
						loan.transaction,
						account_id,
						particulars,
						debit,
						credit,
						balance,
						record.source.transaction_period,
						'ACTIVE',
						tdate,processed_by
						)

		
		if MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period,account_number=account_id).exists():
			queryset=MonthlyDeductionList.objects.get(member=record.member,transaction_period=record.transaction_period,account_number=account_id)
	
			queryset.amount_deducted=repayment
			queryset.balance=float(queryset.amount)-float(repayment)
			queryset.rectified='YES'
			queryset.save()
		else:
			MonthlyDeductionList(member=record.member,
								transaction=loan.transaction,
								transaction_period=record.transaction_period,
								account_number=account_id,
								amount=amount_generated,
								amount_deducted=credit,
								balance=float(amount_generated)-float(repayment),
								salary_institution=loan.member.salary_institution,
								processed_by=processed_by,
								tdate=tdate,
								processing_status='PROCESSED',
								status='TREATED',
								rectified='YES',
								).save()

		loan.amount_paid=float(loan.amount_paid)+float(credit)
		loan.balance=float(loan.balance)+float(credit)
		loan.save()

		if float(loan.balance)>=0:
			record_cleared=LoansCleared(loan=loan,
											processed_by=processed_by,
											status='UNTREATED',
											tdate=tdate)
			record_cleared.save()

		
			PersonalLedger.objects.filter(member=loan.member,transaction=loan.transaction,account_number=account_id).update(status='INACTIVE')


		
		record.amount_posted=float(record.amount_posted)+float(repayment)
		record.balance=float(record.balance)-float(credit)
		record.save()

		if (float(record.amount_posted)+float(repayment))<=0:
			record.status='TREATED'
			record.save()
			return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load',args=(record.pk,)))
		return HttpResponseRedirect(reverse('Monthly_Deductions_Cash_Transfer_Source_Load_Loan',args=(record.pk,)))

	form.fields['description'].initial = loan.transaction.name
	form.fields['loan_number'].initial = loan.loan_number
	form.fields['balance'].initial = abs(ledger_balance)
	form.fields['amount'].initial = record.balance
	form.fields['repayment'].initial = loan.repayment
	context={
	'form':form,
	'record':record,
	'ledger_balance':ledger_balance,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Cash_Transfer_Source_Load_Loan_Update.html',context)



def Monthly_Overdeduction_transactions(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_view_form(request.POST or None)
	processing_status="UNPROCESSED"
	records=[]
	
	if request.method=="POST":
		transaction_period_id=request.POST.get('transaction_period')
		

		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)

		records=MonthlyJointDeductionGenerated.objects.filter(transaction_period=transaction_period,processing_status=processing_status).filter(Q(balance__gt=0))



	context={

	'form':form,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Overdeduction_transactions.html',context)



def upload_AuxillaryDeductionsResource(request,pk):
	tdate=get_current_date(now)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	# AuxillaryDeductions.objects.all().delete()
	# return HttpResponse("OK")
	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	transaction_status='UNTREATED'
	salary_institution=SalaryInstitution.objects.get(id=pk)

	if request.method == 'POST':
		if  AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).exists():
			messages.error(request,'Account Deduction for this Period Already Imported')
			return HttpResponseRedirect(reverse('upload_AuxillaryDeductionsResource',args=(pk,)))


		account_deduction_resource = AuxillaryDeductionsResource()
		dataset = Dataset()
		new_account_deductions = request.FILES['myfile']

		if not new_account_deductions.name.endswith('xls'):
			messages.error(request,'Wrong format')
			return HttpResponseRedirect(reverse('upload_AuxillaryDeductionsResource',args=(pk,)))

		imported_data = dataset.load(new_account_deductions.read(),format='xls')
		for data in imported_data:
			value = AuxillaryDeductions(tdate=tdate,
					salary_institution=salary_institution,
					transaction_period=transaction_period,
					ippis_no=str(data[0]),
					name=data[1],
					amount=data[2],
					coop_no=(str(data[3])[:-2]).zfill(5),
					transaction_status=transaction_status,
				)
			value.save()

	context={
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/upload.html',context)




def upload_AccountDeductionsResource(request,pk):
	tdate=get_current_date(now)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)

	transaction_status='UNTREATED'
	salary_institution=SalaryInstitution.objects.get(id=pk)

	if request.method == 'POST':
		if  AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).exists():
			messages.error(request,'Account Deduction for this Period Already Imported')
			return HttpResponseRedirect(reverse('upload_AccountDeductionsResource',args=(pk,)))


		account_deduction_resource = AccountDeductionsResource()
		dataset = Dataset()
		new_account_deductions = request.FILES['myfile']

		if not new_account_deductions.name.endswith('xls'):
			messages.error(request,'Wrong format')
			return HttpResponseRedirect(reverse('upload_AccountDeductionsResource',args=(pk,)))

		imported_data = dataset.load(new_account_deductions.read(),format='xls')
		for data in imported_data:
			value = AccountDeductions(tdate=tdate,salary_institution=salary_institution,
					transaction_period=transaction_period,
					ippis_no=data[0],
					name=data[1],
					amount=data[2],
					transaction_status=transaction_status,
				)
			value.save()

	context={
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/upload.html',context)




def Monthly_Deduction_Generated_Update_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Generated_Update_Institution_Load.html',context)


def Monthly_Deduction_Generated_Update_Transaction_period_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_form(request.POST or None)
	salary_institution=SalaryInstitution.objects.get(id=pk)
	records=[]
	transaction_period=get_current_date(now)
	button_show=False
	
	if request.method == 'POST':
		transaction_period_id = request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)

		# records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period)
		records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__coop_no')
		if records:
			button_show=True

	form.fields['transaction_period'].initial=get_current_date(now)
	context={
	'transaction_period':transaction_period,
	'records':records,
	'button_show':button_show,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Generated_Update_Transaction_period_Load.html',context)


def Monthly_Auxillary_Imported_Deduction_View_List_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Imported_Deduction_View_List_Institution_Load.html',context)


def Monthly_Auxillary_Imported_Deduction_View_List_Transaction_period_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_form(request.POST or None)
	salary_institution=SalaryInstitution.objects.get(id=pk)
	records=[]
	transaction_period=get_current_date(now)

	if request.method == 'POST':
		transaction_period_id = request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)

		# records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period)
		records=AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('transaction_status','coop_no')


	form.fields['transaction_period'].initial=get_current_date(now)
	context={
	'transaction_period':transaction_period,
	'records':records,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}


	return render(request,'deskofficer_templates/Monthly_Auxillary_Imported_Deduction_View_List_Transaction_period_Load.html',context)





def Monthly_Auxillary_Deduction_Generated_Merger_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Merger_Institution_Load.html',context)


def Monthly_Auxillary_Deduction_Generated_Merger_Transaction_period_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_form(request.POST or None)
	salary_institution=SalaryInstitution.objects.get(id=pk)
	records=[]
	transaction_period=get_current_date(now)
	button_show=False
	if request.method == 'POST':
		transaction_period_id = request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)


		records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__coop_no')
		if records:
			button_show=True

	form.fields['transaction_period'].initial=get_current_date(now)
	context={
	'transaction_period':transaction_period,
	'records':records,
	'button_show':button_show,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}


	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Merger_Transaction_period_Load.html',context)




def AuxillaryMerger(request,salary_id,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_form(request.POST or None)

	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	transaction_period=trans_id

	# AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).update(transaction_status='UNTREATED')
	query= AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period)
	k=0
	for item in query:
		if len(item.ippis_no) >6:
			k=k+1
			ippis = str(item.ippis_no)[:-2]
			item.ippis_no=ippis
			item.save()
			# AuxillaryDeductions.objects.filter(id=item.pk).update(ippis_no=ippis_no)
			# print(ippis)

	# return HttpResponse(k)
	records=AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction_status='UNTREATED')

	for record in records:
		if MonthlyDeductionListGenerated.objects.filter(member__ippis_no=record.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).exists():
			MonthlyDeductionListGenerated.objects.filter(member__ippis_no=record.ippis_no,salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=record.amount,balance=F('amount')- record.amount,aux_amount=record.amount)
			record.transaction_status='TREATED'
			record.save()

	records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__coop_no')
	record_treated=AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction_status='TREATED')
	record_untreated=AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period,transaction_status='UNTREATED')

	# print(f'Treated Record {record_treated.count()}')
	# print(f'Untreated Record {record_untreated.count()}')


	form.fields['transaction_period'].initial=transaction_period
	context={
	'transaction_period':transaction_period,
	'records':records,
	'button_show':True,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Merger_Transaction_period_Load.html',context)



def Monthly_Auxillary_Deduction_Generated_Update_Transaction_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Update_Transaction_Institution_Load.html',context)



def Monthly_Auxillary_Deduction_Generated_Update_Transaction_period_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_form(request.POST or None)
	salary_institution=SalaryInstitution.objects.get(id=pk)
	records=[]
	transaction_period=get_current_date(now)
	button_show=False
	if request.method == 'POST':
		status=request.POST.get('status')
		transaction_period_id = request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)

		return HttpResponseRedirect(reverse('Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Load',args=(transaction_period,salary_institution.pk,status)))

	form.fields['transaction_period'].initial=get_current_date(now)
	context={
	'salary_institution':salary_institution,
	'transaction_period':transaction_period,
	'records':records,
	'button_show':button_show,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}


	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Update_Transaction_period_Load.html',context)


def Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Load(request,trans_id,salary_id,status):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	# return HttpResponse(trans_id)
	transaction_period=trans_id
	button_show=False
	records=[]
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	if status=='ALL RECORDS':
		records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__admin__last_name')
	
	elif status == 'GREATER':
		records=MonthlyDeductionListGenerated.objects.filter(Q(salary_institution=salary_institution,transaction_period=transaction_period) & Q(balance__gt=0) & Q(rectified='NO')).order_by('member__admin__last_name')
	
	elif status == 'LESS':
		records=MonthlyDeductionListGenerated.objects.filter(Q(salary_institution=salary_institution,transaction_period=transaction_period) & Q(balance__lt=0)  & Q(rectified='NO')).order_by('member__admin__last_name')


	if records:
		button_show=True

	context={
	'transaction_period':transaction_period,
	'status':status,
	'records':records,
	'button_show':button_show,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'status':status,
	'salary_id':salary_id,
	'trans_id':trans_id,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Load.html',context)



def Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Load_Export(request,trans_id,salary_id,status):
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="Monthly_Deduction_Analysis.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Member ID', 'IPPIS No', 'Name','Amount','Amount Deducted','Difference']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	rows=[]
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	if status=='ALL RECORDS':
		rows=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=trans_id).values_list('member__coop_no','member__ippis_no','member__full_name', 'amount', 'amount_deducted','balance').order_by('member__coop_no')
	
	elif status == 'GREATER':
		rows=MonthlyDeductionListGenerated.objects.filter(Q(salary_institution=salary_institution,transaction_period=trans_id) & Q(balance__gt=0) & Q(rectified='NO')).values_list('member__coop_no','member__ippis_no','member__full_name', 'amount', 'amount_deducted','balance').order_by('member__coop_no')
	
	elif status == 'LESS':
		rows=MonthlyDeductionListGenerated.objects.filter(Q(salary_institution=salary_institution,transaction_period=trans_id) & Q(balance__lt=0)  & Q(rectified='NO')).values_list('member__coop_no','member__ippis_no','member__full_name', 'amount', 'amount_deducted','balance').order_by('member__coop_no')



	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


def Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Rectified(request,pk,trans_id,salary_id,status):
	record=MonthlyDeductionListGenerated.objects.filter(id=pk).update(rectified='YES')
	return HttpResponseRedirect(reverse('Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Load',args=(trans_id,salary_id,status,)))


	
def Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Delete(request,pk,trans_id,salary_id,status):
	return HttpResponse("OOSJSJSJ")
	record=MonthlyDeductionListGenerated.objects.get(id=pk)
	MonthlyDeductionList.objects.filter(member=record.member).delete()
	MonthlyDeductionListGenerated.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('Monthly_Auxillary_Deduction_Generated_Update_Transaction_List_Load',args=(trans_id,salary_id,status,)))




def Monthly_Deduction_Generated_Update_Details_load(request, pk, status):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=MonthlyDeductionListGenerated.objects.get(id=pk)

	salary_institution=member.member.salary_institution
	transaction_period=member.transaction_period

	records=MonthlyDeductionList.objects.filter(member=member.member,transaction_period=transaction_period)
	# records.delete()
	# return HttpResponse("OK")
	queryset1=MonthlyDeductionList.objects.filter(member=member.member,transaction_period=transaction_period)
	for item in queryset1:
		amount=item.amount
		item.amount=abs(amount)
		item.save()

	queryset=  MonthlyDeductionList.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,member=member.member).aggregate(total_cash=Sum('amount'))
	total_amount=queryset['total_cash']

	queryset1=  StandingOrderAccounts.objects.filter(transaction__member=member.member).aggregate(total_cash=Sum('amount'))
	total_schedule=queryset1['total_cash']
	if not total_schedule:
		total_schedule=0

	record_array=[]
	for item in records:
		standing_order_amount=0
		standing_order=[]
		if StandingOrderAccounts.objects.filter(transaction__account_number=item.account_number).exists():
			standing_order=StandingOrderAccounts.objects.get(transaction__account_number=item.account_number)
			standing_order_amount=abs(standing_order.amount)

		if PersonalLedger.objects.filter(account_number=item.account_number).exists():
			ledger=PersonalLedger.objects.filter(account_number=item.account_number).last()

			if item.transaction.source.title == 'SAVINGS':
				record_array.append((ledger.transaction.name,ledger.account_number,abs(ledger.balance),standing_order_amount,item.amount,item.pk))
				
			else:
				if LoansRepaymentBase.objects.filter(loan_number=ledger.account_number).exists():
					loan_repay = LoansRepaymentBase.objects.get(loan_number=ledger.account_number)
					
					total_schedule=float(total_schedule)+float(abs(loan_repay.repayment))

					record_array.append((ledger.transaction.name,ledger.account_number,abs(ledger.balance),abs(loan_repay.repayment),abs(item.amount),item.pk))
		else:
			if standing_order:
				record_array.append((standing_order.transaction.transaction.name,standing_order.transaction.account_number,abs(standing_order.amount),abs(standing_order_amount),item.amount,item.pk))
	
	context={
	'total_schedule':total_schedule,
	'total_amount':total_amount,
	'record_array':record_array,
	'status':status,
	'member':member,
	'member_pk':pk,
	'transaction_period':transaction_period,
	'records':records,
	'pk':pk,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Generated_Update_Details_load.html',context)





def Monthly_Deduction_Generated_Update_Details_Process(request,pk,member_pk,status):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Monthly_Deduction_Generated_Update_Details_Process_Form(request.POST or None)
	
	record=MonthlyDeductionList.objects.get(id=pk)
	member=record.member
	transaction_period=record.transaction_period

	transaction_period=record.transaction_period
	salary_institution=record.salary_institution

	if request.method=='POST':
		amount=request.POST.get('amount')
		chk_update=request.POST.get('chk_update')
		if chk_update:
			if StandingOrderAccounts.objects.filter(transaction__transaction=record.transaction,transaction__member=member).exists():
				StandingOrderAccounts.objects.filter(transaction__transaction=record.transaction,transaction__member=member).update(amount=amount)
			
			if LoansRepaymentBase.objects.filter(loan_number=record.account_number).exists():
				LoansRepaymentBase.objects.filter(loan_number=record.account_number).update(repayment=amount)
		
		record.amount=amount
		record.save()
		queryset=  MonthlyDeductionList.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,member=member).aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']
		MonthlyDeductionListGenerated.objects.filter(member=member,transaction_period=transaction_period,salary_institution=salary_institution).update(amount=total_amount,balance=F('amount')-F('amount_deducted'))
		query=MonthlyDeductionListGenerated.objects.get(member=member,transaction_period=transaction_period,salary_institution=salary_institution)
		

		return HttpResponseRedirect(reverse('Monthly_Deduction_Generated_Update_Details_load',args=(query.pk,status)))


	form.fields['existing_amount'].initial=record.amount
	context={
	'transaction_period':transaction_period,
	'member':member,
	'member_pk':member_pk,
	'status':status,
	'record':record,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Generated_Update_Details_Process.html',context)

def Monthly_Deduction_Generated_Update_Details_Remove(request,pk):

	record=MonthlyDeductionList.objects.get(id=pk)
	member=record.member
	transaction_period=record.transaction_period
	transaction_period=record.transaction_period
	salary_institution=record.salary_institution
	record.delete()
	queryset=  MonthlyDeductionList.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,member=member).aggregate(total_cash=Sum('amount'))
	total_amount=queryset['total_cash']
	MonthlyDeductionListGenerated.objects.filter(member=member,transaction_period=transaction_period,salary_institution=salary_institution).update(amount=total_amount,balance=F('amount')-F('amount_deducted'))
	query=MonthlyDeductionListGenerated.objects.get(member=member,transaction_period=transaction_period,salary_institution=salary_institution)
	return HttpResponseRedirect(reverse('Monthly_Deduction_Generated_Update_Details_load',args=(query.pk,'LESS')))



def Monthly_Deduction_Generated_Update_Details_Add_Savings(request,pk,trans_id,salary_id, return_pk,status):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	member=Members.objects.get(id=pk)
	transaction_period=trans_id
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	records = StandingOrderAccounts.objects.filter(transaction__member=member)
	print(status)
	print("++++++++++++++++++++++++++++++++++++")
	print("++++++++++++++++++++++++++++++++++++")
	context={
	'transaction_period':transaction_period,
	'member':member,
	'status':status,
	'records':records,
	'return_pk':return_pk,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Generated_Update_Details_Add_Savings.html',context)


def Monthly_Deduction_Generated_Update_Details_Add_Savings_Select(request,pk,member_pk,trans_id,salary_id,return_pk,status):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	member=Members.objects.get(id=member_pk)
	transaction_period=trans_id
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	record = StandingOrderAccounts.objects.get(id=pk)



	if MonthlyDeductionList.objects.filter(member=member,transaction=record.transaction.transaction,transaction_period=transaction_period,salary_institution=salary_institution).exists():
		messages.error(request,'This record already exist')
		return HttpResponseRedirect(reverse('Monthly_Deduction_Generated_Update_Details_Add_Savings',args=(member_pk,trans_id,salary_institution.pk,return_pk,status)))


	MonthlyDeductionList(member=member,transaction=record.transaction.transaction,account_number=record.transaction.account_number,transaction_period=transaction_period,salary_institution=salary_institution,amount=record.amount,tdate=tdate,processed_by=processed_by).save()
	queryset=  MonthlyDeductionList.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,member=member).aggregate(total_cash=Sum('amount'))
	total_amount=queryset['total_cash']

	MonthlyDeductionListGenerated.objects.filter(member=member,transaction_period=transaction_period,salary_institution=salary_institution).update(amount=total_amount,balance=F('amount')-F('amount_deducted'))
	query=MonthlyDeductionListGenerated.objects.get(member=member,transaction_period=transaction_period,salary_institution=salary_institution)
	return HttpResponseRedirect(reverse('Monthly_Deduction_Generated_Update_Details_load',args=(return_pk,'LESS')))



def Monthly_Deduction_Generated_Update_Details_Add_Loans(request,pk,trans_id,salary_id, return_pk, status):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	member=Members.objects.get(id=pk)
	transaction_period=trans_id
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	records = LoansRepaymentBase.objects.filter(member=member,schedule_status="SCHEDULED").filter(Q(balance__lt=0))

	context={
	'transaction_period':transaction_period,
	'member':member,
	'records':records,
	'status':status,
	'return_pk':return_pk,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Deduction_Generated_Update_Details_Add_Loans.html',context)



def Monthly_Deduction_Generated_Update_Details_Add_Loans_Select(request,pk,member_pk,trans_id,salary_id,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	member=Members.objects.get(id=member_pk)
	transaction_period=trans_id
	salary_institution=SalaryInstitution.objects.get(id=salary_id)
	record = LoansRepaymentBase.objects.get(id=pk)

	# queryset=MonthlyDeductionList.objects.get(member=member,transaction=record.transaction,transaction_period=transaction_period,salary_institution=salary_institution,account_number=record.loan_number)

	# return HttpResponse(queryset.transaction_period)
	if MonthlyDeductionList.objects.filter(member=member,transaction=record.transaction,transaction_period=transaction_period,salary_institution=salary_institution,account_number=record.loan_number).exists():
		messages.error(request,'This record already exist')
		
		return HttpResponseRedirect(reverse('Monthly_Deduction_Generated_Update_Details_Add_Loans',args=(member_pk,trans_id,salary_institution.pk,return_pk)))


	MonthlyDeductionList(member=member,transaction=record.transaction,account_number=record.loan_number,transaction_period=transaction_period,salary_institution=salary_institution,amount=record.repayment,tdate=tdate,processed_by=processed_by).save()
	queryset=  MonthlyDeductionList.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,member=member).aggregate(total_cash=Sum('amount'))
	total_amount=queryset['total_cash']

	MonthlyDeductionListGenerated.objects.filter(member=member,transaction_period=transaction_period,salary_institution=salary_institution).update(amount=total_amount,balance=F('amount')-F('amount_deducted'))
	query=MonthlyDeductionListGenerated.objects.get(member=member,transaction_period=transaction_period,salary_institution=salary_institution)
	return HttpResponseRedirect(reverse('Monthly_Deduction_Generated_Update_Details_load',args=(return_pk,'LESS')))





def Monthly_Auxillary_Deduction_Generated_Export_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"
	transaction_period=TransactionPeriods.objects.get(status=status)
	transaction_period= get_current_date(transaction_period.transaction_period)
	items=SalaryInstitution.objects.all()

	context={
	'items':items,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Export_Institution_Load.html',context)


def Monthly_Auxillary_Deduction_Rectification_Reset(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status="ACTIVE"

	form=Monthly_Auxillary_Deduction_Rectification_Reset_form(request.POST or None)
	if request.method == "POST":
		transaction_period_id=request.POST.get('tdate')
		transaction_period=datetime.datetime.strptime(transaction_period_id, '%Y-%m-%d')

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)


		MonthlyDeductionList.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).update(amount_deducted=0,balance=0,repayment=0,status='UNTREATED')
		MonthlyGroupGeneratedTransactions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()
		MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()




		MonthlyJointDeductionList.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()
		MonthlyJointDeductionGeneratedTransactions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()
		MonthlyJointDeductionGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()
		
		AccountDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()
		AuxillaryDeductions.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).delete()
	

		return HttpResponseRedirect(reverse('Monthly_Auxillary_Deduction_Rectification_Reset'))
	form.fields['tdate'].initial=get_current_date(now)
	context={
	# 'items':items,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Rectification_Reset.html',context)



def Monthly_Auxillary_Deduction_Generated_Export_period_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=TransactionPeriod_form(request.POST or None)
	salary_institution=SalaryInstitution.objects.get(id=pk)
	records=[]
	transaction_period=get_current_date(now)
	button_show=False
	if request.method == 'POST':
		transaction_period_id = request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)


		records=MonthlyDeductionListGenerated.objects.filter(salary_institution=salary_institution,transaction_period=transaction_period).order_by('member__coop_no')
		button_show=False
		if records:
			button_show=True

	form.fields['transaction_period'].initial=get_current_date(now)
	context={
	'transaction_period':transaction_period,
	'records':records,
	'button_show':button_show,
	'form':form,
	'salary_institution':salary_institution,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}


	return render(request,'deskofficer_templates/Monthly_Auxillary_Deduction_Generated_Export_period_Load.html',context)




def AuxillarySeperation(request):

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="AuxillarySeperation.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Member ID', 'IPPIS No', 'Name','Amount','Amount Deducted','Difference']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	rows = MonthlyDeductionListGenerated.objects.filter(~Q(amount=F('amount_deducted'))).values_list('member__coop_no','member__ippis_no','member__full_name', 'amount', 'amount_deducted','balance').order_by('member__coop_no')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response



def Monthly_Unbalanced_transactions_Processing(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=MonthlyJointDeductionGenerated.objects.get(id=pk)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'record':record,
	}
	return render(request,'deskofficer_templates/Monthly_Unbalanced_transactions_Processing.html',context)


def Monthly_Unbalanced_transactions_Processing_Loans(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	tdate=get_current_date(now)

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	refund_status="PROCESSED"

	member=MonthlyJointDeductionGenerated.objects.get(id=pk)
	transaction_period=member.transaction_period
	accounts=LoansRepaymentBase.objects.filter(Q(member=member.member) & Q(balance__lt=0))
	status="ACTIVE"


	ledger=[]
	account_number=[]
	account_number_status=False
	submission_status=False
	if request.method == "POST" and 'btn_fetch' in request.POST:
		account_type_id = request.POST.get("account_type")
		if not account_type_id:
			messages.error(request,'No Loan Available')
			return HttpResponseRedirect(reverse('Monthly_Unbalanced_transactions_Processing_Loans',args=(pk,)))
		
		account_type=LoansRepaymentBase.objects.get(id=account_type_id)

		account_number=account_type.loan_number
		account_number_status=True

		ledger=Display_PersonalLedger_All_Records(account_number)


	if request.method == "POST" and 'btn_submit' in request.POST:

		account_type_id = request.POST.get("account_type")
		transaction=LoansRepaymentBase.objects.get(id=account_type_id)
		amount=request.POST.get('amount')

		account_number=transaction.loan_number
		if member.processing_status==refund_status:
			messages.error(request,'Already Posted')
			return HttpResponseRedirect(reverse('Monthly_Unbalanced_transactions_Processing_Loans',args=(pk,)))
		
		transaction.amount_paid=float(transaction.amount_paid)+float(amount)
		transaction.balance=float(transaction.balance)+float(amount)
		transaction.save()

		loan_cleared_status=False
		if float(transaction.balance) >=0:
			loan_cleared_status=True
			record_cleared=LoansCleared(loan=transaction,
											processed_by=processed_by,
											status='UNTREATED',
											tdate=tdate)
			record_cleared.save()

		credit=0
		debit=0
		balance_exist = 0
		balance=0
		particulars = ""
		d =[]
		if PersonalLedger.objects.filter(account_number=account_number).exists():
			record=PersonalLedger.objects.filter(account_number=account_number).last()
			credit=amount
			debit=0
			balance_exist = record.balance
			balance= float(balance_exist) + float(credit)
			particulars = 'OVER DEDUCTIONS REFUND AS AT ' + str(member.transaction_period.strftime("%d %B, %Y"))

		else:
			credit=amount
			debit=0
			balance=  float(credit)
			particulars = 'OVER DEDUCTIONS REFUND AS AT ' + str(member.transaction_period.strftime("%d %B, %Y"))



		post_to_ledger(member.member,
						transaction.transaction,
						account_number,
						particulars,
						debit,
						credit,
						balance,
						transaction_period,
						status,
						tdate,processed_by
						)

		ref_number=transaction.transaction.name + "(" + str(account_number) + ")"
		queryset=MonthlyOverdeductionsRefund(member=member.member,
											over_deduction=member,
											channel="LOAN",
											processed_by=processed_by,
											tdate=tdate,
											ref_number=ref_number,
											)
		queryset.save()
		member.processing_status=refund_status
		member.save()

		if loan_cleared_status:
			PersonalLedger.objects.filter(account_number=account_number).update(status="INACTIVE")

		ledger=Display_PersonalLedger_All_Records(account_number)


	context={
	'ledger':ledger,
	'member':member,
	'accounts':accounts,
	'account_number':account_number,
	'account_number_status':account_number_status,
	'submission_status':submission_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Unbalanced_transactions_Processing_Loans.html',context)

def Monthly_Unbalanced_transactions_Processing_Savings(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	tdate=get_current_date(now)

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	refund_status="PROCESSED"

	member=MonthlyJointDeductionGenerated.objects.get(id=pk)
	transaction_period=member.transaction_period
	accounts=MembersAccountsDomain.objects.filter(member=member.member,transaction__source__title='SAVINGS')
	status="ACTIVE"


	ledger=[]
	account_number=[]
	account_number_status=False
	if request.method == "POST" and 'btn_fetch' in request.POST:
		account_type_id = request.POST.get("account_type")
		account_type=MembersAccountsDomain.objects.get(id=account_type_id)

		account_number=account_type.account_number
		account_number_status=True

		ledger=Display_PersonalLedger_All_Records(account_number)


	if request.method == "POST" and 'btn_submit' in request.POST:

		account_type_id = request.POST.get("account_type")
		transaction=MembersAccountsDomain.objects.get(id=account_type_id)
		amount=request.POST.get('amount')

		account_number=transaction.account_number

		if member.processing_status==refund_status:
			messages.error(request,'Already Posted')
			return HttpResponseRedirect(reverse('Monthly_Unbalanced_transactions_Processing_Savings',args=(pk,)))

		credit=0
		debit=0
		balance_exist = 0
		balance=0
		particulars = ""
		d =[]
		if PersonalLedger.objects.filter(account_number=account_number).exists():
			record=PersonalLedger.objects.filter(account_number=account_number).last()
			credit=amount
			debit=0
			balance_exist = record.balance
			balance= float(balance_exist) + float(credit)
			particulars = 'OVER DEDUCTIONS REFUND AS AT ' + str(member.transaction_period.strftime("%d %B, %Y"))

		else:
			credit=amount
			debit=0
			balance=  float(credit)
			particulars = 'OVER DEDUCTIONS REFUND AS AT ' + str(member.transaction_period.strftime("%d %B, %Y"))



		post_to_ledger(member.member,
						transaction.transaction,
						account_number,
						particulars,
						debit,
						credit,
						balance,
						transaction_period,
						status,
						tdate,processed_by
						)

		ref_number=transaction.transaction.name + "(" + str(account_number) + ")"
		queryset=MonthlyOverdeductionsRefund(member=member.member,
											over_deduction=member,
											channel="SAVINGS",
											processed_by=processed_by,
											tdate=tdate,
											ref_number=ref_number,
											)
		queryset.save()
		member.processing_status=refund_status
		member.save()

		ledger=Display_PersonalLedger_All_Records(account_number)


	context={
	'ledger':ledger,
	'member':member,
	'accounts':accounts,
	'account_number':account_number,
	'account_number_status':account_number_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_Unbalanced_transactions_Processing_Savings.html',context)



def Monthly_deduction_ledger_posting_preview(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=deduction_ledger_posting_form(request.POST or None)


	tdate=get_current_date(now)
	processing_status='UNPROCESSED'
	processing_status1='PROCESSED'
	transaction_status="UNTREATED"
	transaction_status1="TREATED"
	status='ACTIVE'
	loan_status='INACTIVE'
	processed_by=CustomUser.objects	.get(id=request.user.id)
	processed_by=processed_by.username

	records=[]
	process_status=False
	if request.method=="POST" and 'btnprocess' in request.POST:

		records=MonthlyDeductionList.objects.filter(transaction__source__title='LOAN')
	
		k=0
		for item in records:
			if LoansRepaymentBase.objects.filter(loan_number=item.account_number).exists():
				print(f'{item.account_number} exists')
			else:
				print(f'{item.account_number} is not existing')
				# queryset=LoansRepaymentBase.objects.get(loan_number=item.account_number)
				# print(f'{item.account_number} => {item.pk}')
				item.delete()
				k=k+1
		# return HttpResponse(f'{k} noted')

		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=transaction_period.transaction_period

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

		records=MonthlyDeductionList.objects.filter(transaction_period=transaction_period,
													salary_institution=salary_institution,
													status=transaction_status1,
													processing_status=processing_status).order_by('member_id')

		for record in records:
			if record.transaction.source.title == 'LOAN':

				if PersonalLedger.objects.filter(account_number=record.account_number).exists():
					ledger=PersonalLedger.objects.filter(account_number=record.account_number).last()
					balance=ledger.balance
					new_balance=float(balance) + float(record.amount_deducted)

					
					post_to_ledger(
								record.member,
								record.transaction,
								record.account_number,
								"Loan Repayment for the Period of " + str(transaction_period),
								0,
								record.amount_deducted,
								new_balance,
								transaction_period,
								status,
								tdate,processed_by)
				else:
					
					new_balance= float(record.amount_deducted)
					post_to_ledger(
								record.member,
								record.transaction,
								record.account_number,
								"Loan Repayment for the Period of " + str(transaction_period),
								0,
								record.amount_deducted,
								new_balance,
								transaction_period,
								status,
								tdate,processed_by
								)

			

				record_update=LoansRepaymentBase.objects.filter(loan_number=record.account_number).update(amount_paid=F('amount_paid')+float(record.amount_deducted),balance=F('balance')+float(record.amount_deducted))




				
				if LoansRepaymentBase.objects.filter(loan_number=record.account_number).filter(Q(balance__gte=0)):
					record_update=LoansRepaymentBase.objects.filter(loan_number=record.account_number).update(status=loan_status)


					loan=LoansRepaymentBase.objects.get(loan_number=record.account_number)
					record_cleared=LoansCleared(tdate=tdate,loan=loan,processed_by=processed_by,status=transaction_status)
					record_cleared.save()

			elif record.transaction.source.title == 'SAVINGS':
			
				if PersonalLedger.objects.filter(account_number=record.account_number).exists():
					ledger=PersonalLedger.objects.filter(account_number=record.account_number).last()
					balance=ledger.balance
					new_balance=float(balance) + float(record.amount_deducted)

					if float(record.amount_deducted)>0:
						post_to_ledger(
										record.member,
										record.transaction,
										record.account_number,
										"Monthly Contribution for the Period of " +  str(transaction_period),
										0,
										record.amount_deducted,
										new_balance,
										transaction_period,
										status,
										tdate,processed_by)
				else:
					if float(record.amount_deducted)>0:
						new_balance= float(record.amount_deducted)
						post_to_ledger(
										record.member,
										record.transaction,
										record.account_number,
										"Monthly Contribution for the Period of " + str(transaction_period),
										0,
										record.amount_deducted,
										new_balance,
										transaction_period,
										status,
										tdate,processed_by
										)



		MonthlyDeductionList.objects.filter(transaction_period=transaction_period,salary_institution=salary_institution,status=transaction_status1,processing_status=processing_status).update(processing_status=processing_status1)
		return HttpResponseRedirect(reverse('Monthly_deduction_ledger_posting_preview'))



	if request.method=="POST" and 'btnview' in request.POST:

		transaction_period_id=request.POST.get('transaction_period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

		records=MonthlyDeductionList.objects.filter(transaction_period=transaction_period.transaction_period,salary_institution=salary_institution,status=transaction_status1,processing_status=processing_status).order_by('member_id')

		if records.count()>0:
			process_status=True

	context={

	'form':form,
	'records':records,
	'process_status':process_status,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Monthly_deduction_ledger_posting_preview.html',context)


def Manual_Ledger_Posting_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Ledger Posting"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Manual_Ledger_Posting_search.html',{'form':form,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'title':title,
	'default_password':default_password,})


def Manual_Ledger_Posting_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Manual_Ledger_Posting_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_List_load.html',context)


def Manual_Ledger_Posting_Transactions_List_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	savings=TransactionTypes.objects.filter(source__title='SAVINGS')
	loans=TransactionTypes.objects.filter(source__title='LOAN')


	context={
	'member':member,
	'savings':savings,
	'loans':loans,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Transactions_List_load.html',context)


def Manual_Ledger_Posting_Ledger_details_load(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	form=Manual_Ledger_Posting_Ledger_details_Form(request.POST or None)
	transaction_period=TransactionPeriods.objects.get(status="ACTIVE")
	transaction_period=transaction_period.transaction_period
	member=Members.objects.get(id=member_pk)
	transaction=TransactionTypes.objects.get(id=pk)
	account_id=MembersAccountsDomain.objects.get(transaction=transaction,member=member)
	account_number=account_id.account_number
	ledger_balance=get_ledger_balance(account_number)
	ledger_last_trans_period=get_ledger_last_transaction_period(account_number)
	particulars = 'Monthly deduction contribution for the period ending'
	tdate=get_current_date(now)
	if request.method=="POST":
		particulars=request.POST.get('particulars')
		transaction_period_id=request.POST.get('period')


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)

		amount=request.POST.get('amount')

		if not amount or float(amount)<=0:
			messages.error(request,'Invalid amount Specification')
			return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Ledger_details_load',args=(pk,member_pk,)))


		debit=0
		credit=float(amount)
		balance=float(ledger_balance)+float(credit)
		particulars = f'{particulars} {transaction_period}'
		status='ACTIVE'
		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username

		post_to_ledger(
			member,
			transaction,
			account_number,
			particulars,
			debit,
			credit,
			balance,
			transaction_period,
			status,
			tdate,processed_by
			)
		PersonalLedgerManualPosting(sources='SAVINGS',transaction_type='CREDIT',transaction=account_id,particulars=particulars,amount=credit,processed_by=processed_by,tdate=tdate).save()
		return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Transactions_List_load',args=(member_pk,)))

	form.fields['particulars'].initial=particulars
	form.fields['last_transaction_period'].initial=ledger_last_trans_period
	form.fields['period'].initial=transaction_period
	form.fields['balance_amount'].initial=ledger_balance
	form.fields['transaction'].initial=transaction.name
	form.fields['account_number'].initial=account_number
	context={
	'member':member,
	'transaction':transaction,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Ledger_details_load.html',context)




def Manual_Ledger_Posting_Reverse_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Ledger Posting"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Reverse_search.html',{'form':form,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'title':title,
	'default_password':default_password,})


def Manual_Ledger_Posting_Reverse_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Reverse_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

	context={
	'members':members,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Reverse_List_load.html',context)


def Manual_Ledger_Posting_Transactions_Reverse_List_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	savings=TransactionTypes.objects.filter(source__title='SAVINGS')
	loans=TransactionTypes.objects.filter(source__title='LOAN')


	context={
	'member':member,
	'savings':savings,
	'loans':loans,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Transactions_Reverse_List_load.html',context)


def Manual_Ledger_Posting_Ledger_details_Reverse_load(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=Manual_Ledger_Posting_Ledger_details_Form(request.POST or None)
	transaction_period=TransactionPeriods.objects.get(status="ACTIVE")
	transaction_period=transaction_period.transaction_period
	member=Members.objects.get(id=member_pk)
	transaction=TransactionTypes.objects.get(id=pk)
	account_id=MembersAccountsDomain.objects.get(transaction=transaction,member=member)
	account_number=account_id.account_number
	ledger_balance=get_ledger_balance(account_number)
	ledger_last_trans_period=get_ledger_last_transaction_period(account_number)
	particulars = 'Reverse of Monthly deduction contribution for the period ending'
	tdate=get_current_date(now)
	if request.method=="POST":
		particulars=request.POST.get('particulars')
		transaction_period_id=request.POST.get('period')


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)

		amount=request.POST.get('amount')

		if not amount or float(amount)<=0:
			messages.error(request,'Invalid amount Specification')
			return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Ledger_details_Reverse_load',args=(pk,member_pk,)))


		credit=0
		debit=float(amount)
		balance=float(ledger_balance)-float(debit)
		particulars = f'MANUAL POSTING: {particulars} {transaction_period}'
		status='ACTIVE'
		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username

		post_to_ledger(
			member,
			transaction,
			account_number,
			particulars,
			debit,
			credit,
			balance,
			transaction_period,
			status,
			tdate,processed_by
			)
		PersonalLedgerManualPosting(sources='SAVINGS',transaction_type='DEBIT',transaction=account_id,particulars=particulars,amount=credit,processed_by=processed_by,tdate=tdate).save()
		return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Transactions_Reverse_List_load',args=(member_pk,)))

	form.fields['particulars'].initial=particulars
	form.fields['last_transaction_period'].initial=ledger_last_trans_period
	form.fields['period'].initial=transaction_period
	form.fields['balance_amount'].initial=ledger_balance
	form.fields['transaction'].initial=transaction.name
	form.fields['account_number'].initial=account_number
	context={
	'member':member,
	'transaction':transaction,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Ledger_details_Reverse_load.html',context)

def Manual_Ledger_Posting_Loans_List_load(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction=TransactionTypes.objects.get(id=pk)
	member=Members.objects.get(id=member_pk)
	records = LoansRepaymentBase.objects.filter(member=member,transaction=transaction).filter(Q(balance__lt=0))

	context={
	'records':records,
	'transaction':transaction,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Loans_List_load.html',context)


def Manual_Ledger_Posting_Loans_Processing_load(request,pk,trans_id,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction=TransactionTypes.objects.get(id=trans_id)
	member=Members.objects.get(id=member_pk)
	record = LoansRepaymentBase.objects.get(id=pk)



	form=Manual_Ledger_Posting_Ledger_details_Form(request.POST or None)
	transaction_period=TransactionPeriods.objects.get(status="ACTIVE")
	transaction_period=transaction_period.transaction_period



	account_number=record.loan_number

	ledger_balance=get_ledger_balance(account_number)
	ledger_last_trans_period=get_ledger_last_transaction_period(account_number)
	particulars = 'Monthly Loan Repayment for the period ending'
	tdate=get_current_date(now)
	if request.method=="POST":
		particulars=request.POST.get('particulars')
		transaction_period_id=request.POST.get('period')


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)

		amount=request.POST.get('amount')

		if not amount or float(amount)<=0:
			messages.error(request,'Invalid amount Specification')
			return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Loans_Processing_load',args=(pk,trans_pk,member_pk,)))


		credit=float(amount)
		debit=0
		balance=float(ledger_balance)+float(credit)
		particulars = f'MANUAL POSTING: {particulars} {transaction_period}'
		status='ACTIVE'
		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username

		post_to_ledger(
			member,
			transaction,
			account_number,
			particulars,
			debit,
			credit,
			balance,
			transaction_period,
			status,
			tdate,processed_by
			)

		# loan_group=LoansRepaymentBase.objects.filter(loan_number=account_number).update(amount_paid=F("amount_paid")+float(credit),balance=F("balance")+float(credit))

		loan_cleared_status=False
		if LoansRepaymentBase.objects.filter(loan_number=account_number).filter(Q(balance__gte=0)):
				loan_cleared_status=True
				record_update=LoansRepaymentBase.objects.filter(loan_number=account_number).update(status='INACTIVE')


				loan=LoansRepaymentBase.objects.get(loan_number=account_number)
				record_cleared=LoansCleared(loan=loan,
											processed_by=processed_by,
											status='UNTREATED',
											tdate=tdate)
				record_cleared.save()



		if LoansRepaymentBase.objects.filter(loan_number=account_number).filter(Q(balance__gte=0)).exists():

			loan.status="INACTIVE"
			loan.save()

		if loan_cleared_status:
			PersonalLedger.objects.filter(account_number=account_number).update(status="INACTIVE")


		PersonalLedgerManualPosting(sources='LOAN',transaction_type='CREDIT',transaction=transaction,particulars=particulars,amount=credit,processed_by=processed_by,tdate=tdate).save()
		return HttpResponseRedirect(reverse('Manual_Ledger_Posting_Loans_List_load',args=(trans_id,member_pk,)))


	form.fields['particulars'].initial=particulars
	form.fields['last_transaction_period'].initial=ledger_last_trans_period
	form.fields['period'].initial=transaction_period
	form.fields['balance_amount'].initial=abs(ledger_balance)
	form.fields['transaction'].initial=transaction.name
	form.fields['account_number'].initial=account_number

	context={
	'form':form,
	'record':record,
	'transaction':transaction,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Manual_Ledger_Posting_Loans_Processing_load.html',context)


#########################################################
############### EXCLUSIVENESS #####################
#########################################################
def members_wavers_request_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/members_wavers_request_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def members_wavers_request_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Members Waver Search"
	form = searchForm(request.POST)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('members_wavers_request_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/members_wavers_request_list_load.html',context)


def members_wavers_request_register(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status='UNTREATED'
	approval_status='PENDING'
	form=members_exclusiveness_request_register_form(request.POST or None)
	member=Members.objects.get(id=pk)
	items=MembersExclusiveness.objects.filter(member=member,status=status,approval_status=approval_status)

	if request.method=="POST" and 'btn-submit' in request.POST:

		tdate=get_current_date(now)

		task_id=request.POST.get('task')
		task=ExceptableCriterias.objects.get(id=task_id)
		
		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		purpose=request.POST.get('purpose')
		if not purpose:
			messages.error(request,'Please State the Reason')
			return HttpResponseRedirect(reverse('members_wavers_request_register',args=(pk,)))


		if MembersExclusiveness.objects.filter(member=member,task=task,status=status,approval_status=approval_status,transaction=transaction).exists():
			messages.error(request,'Incomplete Transactions Still Active')
			return HttpResponseRedirect(reverse('members_wavers_request_register',args=(pk,)))

		if MembersExclusiveness.objects.filter(member=member,task=task,status=status,transaction=transaction).exists():
			messages.error(request,'You still have Open Transaction')
			return HttpResponseRedirect(reverse('members_wavers_request_register',args=(pk,)))

		record=MembersExclusiveness(purpose=purpose,task=task,tdate=tdate,member=member,status=status,approval_status=approval_status,transaction=transaction)
		record.save()
		messages.success(request,'Record Added Successfully')
		return HttpResponseRedirect(reverse('members_wavers_request_register',args=(pk,)))

	context={

	'member':member,
	'form':form,
	'items':items,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/members_wavers_request_register.html',context)




def members_wavers_request_approved_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	approval_status="PENDING"
	status='UNTREATED'

	members=MembersExclusiveness.objects.filter(status=status).exclude(approval_status=approval_status)


	context={

	'members':members,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/members_wavers_request_approved_list_load.html',context)


def members_wavers_request_delete(request,pk,return_pk):
	record=MembersExclusiveness.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('members_wavers_request_register',args=(return_pk,)))




def members_additional_loan_request_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members Additional Loan Request"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/members_additional_loan_request_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def members_additional_loan_request_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Members Additional Loan"
	form = searchForm(request.POST)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('members_additional_loan_request_search'))

		form = searchForm(request.POST)
		members=searchMembers(form['title'].value(),'ACTIVE')



		context={

		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/members_additional_loan_request_list_load.html',context)


def members_additional_loan_request_register(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status='UNTREATED'
	approval_status='PENDING'
	form=members_exclusiveness_request_register_form(request.POST or None)
	member=Members.objects.get(id=pk)
	items=MembersExclusiveness.objects.filter(member=member,status=status,approval_status=approval_status)

	if request.method=="POST" and 'btn-submit' in request.POST:
		tdate=get_current_date(now)

		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		period_id=request.POST.get("period")
		period = Commodity_Period.objects.get(id=period_id)

		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)

		task_id=request.POST.get('exceptables')
		task=ExceptableCriterias.objects.get(id=task_id)

		purpose=request.POST.get('purpose')
		if not purpose:
			messages.error(request,'Please State the Reason')
			return HttpResponseRedirect(reverse('members_additional_loan_request_register',args=(pk,)))


		if MembersExclusiveness.objects.filter(task=task,period=period,batch=batch,member=member,status=status,approval_status=approval_status,transaction=transaction).exists():
			messages.error(request,'Incomplete Transactions Still Active')
			return HttpResponseRedirect(reverse('members_additional_loan_request_register',args=(pk,)))


		record=MembersExclusiveness(task=task,purpose=purpose,period=period,batch=batch,tdate=tdate,member=member,status=status,approval_status=approval_status,transaction=transaction)
		record.save()
		messages.success(request,'Record Added Successfully')
		return HttpResponseRedirect(reverse('members_additional_loan_request_register',args=(pk,)))

	context={

	'member':member,
	'form':form,
	'items':items,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/members_additional_loan_request_register.html',context)


def members_exclusiveness_request_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Exclusive Request"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/members_exclusiveness_request_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def members_exclusiveness_request_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Members Exclusiveness"
	form = searchForm(request.POST)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('members_exclusiveness_request_search'))

		status="ACTIVE"
		form = searchForm(request.POST)
		members=searchMembers(form['title'].value(),status)



		context={

		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/members_exclusiveness_request_list_load.html',context)


def members_exclusiveness_request_register(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status='UNTREATED'
	approval_status='PENDING'
	form=members_exclusiveness_request_register_form(request.POST or None)
	member=Members.objects.get(id=pk)
	items=MembersExclusiveness.objects.filter(member=member,status=status,approval_status=approval_status)

	if request.method=="POST" and 'btn-submit' in request.POST:
		tdate=get_current_date(now)
		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		period_id=request.POST.get("period")
		period = Commodity_Period.objects.get(id=period_id)

		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)


		if MembersExclusiveness.objects.filter(period=period,batch=batch,member=member,status=status,approval_status=approval_status,transaction=transaction).exists():
			messages.error(request,'Incomplete Transactions Still Active')
			return HttpResponseRedirect(reverse('members_exclusiveness_request_register',args=(pk,)))


		record=MembersExclusiveness(period=period,batch=batch,tdate=tdate,member=member,status=status,approval_status=approval_status,transaction=transaction)
		record.save()
		messages.success(request,'Record Added Successfully')
		return HttpResponseRedirect(reverse('members_exclusiveness_request_register',args=(pk,)))

		return HttpResponseRedirect(reverse('members_exclusiveness_request_register',args=(pk,)))


	context={

	'form':form,
	'items':items,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/members_exclusiveness_request_register.html',context)




def members_exclusiveness_approved_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	approval_status="PENDING"
	status='UNTREATED'

	members=MembersExclusiveness.objects.filter(status=status).exclude(approval_status=approval_status)


	context={

	'members':members,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/members_exclusiveness_approved_list_load.html',context)


def members_exclusiveness_approved_processed(request,pk):
	status='TREATED'
	member=MembersExclusiveness.objects.get(id=pk)
	member.status=status
	member.save()

	return HttpResponseRedirect(reverse('members_exclusiveness_approved_list_load'))





#########################################################
############### COOPERATIVE BANK INFO#####################
#########################################################
def Cooperative_Bank_Account_Dashboard(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	approval_status="PENDING"
	status='UNTREATED'


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Cooperative_Bank_Account_Dashboard.html',context)

def CooperativeBankAccounts_add_Deskoffice(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=CooperativeBankAccounts_form(request.POST or None)
	banks=CooperativeBankAccounts.objects.all()
	if request.method == 'POST':
		bank_id=request.POST.get('bank')
		bank=Banks.objects.get(id=bank_id)

		account_type=request.POST.get('account_type')

		account_name=request.POST.get('account_name')
		account_number=request.POST.get('account_number')
		sort_code=request.POST.get('sort_code')

		if CooperativeBankAccounts.objects.filter(bank=bank,account_number=account_number).exists():
			messages.error(request,'This account Number is already in Use')
			return HttpResponseRedirect(reverse('CooperativeBankAccounts_add_Deskoffice'))

		record=CooperativeBankAccounts(bank=bank,account_type=account_type,account_name=account_name,account_number=account_number,sort_code=sort_code)
		record.save()

		messages.success(request,"Record Added Successfully")
		return HttpResponseRedirect(reverse('CooperativeBankAccounts_add_Deskoffice'))

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'banks':banks,
	}
	return render(request,'deskofficer_templates/CooperativeBankAccounts_add_Deskoffice.html',context)


def CooperativeBankAccounts_Deskoffice_Remove(request,pk):
    record=CooperativeBankAccounts.objects.get(id=pk)
    record.delete()
    return HttpResponseRedirect(reverse('CooperativeBankAccounts_add_Deskoffice'))


def CooperativeBankAccounts_Update_Deskoffice(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=CooperativeBankAccounts_form(request.POST or None)
	record=CooperativeBankAccounts.objects.get(id=pk)

	form.fields['account_name'].initial=record.account_name
	form.fields['account_number'].initial=record.account_number
	form.fields['bank'].initial=record.bank.id
	form.fields['account_type'].initial=record.account_type
	form.fields['sort_code'].initial=record.sort_code
	if request.method=="POST":
		bank_id=request.POST.get('bank')
		bank=Banks.objects.get(id=bank_id)

		account_type= request.POST.get('account_type')
		account_name=request.POST.get('account_name')
		account_number=request.POST.get('account_number')
		sort_code=request.POST.get('sort_code')

		record.bank=bank
		record.account_type=account_type
		record.account_name=account_name
		record.account_number=account_number
		record.sort_code=sort_code
		record.save()
		return HttpResponseRedirect(reverse('CooperativeBankAccounts_add_Deskoffice'))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/CooperativeBankAccounts_Update_Deskoffice.html',context)


def BankAccounts_Designation_Deskoffice_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	banks=CooperativeBankAccounts.objects.all()

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'banks':banks,
	}
	return render(request,'deskofficer_templates/BankAccounts_Designation_Deskoffice_List_Load.html',context)


def BankAccounts_Designation_Process_Deskoffice(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=BankAccounts_Designation_Process_form(request.POST or None)
	bank=CooperativeBankAccounts.objects.get(id=pk)


	records=CooperativeBankAccountsOperationalDesignations.objects.filter(account=bank)
	if request.method == "POST":
		transaction_id=request.POST.get('transactions')
		transaction=CooperativeBankAccountsDesignationHeaders.objects.get(id=transaction_id)

		CooperativeBankAccountsOperationalDesignations(account=bank,transaction=transaction,status='ACTIVE').save()
		return HttpResponseRedirect(reverse('BankAccounts_Designation_Process_Deskoffice',args=(pk,)))

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'bank':bank,
	'form':form,
	'records':records,
	}
	return render(request,'deskofficer_templates/BankAccounts_Designation_Process_Deskoffice.html',context)


def BankAccounts_Designation_Deskoffice_Delete(request,pk):
    record=CooperativeBankAccountsOperationalDesignations.objects.get(id=pk)
    pk=record.account.pk
    record.delete()
    return HttpResponseRedirect(reverse('BankAccounts_Designation_Process_Deskoffice',args=(pk,)))


#########################################################
############### MEMBERS BANK INFO#####################
#########################################################
def Members_Bank_Account_Dashboard_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	approval_status="PENDING"
	status='UNTREATED'


	context={


	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Bank_Account_Dashboard_Load.html',context)



def MembersBankAccounts_list_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Account Creation"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/MembersBankAccounts_list_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})



def MembersBankAccounts_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Bank Accoun Creation"
	status="ACTIVE"
	form = searchForm(request.POST)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('MembersBankAccounts_list_search'))

		members=searchMembers(form['title'].value(),status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/MembersBankAccounts_list_load.html',context)




def Members_Bank_Accounts(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=MembersBankAccounts_form(request.POST or None)
	member=Members.objects.get(id=pk)
	accounts = MembersBankAccounts.objects.filter(member_id_id=pk).order_by('account_priority')
	form.fields['account_name'].initial= member.admin.last_name + " " + member.admin.first_name + " " + member.middle_name
	if request.method=="POST":
		form=MembersBankAccounts_form(request.POST)


		if form.is_valid():
			member_id = Members.objects.get(id=pk)
			bank_id=form.cleaned_data['banks']
			bank=Banks.objects.get(id=bank_id)

			account_type = form.cleaned_data['account_types']
			# return HttpResponse(account_type_id)
			# account_type=AccountTypes.objects.get(id=account_type_id)

			account_name = form.cleaned_data['account_name']
			account_number = form.cleaned_data['account_number']

			if MembersBankAccounts.objects.filter(account_number=account_number).exists():
				messages.error(request,"Failed to add Account, Alreasy in Use")
				return HttpResponseRedirect(reverse('Members_Bank_Accounts',args=(pk,)))

			lock_status='OPEN'
			status="ACTIVE"

			record=MembersBankAccounts(status=status,lock_status=lock_status,member_id=member_id,bank=bank,account_type=account_type,account_name=account_name,account_number=account_number)
			record.save()
			messages.success(request,"Account Added Successfully")
			return HttpResponseRedirect(reverse('Members_Bank_Accounts',args=(pk,)))



	context={

	'form':form,
	'member':member,
	'accounts':accounts,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/MembersBankAccounts.html',context)

def Members_Bank_Accounts_prioritization(request,pk):
	record=MembersBankAccounts.objects.get(id=pk)
	MembersBankAccounts.objects.filter(member_id=record.member_id).update(account_priority=1)
	return_pk=record.member_id_id
	record.account_priority=0
	record.save()
	return HttpResponseRedirect(reverse('Members_Bank_Accounts',args=(return_pk,)))


def Members_Bank_Accounts_remove(request,pk):
	record=MembersBankAccounts.objects.get(id=pk)
	return_pk=record.member_id_id
	record.delete()
	return HttpResponseRedirect(reverse('Members_Bank_Accounts',args=(return_pk,)))


def Members_Bank_Accounts_lock(request,pk):
	member=Members.objects.get(id=pk)
	lock_status='LOCKED'
	record=MembersBankAccounts.objects.filter(member_id=member).update(lock_status=lock_status)


	return HttpResponseRedirect(reverse('deskofficer_home'))


def Members_Bank_Accounts_edit_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Membership Account Update"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Bank_Accounts_edit_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Bank_Accounts_edit_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Bank Accoun update"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Bank_Accounts_edit_search'))

		members=Members.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Members_Bank_Accounts_edit_list_load.html',context)



def Members_Bank_Accounts_edit_details_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	accounts = MembersBankAccounts.objects.filter(member_id_id=pk).order_by("account_priority")


	context={

		'member':member,
		'accounts':accounts,
		'return_pk':pk,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
	return render(request,'deskofficer_templates/Members_Bank_Accounts_edit_details_load.html',context)


def Members_Bank_Accounts_Edit_Prioritization(request,pk):
    record=MembersBankAccounts.objects.get(id=pk)
    MembersBankAccounts.objects.filter(member_id=record.member_id).update(account_priority=1)
    return_pk=record.member_id_id
    record.account_priority=0
    record.save()
    return HttpResponseRedirect(reverse('Members_Bank_Accounts_edit_details_load',args=(return_pk,)))


def Members_Bank_Accounts_update_form(request,pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=MembersBankAccounts_form(request.POST or None)
	account = MembersBankAccounts.objects.get(id=pk)

	form.fields['banks'].initial= account.bank.id
	form.fields['account_types'].initial=account.account_type
	form.fields['account_name'].initial=account.account_name
	form.fields['account_number'].initial=account.account_number

	if request.method=="POST":
		form=MembersBankAccounts_form(request.POST)
		if form.is_valid():
			bank_id = form.cleaned_data['banks']
			bank=Banks.objects.get(id=bank_id)

			account_type = form.cleaned_data['account_types']

			account_name=form.cleaned_data['account_name']
			account_number=form.cleaned_data['account_number']

			account.bank=bank
			account.account_type=account_type
			account.account_name=account_name
			account.account_number=account_number
			account.save()
			messages.success(request,"Account updated Successfully")
			return HttpResponseRedirect(reverse('Members_Bank_Accounts_update_form',args=(pk,return_pk)))


	context={

		'account':account,
		'return_pk':pk,
		'form':form,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
	return render(request,'deskofficer_templates/Members_Bank_Accounts_update_form.html',context)


def Members_Bank_Accounts_delete(request,pk,return_pk):
	account =MembersBankAccounts.objects.get(id=pk)
	account.delete()
	messages.success(request,"Account Deleted Successfully")
	return HttpResponseRedirect(reverse('Members_Bank_Accounts_edit_form',args=(return_pk,)))




#########################################################
############### NEXT OF KIN   ##########################
#########################################################

def Members_Next_Of_Kins_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Next Of Kins"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Next_Of_Kins_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Next_Of_Kins_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Members Next Of Kins"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Next_Of_Kins_search'))

		# members=Members.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)
		members=searchMembers(form['title'].value(),status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Members_Next_Of_Kins_list_load.html',context)




def addMembersNextOfKins(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	title="Add Next Of Kins"
	form=MembersNextOfKins_form(request.POST or None)
	records=MembersNextOfKins.objects.filter(member=member)

	if request.method=="POST":
		form=MembersNextOfKins_form(request.POST)
		status="INACTIVE"
		if form.is_valid():
			if not NextOfKinsMaximun.objects.all().exists():
				messages.error(request,'Next of Kin Maximum missing')
				return HttpResponseRedirect(reverse('addMembersNextOfKins',args=(pk,)))

			nok_max=NextOfKinsMaximun.objects.first()

			relationships_id=form.cleaned_data['relationships']
			relationships=NOKRelationships.objects.get(id=relationships_id)
			name=form.cleaned_data['name']
			address=form.cleaned_data['address']
			phone_number=form.cleaned_data['phone_number']

			existing_record_count=MembersNextOfKins.objects.filter(member=member).count()

			if int(nok_max.maximun) < int(existing_record_count) + 1:
				messages.error(request,'Total number of allowed Next of Kins exceeded')
				return HttpResponseRedirect(reverse('addMembersNextOfKins',args=(pk,)))

			if MembersNextOfKins.objects.filter(member=member,relationships=relationships,name=name).exists():
				record_exist=MembersNextOfKins.objects.get(member=member,relationships=relationships,name=name)
				record_exist.address=address
				record_exist.phone_number=phone_number
				# record_exist.status=status
				record_exist.save()
				messages.success(request,"Record Updates Successfully")
				return HttpResponseRedirect(reverse('addMembersNextOfKins',args=(pk,)))

			lock_status='OPEN'
			record=MembersNextOfKins(lock_status=lock_status,status=status,member=member,relationships=relationships,name=name,address=address,phone_number=phone_number)
			record.save()
			messages.success(request,"Record Added Successfully")
			return HttpResponseRedirect(reverse('addMembersNextOfKins',args=(pk,)))


	context={

	'form':form,
	'member':member,
	'title':title,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/addMembersNextOfKins.html',context)


def MembersNextOfKins_lock(request,pk):
	member=Members.objects.get(id=pk)
	lock_status='LOCKED'
	records=MembersNextOfKins.objects.filter(member=member).update(lock_status=lock_status)
	messages.success(request,"Record Locked Successfully")
	return HttpResponseRedirect(reverse('deskofficer_home'))


def MembersNextOfKins_remove(request,pk):
	record=MembersNextOfKins.objects.get(id=pk)
	return_pk=record.member_id
	record.delete()
	messages.success(request,"Record Deleted Successfully")
	return HttpResponseRedirect(reverse('addMembersNextOfKins',args=(return_pk,)))

def Members_Next_Of_Kins_Manage_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Membership for Next Of Kins"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Next_Of_Kins_Manage_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Next_Of_Kins_Manage_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Members Next Of Kins"
	status="ACTIVE"
	form = searchForm(request.POST)

	members=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Next_Of_Kins_Manage_search'))

		members=Members.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Members_Next_Of_Kins_Manage_list_load.html',context)


def Members_Next_Of_Kins_Manage_NOK_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	noks=MembersNextOfKins.objects.filter(member_id=pk)
	title="List of Next Of Kins"

	context={
	'member':member,
	'title':title,
	'noks':noks,
	'member_id':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Next_Of_Kins_Manage_NOK_Load.html',context)


def Members_Next_Of_Kins_Manage_NOK_Tossle(request,pk):
	record=MembersNextOfKins.objects.get(id=pk)
	# last_status=record.status

	member_pk=record.member.pk
	MembersNextOfKins.objects.filter(member=member_pk).update(status='INACTIVE')

	if record.status=='ACTIVE':
		record.status='INACTIVE'
	else:
		record.status='ACTIVE'
	record.save()
	return HttpResponseRedirect(reverse('Members_Next_Of_Kins_Manage_NOK_Load',args=(member_pk,)))


def Members_Next_Of_Kins_Manage_NOK_Update(request,pk,member_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=MembersNextOfKins_form(request.POST or None)
	member=Members.objects.get(id=member_id)
	nok=MembersNextOfKins.objects.get(id=pk)
	title="Update Next Of Kins"

	form.fields['relationships'].initial= nok.relationships.id
	form.fields['name'].initial=nok.name
	form.fields['address'].initial=nok.address
	form.fields['phone_number'].initial=nok.phone_number

	if request.method=="POST":
		status="ACTIVE"
		form=MembersNextOfKins_form(request.POST)
		if form.is_valid():
			relationships_id=form.cleaned_data['relationships']
			relationships=NOKRelationships.objects.get(id=relationships_id)
			name=form.cleaned_data['name']
			address=form.cleaned_data['address']
			phone_number=form.cleaned_data['phone_number']

			nok.status=status
			nok.relationships=relationships
			nok.name=name
			nok.address=address
			nok.phone_number=phone_number
			nok.save()
			messages.success(request,"Record Updated Successfully")
			return HttpResponseRedirect(reverse('Members_Next_Of_Kins_Manage_NOK_Load',args=(member_id,)))


	context={

	'form':form,
	'member':member,
	'title':title,
	'nok':nok,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Next_Of_Kins_Manage_NOK_Update.html',context)



def Members_Without_Next_of_Kin_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	members=Members.objects.filter(status="ACTIVE")
	k=0
	member_array = []
	for member in members:
		k=k+1
		if MembersNextOfKins.objects.filter(member=member).exists():
			pass
		else:
			member_array.append((member.get_member_Id,member.get_full_name,member.id))


	context={
		'member_array':member_array,

		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
	return render(request,'deskofficer_templates/Members_Without_Next_of_Kin_list_load.html',context)


def Members_Without_Next_of_Kin_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	title="Add Next Of Kins"
	form=MembersNextOfKins_form(request.POST or None)
	records=MembersNextOfKins.objects.filter(member=member)

	if request.method=="POST":
		form=MembersNextOfKins_form(request.POST)
		status="ACTIVE"
		if form.is_valid():
			if not NextOfKinsMaximun.objects.all().exists():
				messages.error(request,'Next of Kin Maximum missing')
				return HttpResponseRedirect(reverse('Members_Without_Next_of_Kin_Update',args=(pk,)))

			nok_max=NextOfKinsMaximun.objects.first()

			relationships_id=form.cleaned_data['relationships']
			relationships=NOKRelationships.objects.get(id=relationships_id)
			name=form.cleaned_data['name']
			address=form.cleaned_data['address']
			phone_number=form.cleaned_data['phone_number']

			existing_record_count=MembersNextOfKins.objects.filter(member=member).count()

			if int(nok_max.maximun) < int(existing_record_count) + 1:
				messages.error(request,'Total number of allowed Next of Kins exceeded')
				return HttpResponseRedirect(reverse('Members_Without_Next_of_Kin_Update',args=(pk,)))

			if MembersNextOfKins.objects.filter(member=member,relationships=relationships,name=name).exists():
				record_exist=MembersNextOfKins.objects.get(member=member,relationships=relationships,name=name)
				record_exist.address=address
				record_exist.phone_number=phone_number
				record_exist.status=status
				record_exist.save()
				messages.success(request,"Record Updates Successfully")
				return HttpResponseRedirect(reverse('Members_Without_Next_of_Kin_Update',args=(pk,)))

			lock_status='OPEN'
			record=MembersNextOfKins(lock_status=lock_status,status=status,member=member,relationships=relationships,name=name,address=address,phone_number=phone_number)
			record.save()
			messages.success(request,"Record Added Successfully")
			return HttpResponseRedirect(reverse('Members_Without_Next_of_Kin_Update',args=(pk,)))


	context={

	'form':form,
	'member':member,
	'title':title,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Without_Next_of_Kin_Update.html',context)



def MembersNextOfKins_remove_2(request,pk):
	record=MembersNextOfKins.objects.get(id=pk)
	return_pk=record.member_id
	record.delete()
	messages.success(request,"Record Deleted Successfully")
	return HttpResponseRedirect(reverse('Members_Without_Next_of_Kin_Update',args=(return_pk,)))


###########################################################
################## SALARY UPDATE ##########################
###########################################################

def Members_Salary_Update_request_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership for Salary Update"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Salary_Update_request_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Salary_Update_Request_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Members Salary Update"
	status="ACTIVE"
	form = searchForm(request.POST)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Salary_Update_request_search'))

		# members=Members.objects.filter(Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)
		members=searchMembers(form['title'].value(),status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Members_Salary_Update_Request_list_load.html',context)


def Members_Salary_Update_Request_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Members_Salary_Update_Request_form(request.POST or None)
	member=Members.objects.get(id=pk)
	if request.method=="POST":
		status='PENDING'
		amount=request.POST.get('gross_pay')
		description=request.POST.get('description')
		approval_officer_id=request.POST.get('approval_officers')

		approved_officer=ApprovalOfficers.objects.get(id=approval_officer_id)
		if MembersSalaryUpdateRequest.objects.filter(member=member,status=status).exists():
			messages.error(request,"You still have Open Transaction")
			return HttpResponseRedirect(reverse('Members_Salary_Update_Request_Load',args=(pk,)))

		record=MembersSalaryUpdateRequest(member=member,description=description,amount=amount,approved_officer=approved_officer,status=status)
		record.save()
		return HttpResponseRedirect(reverse('Members_Salary_Update_Request_Load',args=(pk,)))


	context={

	'form':form,
	'member':member,
	'member_id':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Salary_Update_Request_Load.html',context)


def Members_Salary_Update_Request_approval_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="APPROVED"
	processing_status='PROCESSED'
	members=MembersSalaryUpdateRequest.objects.filter(status=status).exclude(processing_status=processing_status)


	context={

	'members':members,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Salary_Update_Request_approval_Load.html',context)


def Members_Salary_Update_Request_process(request,pk):
	processing_status='PROCESSED'
	member=MembersSalaryUpdateRequest.objects.get(id=pk)
	member.member.gross_pay=member.amount
	member.processing_status=processing_status
	member.save()
	member.member.save()

	return HttpResponseRedirect(reverse('Members_Salary_Update_Request_approval_Load'))




###########################################################
################## VALIDATION ##########################
###########################################################
@csrf_exempt
def check_membership_phone_no_exist(request):
    phone_no=request.POST.get("phone_no1")

    user_obj=Members.objects.filter(phone_number=phone_no).exists()
    if user_obj:
        return HttpResponse(True)
    else:
        return  HttpResponse(False)



###########################################################
################ NORMIAL ROLL UPLOAD #####################
###########################################################

def upload_norminal_roll(request):
	status='UNTREATED'
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	if request.method == 'POST':

		norminal_resource = NorminalRollResource()
		dataset = Dataset()
		new_norminal_roll = request.FILES['myfile']

		if not new_norminal_roll.name.endswith('xlsx'):
			messages.error(request,'Wrong format')
			return HttpResponseRedirect(reverse('upload_norminal_roll'))

		imported_data = dataset.load(new_norminal_roll.read(),format='xlsx')
		for data in imported_data:
			name=list((data[3]).split())
			last_name=""
			first_name=""
			middle_name=""
			if len(name)==1:
				last_name=name[0]
			elif len(name) == 2:
				last_name=name[0]
				first_name=name[1]
			elif len(name) == 3:
				last_name=name[0]
				first_name=name[1]
				middle_name=name[2]
			elif len(name) == 4:
				last_name=name[0]
				first_name=name[1]
				middle_name=str(name[2]) + ' ' + str(name[3])




			value = NorminalRoll(member_id=data[2],
					file_no=data[1],
					ippis_no=data[1],
					last_name=last_name,
					first_name=first_name,
					middle_name=middle_name,
					phone_no=data[6],
					month=data[4],
					year=data[5],
					date_of_first_appointment=data[7],
					dob=data[8],
					next_of_kin=data[9],
					salary_institution=data[9],
					transaction_status=status,

				)
			value.save()


	context={


	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/upload_norminal.html',context)



def upload_distinct_norminal_roll(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == 'POST':

		norminal_resource = NorminalRollResource()
		dataset = Dataset()
		new_norminal_roll = request.FILES['myfile']

		if not new_norminal_roll.name.endswith('xlsx'):
			messages.error(request,'Wrong format')
			return HttpResponseRedirect(reverse('upload_norminal_roll',args=(pk,)))

		imported_data = dataset.load(new_norminal_roll.read(),format='xlsx')
		for data in imported_data:

			value = NorminalRoll(member_id=str(data[0]).zfill(5),
					file_no=str(data[0]).zfill(5),
					ippis_no=str(data[1]).zfill(5),
					last_name=data[2],
					first_name=data[3],
					middle_name=data[4],
					phone_no=str(data[5]).zfill(11),
					year=data[6],
					salary_institution=data[7],
				)
			value.save()


	context={


	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/upload_norminal.html',context)


def Norminal_Roll_Preview(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction_status="UNTREATED"
	records=NorminalRoll.objects.filter(transaction_status=transaction_status)


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Preview.html',context)


def Norminal_Roll_Process(request):
	prefix=MembersIdManager.objects.first()
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	if not AutoReceipt.objects.all().exists():
		messages.error(request,'Receipt not Set')
		return HttpResponseRedirect(reverse('Norminal_Roll_Preview'))

	approval_status='APPROVED'
	submission_status="SUBMITTED"
	transaction_status="UNTREATED"
	transaction_status1="TREATED"
	cashbook_status="UNPOSTED"
	status="ACTIVE"
	savings_status='PENDING'
	loan_status='PENDING'
	shares_status='PENDING'
	welfare_status='PENDING'
	date_joined_status='UPLOADED'
	dob_status='UPLOADED'
	date_of_first_appointment_status='UPLOADED'
	approval_comment="APPROVED"


	approval_officer=CustomUser.objects.get(id=request.user.id)
	MemberShipRequest.objects.all().delete()

	records=NorminalRoll.objects.filter(transaction_status=transaction_status)

	for record in records:
		file_no = str(record.file_no).zfill(5)
		ippis_no = str(record.ippis_no).zfill(5)
		phone_number = str(record.phone_no).zfill(11)

		if Members.objects.filter(Q(file_no=file_no) | Q(ippis_no=ippis_no) | Q(phone_number=phone_number)).exists():
			messages.error(request,'Duplicate records appearing')
			return HttpResponseRedirect(reverse('Norminal_Roll_Preview'))

	for record in records:
		file_no = str(record.file_no).zfill(5)
		ippis_no = str(record.ippis_no).zfill(5)
		first_name=record.first_name
		last_name=record.last_name
		middle_name=record.middle_name
		date_of_first_appointment=record.date_of_first_appointment
		next_of_kin=record.next_of_kin
		dob=record.dob
		phone_number = str(record.phone_no).zfill(11)
		month=record.month
		year = record.year

		member_id = prefix.prefix_title + "/" +  str(year) + '/' + str(record.member_id).zfill(5)

		salary_institution = SalaryInstitution.objects.get(id=record.salary_institution)

		# month_list =['JANUARY','FEBRUARY','MARCH','APRIL','MAY','JUNE','JULY','AUGUST','SEPTEMBER','OCTOBER','NOVEMBER','DECEMBER']
		approved_date=date(int(year),int(month_list.index(month))+1,1)

		item=MemberShipRequest(submission_status=submission_status,
			transaction_status=transaction_status1,
			first_name=first_name,last_name=last_name,
			middle_name=middle_name,phone_number=phone_number,
			approval_officer=approval_officer.username,
			approval_status=approval_status,
			approval_comment=approval_comment,
			salary_institution=salary_institution,
			file_no=file_no,
			ippis_no=ippis_no,
			member_id=member_id,
			month=month,
			year=year,
			date_of_first_appointment=date_of_first_appointment,
			dob=dob,
			next_of_kin=next_of_kin,
			tdate=tdate,
			approved_date=approved_date,

			)
		item.save()

		record.transaction_status=transaction_status1
		record.save()

	applicants = MemberShipRequest.objects.filter(transaction_status=transaction_status1)
	for applicant in applicants:

		receipt_obj=AutoReceipt.objects.first()
		receipt= str(receipt_obj.receipt.zfill(5))

		record=MemberShipFormSalesRecord(date_paid=approved_date,cashbook_status=cashbook_status,tdate=tdate,applicant=applicant,receipt=receipt,processed_by=processed_by.username,status=transaction_status)
		record.save()

		applicant.transaction_status=transaction_status1
		applicant.save()

		receipt_obj.receipt=int(receipt_obj.receipt) + 1
		receipt_obj.save()

	applicants= MemberShipFormSalesRecord.objects.filter(status=transaction_status)

	default_password = DefaultPassword.objects.first()
	password=default_password.title
	user_type_obj = UserType.objects.get(title='MEMBERS')
	user_type=user_type_obj.code

	for applicant in applicants:
		member_id= applicant.applicant.member_id
		file_no = applicant.applicant.file_no
		ippis_no = applicant.applicant.ippis_no
		first_name=applicant.applicant.first_name
		last_name=applicant.applicant.last_name
		middle_name=applicant.applicant.middle_name
		phone_number=applicant.applicant.phone_number
		username = applicant.applicant.first_name + applicant.applicant.last_name + str(file_no).zfill(5)
		email = applicant.applicant.first_name + str(file_no).zfill(5) + "@gmail.com"
		salary_institution = applicant.applicant.salary_institution
		date_joined = applicant.applicant.approved_date
		date_of_first_appointment = applicant.applicant.date_of_first_appointment
		dob = applicant.applicant.dob


		user = CustomUser.objects.create_user(username=username,password=password,email=email,last_name=last_name,first_name=first_name,user_type=int(user_type))
		user.members.applicant=applicant
		user.members.member_id=member_id
		user.members.middle_name=middle_name
		user.members.full_name=str(first_name) + ' ' + str(last_name) + ' ' + str(middle_name)
		user.members.phone_number=phone_number
		user.members.salary_institution=salary_institution
		user.members.file_no=file_no
		user.members.ippis_no=ippis_no
		user.members.date_joined=date_joined
		user.members.status=status
		user.members.savings_status=savings_status
		user.members.loan_status=loan_status
		user.members.shares_status=shares_status
		user.members.welfare_status=welfare_status

		user.members.date_of_first_appointment=date_of_first_appointment
		user.members.dob=dob

		user.members.date_joined_status=date_joined_status
		user.members.date_of_first_appointment_status=date_of_first_appointment_status
		user.members.dob_status=dob_status
		user.save()

		applicant.status=transaction_status1
		applicant.save()

	return HttpResponseRedirect(reverse('Norminal_Roll_Preview'))


def Individual_Capture(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	prefix=MembersIdManager.objects.first()
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	approval_status='APPROVED'
	submission_status="SUBMITTED"
	transaction_status="UNTREATED"
	transaction_status1="TREATED"
	cashbook_status="UNPOSTED"
	status="ACTIVE"
	savings_status='PENDING'
	loan_status='PENDING'
	shares_status='PENDING'
	welfare_status='PENDING'
	date_joined_status='UPLOADED'
	dob_status='UPLOADED'
	date_of_first_appointment_status='UPLOADED'


	approval_officer=CustomUser.objects.get(id=request.user.id)
	approval_comment="APPROVED"


	form=Individual_Capture_Form(request.POST or None)
	if request.method == "POST":
		
		title_id=request.POST.get('title')
		title=Titles.objects.get(id=title_id)

		dob=request.POST.get('dob')
		chk_dob=request.POST.get('chk-dob')

		date_hired=request.POST.get('date_hired')
		chk_fappt=request.POST.get('chk-fappt')

		file_no=request.POST.get('file_no').upper()
		ippis_no=request.POST.get('ippis_no')
		coop_no=request.POST.get('coop_no')

		last_name=request.POST.get('last_name').upper()
		first_name=request.POST.get('first_name').upper()
		middle_name=request.POST.get('middle_name').upper()
		phone_number=request.POST.get('phone_number')

		year=request.POST.get('year_joined')
		month=request.POST.get('month_joined')

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)

		member_id = prefix.prefix_title + "/" +  str(year) + '/' + str(coop_no).zfill(5)

		# month_list =['JANUARY','FEBRUARY','MARCH','APRIL','MAY','JUNE','JULY','AUGUST','SEPTEMBER','OCTOBER','NOVEMBER','DECEMBER']
		approved_date=date(int(year),int(month_list.index(month))+1,1)
		date_joined=date(int(year),int(month_list.index(month))+1,1)

		if not file_no:
			messages.error(request,'File Number is Missing')
			return HttpResponseRedirect(reverse('Individual_Capture'))
		if not ippis_no:
			messages.error(request,'IPPIS Number is Missing')
			return HttpResponseRedirect(reverse('Individual_Capture'))
		if not coop_no:
			messages.error(request,'Coop Number is Missing')
			return HttpResponseRedirect(reverse('Individual_Capture'))
		if not last_name:
			messages.error(request,'Last Name is Missing')
			return HttpResponseRedirect(reverse('Individual_Capture'))
		if not first_name:
			messages.error(request,'First Name is Missing')
			return HttpResponseRedirect(reverse('Individual_Capture'))

		if Members.objects.filter(member_id=member_id).exists():
			messages.error(request, "Member with this cooperative number already exist")
			return HttpResponseRedirect(reverse('Individual_Capture'))

		username = first_name + last_name + str(ippis_no).zfill(5)

		email = first_name + last_name + str(ippis_no).zfill(5) + "@gmail.com"

		if CustomUser.objects.filter(username=username).exists():
			username=str(username) + str(ippis_no)



		if CustomUser.objects.filter(email=email).exists():
			email=first_name + last_name + str(ippis_no).zfill(5) + "@fetha.gov.ng"


		item=MemberShipRequest(title=title,submission_status=submission_status,
			transaction_status=transaction_status1,
			first_name=first_name,last_name=last_name,
			middle_name=middle_name,phone_number=phone_number,
			approval_officer=approval_officer.username,
			approval_status=approval_status,
			approval_comment=approval_comment,
			salary_institution=salary_institution,
			file_no=file_no,
			ippis_no=ippis_no,
			member_id=member_id,
			month=month,
			year=year,
			processed_by=processed_by,
			tdate=tdate,
			approved_date=approved_date)
		item.save()

		if chk_dob:
			item.dob=dob
			item.save()

		if chk_fappt:
			item.date_of_first_appointment=date_hired
			item.save()


		applicant = item


		receipt_obj=AutoReceipt.objects.first()
		receipt= str(receipt_obj.receipt.zfill(5))

		record=MemberShipFormSalesRecord(cashbook_status=cashbook_status,tdate=tdate,applicant=applicant,receipt=receipt,processed_by=processed_by,status=transaction_status1,date_paid=tdate)
		record.save()

		receipt_obj.receipt=int(receipt_obj.receipt) + 1
		receipt_obj.save()


		default_password = DefaultPassword.objects.first()
		password=default_password.title
		user_type_obj = UserType.objects.get(title='MEMBERS')
		user_type=user_type_obj.code


		# try:
		user = CustomUser.objects.create_user(username=username,password=password,email=email,last_name=last_name,first_name=first_name,user_type=int(user_type))
		user.members.applicant=record
		user.members.member_id=member_id
		user.members.coop_no=str(coop_no).zfill(5)
		user.members.title=title
		user.members.middle_name=middle_name
		user.members.full_name=str(first_name) + ' ' + str(last_name) + ' ' + str(middle_name)
		user.members.phone_number=phone_number
		user.members.salary_institution=salary_institution
		user.members.file_no=file_no
		user.members.ippis_no=ippis_no
		user.members.date_joined=date_joined

		user.members.status=status
		user.members.savings_status=savings_status
		user.members.loan_status=loan_status
		user.members.shares_status=shares_status
		user.members.welfare_status=welfare_status

		user.members.date_of_first_appointment=date_hired
		user.members.dob=dob
		user.processed_by=processed_by
		user.members.date_joined_status=date_joined_status

		if chk_fappt:
			user.members.date_of_first_appointment_status=date_of_first_appointment_status

		if chk_dob:
			user.members.dob_status=dob_status

		user.save()


		# except:
		# 	applicant.delete()
		# 	user.delete()
		# 	record.delete()
		# 	messages.error(request,'This member is not registered for obvious reasons, please concult the Administrator')
		# 	return HttpResponseRedirect(reverse("Individual_Capture"))

		transactions=TransactionTypes.objects.filter(~Q(source__title="LOAN") & ~Q(source__title='GENERAL') & ~Q(code='701'))

		for transaction in transactions:
			account_number=str(transaction.code) + str(coop_no).zfill(5)
			if MembersAccountsDomain.objects.filter(member=user.members,transaction=transaction,account_number=account_number).exists():
				pass
			else:

				record=MembersAccountsDomain(processed_by=processed_by,status=status,member=user.members,transaction=transaction,account_number=account_number)
				record.save()

		return HttpResponseRedirect(reverse("Individual_Capture"))

	form.fields['dob'].initial = now
	form.fields['date_hired'].initial = now
	context={
	'form':form,
	# 'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Individual_Capture.html',context)


def Individual_Capture_Delete_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members | About to Delete Registered Member"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Individual_Capture_Delete_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})


def Individual_Capture_Delete_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"


	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Individual_Capture_Delete_Search('))

		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Individual_Capture_Delete_Search('))

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Individual_Capture_Delete_List_load.html',context)


def Individual_Capture_Delete(request,pk):
	member=Members.objects.get(id=pk)
	member_id=member.admin_id
	file_no=member.file_no
	MemberShipRequest.objects.filter(file_no=file_no).delete()
	CustomUser.objects.filter(id=member_id).delete()
	return HttpResponseRedirect(reverse('Individual_Capture_Delete_Search'))


def Duplicate_Membership_Ippis_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Members.objects.all()
	members_array=[]

	for record in records:

		if Members.objects.filter(ippis_no=record.ippis_no).count()>1:
			queryset = Members.objects.filter(ippis_no=record.ippis_no)
			for item in queryset:
				members_array.append((item.member_id,item.get_full_name,item.ippis_no,item.coop_no,item.pk,item.admin.pk))


	context={
	'members_array':members_array,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Duplicate_Membership_Ippis_List_load.html',context)


def Duplicate_Membership_Ippis_Records_Delete(request,pk):
	member=Members.objects.get(id=pk)
	ippis_no= member.ippis_no
	record=CustomUser.objects.get(id=member.admin_id)
	record.delete()
	MemberShipRequest.objects.filter(ippis_no=ippis_no).delete()
	return HttpResponseRedirect(reverse('Duplicate_Membership_Ippis_List_load'))


def Duplicate_Membership_Records_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Members.objects.all()
	members_array=[]
	# return HttpResponse("IOIIISUUSHJSJS")
	for record in records:

		if Members.objects.filter(coop_no=record.coop_no).count()>1:
			queryset = Members.objects.filter(coop_no=record.coop_no)
			for item in queryset:
				members_array.append((item.member_id,item.get_full_name,item.ippis_no,item.coop_no,item.pk,item.admin.pk))

	# print(members_array)

	context={
	'members_array':members_array,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Duplicate_Membership_Records_List_load.html',context)

def Duplicate_Membership_View_Records(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)
	records=PersonalLedger.objects.filter(member=member)

	context={
	'records':records,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Duplicate_Membership_View_Records.html',context)



def Duplicate_Membership_View_Records_Delete(request,pk):
	member=Members.objects.get(id=pk)
	ippis_no= member.ippis_no
	record=CustomUser.objects.get(id=member.admin_id)
	record.delete()
	MemberShipRequest.objects.filter(ippis_no=ippis_no).delete()
	return HttpResponseRedirect(reverse('Duplicate_Membership_Records_List_load'))

############################################################################
################# UPLOADING EXISTING SAVINGS ###############################
############################################################################
def Uploading_Existing_Savings_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Savings Upload"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})


def Uploading_Existing_Savings_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	savings_status='PENDING'

	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Search'))

		records=Members.objects.filter(Q(coop_no__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,savings_status=savings_status,member_category="OLD")
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Search'))

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploading_Existing_Savings_List_load.html',context)


def Uploading_Existing_Savings_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Uploading_Existing_Savings_form(request.POST or None)
	member_id=Members.objects.get(id=pk)

	records=SavingsUploaded.objects.filter(transaction__member=member_id)
	transaction_status='UNTREATED'
	status="ACTIVE"

	if TransactionPeriods.objects.filter(status=status).exists():
		transaction_period=TransactionPeriods.objects.get(status=status)
		transaction_period= get_current_date(transaction_period.transaction_period)

	else:
		transaction_period=now


	if request.method=="POST":
		processed_by=CustomUser.objects.get(id=request.user.id)
		transaction_period_id=request.POST.get('transaction_period')


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)


		balance=request.POST.get('balance')
		schedule_amount=request.POST.get('schedule_amount')

		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		formatted_date = defaultfilters.date(transaction_period, "SHORT_DATE_FORMAT")
		particulars="Balance Brought Forward as at " + str(formatted_date)




		standing_order=request.POST.get('standing_order')

		if standing_order:
			saving = transaction

			account_number=[]
			if MembersAccountsDomain.objects.filter(member=member_id,transaction=saving).exists():
				account_number=MembersAccountsDomain.objects.get(member=member_id,transaction=saving)
			else:
				account_number=MembersAccountsDomain(member=member_id,transaction=saving,account_number=str(saving.code) + str(member_id.get_member_Id),status='ACTIVE',loan_lock='YES',processed_by=processed_by.username)
				account_number.save()


			if account_number:
				amount=schedule_amount

				minimum_amount = saving.minimum_amount

				if float(amount)<=0:
					messages.error(request,"Amount  cannot be zero(0)")
					return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))


				if float(amount)<float(minimum_amount):
					messages.error(request,"Amount Specified is Less than " + str(minimum_amount) + " Minimum Amount allowed for this Transaction")
					return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))

				if StandingOrderAccounts.objects.filter(transaction=account_number).exists():
					member=StandingOrderAccounts.objects.get(transaction=account_number)
					if member.lock_status.title == 'OPEN':
						member.amount=amount
						processed_by=processed_by.username
						member.save()
					else:
						messages.error(request,"This Transaction is Locked, Update not Allowed from this point")
					return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))


				member=StandingOrderAccounts(lock_status='LOCKED',status='ACTIVE',transaction=account_number,amount=amount,processed_by=processed_by.username)
				member.save()
				messages.success(request,"Standing order Created Successfully, To view it, Kindly visit the Membr's Dashboard")
				return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))

			else:
				messages.error(request,"Account Number not Found")
				return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))

		else:


			if float(balance)<=0:
				messages.error(request,"Balance Brought Forward must be greater than zero")
				return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))

			if MembersAccountsDomain.objects.filter(member=member_id,transaction=transaction).exists():
				member=MembersAccountsDomain.objects.get(member=member_id,transaction=transaction)
			else:
				member=MembersAccountsDomain(member=member_id,transaction=transaction,account_number=str(transaction.code) + str(member_id.get_member_Id),status='ACTIVE',loan_lock='YES')
				member.save()
				# return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))


			if SavingsUploaded.objects.filter(transaction=member).exists():
				record=SavingsUploaded.objects.get(transaction=member)
				record.delete()

				record=SavingsUploaded(transaction=member,particulars=particulars,balance=balance,schedule_amount=schedule_amount,processed_by=processed_by.username,status=transaction_status,transaction_period=transaction_period)
				record.save()
				messages.success(request,"Record Updated Successfully")
			else:
				record=SavingsUploaded(transaction=member,particulars=particulars,balance=balance,schedule_amount=schedule_amount,processed_by=processed_by.username,status=transaction_status,transaction_period=transaction_period)
				record.save()
				messages.success(request,"Record Addedd Successfully")

		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))

	t_period= get_current_date(transaction_period)
	form.fields['transaction_period'].initial = t_period
	context={
	'member':member_id,
	'form':form,
	'records':records,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Preview.html',context)


def Uploading_Existing_Savings_validate(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	lock_status='LOCKED'
	savings_status='UPLOADED'
	status='UNTREATED'

	status1='ACTIVE'
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	# transaction_period=TransactionPeriods.objects.get(status=status1)
	
	member=Members.objects.get(id=pk)
	tdate=get_current_date(now)
	if SavingsUploaded.objects.filter(transaction__member=member,status=status).exists():
		records=SavingsUploaded.objects.filter(transaction__member=member,status=status)

		for item in records:
			transaction_id=item.transaction.transaction_id
			transaction=TransactionTypes.objects.get(id=transaction_id)

			transaction_period=item.transaction_period
			particulars=item.particulars
			debit=0
			credit=item.balance
			balance=item.balance
			schedule_amount=item.schedule_amount
			account_number=str(item.transaction.account_number)

			if MembersAccountsDomain.objects.filter(account_number=account_number).count()>1:
				member_selected=MembersAccountsDomain.objects.filter(account_number=account_number).first()
			else:
				member_selected=MembersAccountsDomain.objects.get(account_number=account_number)

			# MembersAccountsDomain.objects.exclude(id=member_selected.id).delete()

			if PersonalLedger.objects.filter(member=member,transaction=transaction,account_number=account_number).exists():
				item.status='TREATED'
				item.save()
				# messages.success(request,"Record Already Uploaded for this Member, Consult the Administrator")
				# return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(pk,)))
			else:

				post_to_ledger(
							member,
							transaction,
							account_number,
							particulars,
							debit,
							credit,
							balance,
							transaction_period,
							status1,
							tdate,processed_by
							)

			if StandingOrderAccounts.objects.filter(transaction=member_selected).exists():
				standing_order=StandingOrderAccounts.objects.get(transaction=member_selected)
				standing_order.amount=schedule_amount
				standing_order.lock_status=lock_status
				standing_order.save()

			else:

				standing_order=StandingOrderAccounts(transaction=member_selected,amount=schedule_amount,lock_status=lock_status,status=status1)
				standing_order.save()




			item.status='TREATED'
			item.save()

		member.savings_status=savings_status
		member.save()

		messages.success(request,"Record Validated Successfully")
	else:
		messages.error(request,"No Record Found")
	return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Search'))



def Uploading_Existing_Savings_delete(request,pk,return_pk):
	record=SavingsUploaded.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview',args=(return_pk,)))



def Uploading_Existing_Savings_All_List_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Savings Posting Revert"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploading_Existing_Savings_All_List_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Uploading_Existing_Savings_All_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	savings_status='PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Uploading_Existing_Savings_All_List_Search'))


		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,member_category="OLD").filter(~Q(savings_status=savings_status))
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Uploading_Existing_Savings_All_List_Search'))

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploading_Existing_Savings_All_List_load.html',context)





def Uploading_Existing_Savings_Preview_All(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Uploading_Existing_Savings_form(request.POST or None)
	member_id=Members.objects.get(id=pk)

	records=SavingsUploaded.objects.filter(transaction__member=member_id)
	transaction_status='UNTREATED'
	status="ACTIVE"
	context={
	'member':member_id,

	'records':records,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Preview_All.html',context)




def Uploading_Existing_Savings_delete_All(request,pk,return_pk):
	record=SavingsUploaded.objects.get(id=pk)
	account_number=record.transaction.account_number
	record.delete()
	StandingOrderAccounts.objects.filter(transaction__account_number=account_number).delete()
	PersonalLedger.objects.filter(account_number=account_number).delete()

	member=Members.objects.get(id=return_pk)
	if SavingsUploaded.objects.filter(transaction__member=member).exists():
		pass
	else:
		member.savings_status='PENDING'
		member.save()
	return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview_All',args=(return_pk,)))


def Uploading_Existing_Savings_Discard_All(request,pk):
	member=Members.objects.get(id=pk)
	SavingsUploaded.objects.filter(transaction__member=member).delete()
	StandingOrderAccounts.objects.filter(transaction__member=member).delete()
	PersonalLedger.objects.filter(member=member,transaction__source__title='SAVINGS').delete()

	member.savings_status='PENDING'
	member.save()
	return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Preview_All',args=(pk,)))

def Unvalidated_Savings(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=SavingsUploaded.objects.filter(status="UNTREATED")


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Unvalidated_Savings.html',context)


def Unvalidated_Savings_Delete(request,pk):
	SavingsUploaded.objects.filter(id=pk).delete()
	return  HttpResponseRedirect(reverse("Unvalidated_Savings"))





def Members_without_Compulsory_Savings(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	members=Members.objects.filter(status='ACTIVE')

	transaction=[]
	if  CompulsorySavings.objects.all().exists():
		transaction = CompulsorySavings.objects.first()


	member_array=[]
	for member in members:
		if SavingsUploaded.objects.filter(transaction__member=member,transaction__transaction=transaction.transaction).exists():
			pass
		else:
			member_array.append((member.get_member_Id,member.get_full_name,member.ippis_no,member.salary_institution.title))


	context={
	'member_array':member_array,

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_without_Compulsory_Savings.html',context)




def Members_without_Compulsory_Savings_Other_Savings(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(coop_no=pk)

	records=SavingsUploaded.objects.filter(transaction__member=member)


	context={
	'records':records,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_without_Compulsory_Savings_Other_Savings.html',context)


def Members_without_Compulsory_Savings_Loans(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(coop_no=pk)

	records=LoansUploaded.objects.filter(member=member)


	context={
	'records':records,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_without_Compulsory_Savings_Loans.html',context)


# def Members_without_Compulsory_Savings_export_Excel_xls(request):
# 	status='TREATED'
# 	response = HttpResponse(content_type='application/ms-excel')

# 	response['Content-Disposition'] = 'attachment; filename="xmas_savings_paid.xls"'

# 	wb = xlwt.Workbook(encoding='utf-8')
# 	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

# 	row_num = 0  # Sheet header, first row

# 	font_style = xlwt.XFStyle()
# 	font_style.font.bold = True

# 	columns = ['Member ID', 'Name', 'Saving Number', 'Bank', 'Account Name','Account Number','Amount']

# 	for col_num in range(len(columns)):
# 		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

# 	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

# 	members=Members.objects.filter(status='ACTIVE')

# 	transaction=[]
# 	if  CompulsorySavings.objects.all().exists():
# 		transaction = CompulsorySavings.objects.first()


# 	member_array=[]
# 	for member in members:
# 		if SavingsUploaded.objects.filter(transaction__member=member,transaction__transaction=transaction.transaction).exists():
# 			pass
# 		else:
# 			member_array.append((member.get_member_Id,member.get_full_name,member.ippis_no,member.salary_institution.title))




# 	rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')

# 	for row in rows:
# 		row_num += 1
# 		for col_num in range(len(row)):
# 			ws.write(row_num, col_num, row[col_num], font_style)
# 	wb.save(response)


# 	return response



def Uploading_Existing_Savings_Done_Selected_List_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Savings Posted"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Done_Selected_List_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Uploading_Existing_Savings_Done_Selected_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Done_Selected_List_Search'))

		records=searchMembers(form['title'].value(),status)

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploading_Existing_Savings_Done_Selected_List_load.html',context)




def Uploading_Existing_Savings_Done_Selected_View_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)

	records=SavingsUploaded.objects.filter(transaction__member=member)



	context={
	'records':records,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Done_Selected_View_Details.html',context)




def Uploading_Existing_Savings_Done_List_Select_Period(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = Uploading_Existing_Savings_Done_List_Select_Period_Form(request.POST or None)
	if request.method == "POST":
		date_format = '%Y-%m-%d'

		tdate_id=request.POST.get('tdate')
		dtObj = datetime.datetime.strptime(tdate_id, date_format)
		tdate=get_current_date(dtObj)

		transaction_period=request.POST.get('transaction_range')
		()
		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Done_List_load', args=(transaction_period,tdate,)))


	form.fields['tdate'].initial=get_current_date(now)
	context={
	'form':form,
	# 'member_array':member_array,
	# 'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Done_List_Select_Period.html',context)




def Uploading_Existing_Savings_Done_List_load(request,transaction_period,tdate):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	title="LIST OF MEMBERS"

	savings_status='UPLOADED'

	if transaction_period == 'ALL RECORDS':
		# queryset=SavingsUploaded.objects.filter().order_by('transaction__member__member_id').values_list('transaction__member__member_id','transaction__member__admin__last_name','transaction__member__admin__first_name','transaction__member__middle_name','transaction__member__ippis_no','processed_by','tdate').distinct()
		queryset=SavingsUploaded.objects.filter().order_by('transaction__member__coop_no').values_list('transaction__member__member_id','transaction__member__admin__last_name','transaction__member__admin__first_name','transaction__member__middle_name','transaction__member__ippis_no','processed_by','tdate','transaction__member__coop_no').distinct()

	elif transaction_period == 'SELECTED DATE':

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(tdate, date_format)
		t_date=get_current_date(dtObj)

		queryset=SavingsUploaded.objects.filter(Q(tdate__year=t_date.year,tdate__month=t_date.month,tdate__day=t_date.day)).order_by('transaction__member__coop_no').values_list('transaction__member__member_id',
																																					'transaction__member__admin__last_name',
																																						'transaction__member__admin__first_name',
																																												'transaction__member__middle_name',
																																												'transaction__member__ippis_no',
																																												'processed_by',
																																												'tdate',
																																												'transaction__member__coop_no').distinct()

	member_array = []
	for query in queryset:
		member_array.append((query[0][13:],query[1],query[2],query[3],query[4],query[5],get_current_date(query[6]),query[7]))

	context={
	# 'records':records,
	'member_array':member_array,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Done_List_load.html',context)


def Uploading_Existing_Savings_Done_View_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"




	records=SavingsUploaded.objects.filter(transaction__member__coop_no=pk)

	member=Members.objects.get(coop_no=pk)

	context={
	'records':records,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Done_View_Details.html',context)



##################################################################
###################### Additional Savings Upload #################
###################################################################
def Uploading_Existing_Savings_Additional_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Savings Upload"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Additional_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Uploading_Existing_Savings_Additional_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS FOR SAVINGS UPLOAD"
	status="ACTIVE"
	savings_status='PENDING'

	form = searchForm(request.POST)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_search'))

		members=Members.objects.filter(Q(coop_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status).filter(~Q(savings_status=savings_status))

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Uploading_Existing_Savings_Additional_list_load.html',context)


def Uploading_Existing_Savings_Additional_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Uploading_Existing_Savings_form(request.POST or None)
	member=Members.objects.get(id=pk)
	records=SavingsUploaded.objects.filter(transaction__member=member)
	transaction_status='UNTREATED'
	status="ACTIVE"

	if TransactionPeriods.objects.filter(status=status).exists():
		transaction_period=TransactionPeriods.objects.get(status=status)
		transaction_period=transaction_period.transaction_period
	else:
		transaction_period=now

	if request.method=="POST":
		update_standing_order=request.POST.get('standing_order')
	
		transaction_period_id=request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)



		balance=request.POST.get('balance')
		schedule_amount=request.POST.get('schedule_amount')
		processed_by=CustomUser.objects.get(id=request.user.id)

		transaction_id=request.POST.get('transactions')
		transaction_selected=TransactionTypes.objects.get(id=transaction_id)
		
		if MembersAccountsDomain.objects.filter(member=member,transaction=transaction_selected).exists():
			transaction=MembersAccountsDomain.objects.get(member=member,transaction=transaction_selected)
		else:
			transaction= MembersAccountsDomain(member=member,transaction=transaction_selected,account_number=str(transaction_selected.code) + str(member.get_member_Id),status='ACTIVE',loan_lock='YES')
			transaction.save()


		# return HttpResponse(transaction.account_number)
		formatted_date = defaultfilters.date(transaction_period, "SHORT_DATE_FORMAT")
		particulars="Balance Brought Forward as at " + str(formatted_date)

		standing_order_update='NO'
		if update_standing_order:
			standing_order_update='YES'
			if float(balance)<=0:
				messages.error(request,"Balance Brought Forward must be greater than zero")
				return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_Preview',args=(pk,)))


		if SavingsUploaded.objects.filter(transaction__member=member,transaction=transaction,status=transaction_status).exists():

			record=SavingsUploaded.objects.get(transaction__member=member,transaction=transaction,status=transaction_status)
			record.particulars=particulars
			record.balance=float(balance)
			record.schedule_amount=float(schedule_amount)
			record.processed_by=processed_by.username
			record.status=transaction_status
			record.transaction_period=transaction_period
			record.standing_order_update=standing_order_update
			record.save()
			messages.success(request,"Record Updated Successfully")

		elif SavingsUploaded.objects.filter(transaction__member=member,transaction=transaction).filter(~Q(status=transaction_status)).exists():
			messages.error(request,"Record Cannot be Altered, It is already validated")

		else:
			record=SavingsUploaded(standing_order_update=standing_order_update,particulars=particulars,transaction=transaction,balance=balance,schedule_amount=schedule_amount,processed_by=processed_by.username,status=transaction_status,transaction_period=transaction_period)
			record.save()
			messages.success(request,"Record Addedd Successfully")

		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_Preview',args=(pk,)))

	t_period = get_current_date(transaction_period)
	form.fields['transaction_period'].initial=t_period
	context={

	'member':member,
	'form':form,
	'records':records,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Savings_Additional_Preview.html',context)



def Uploading_Existing_Savings_Additional_delete(request,pk,return_pk):
	record=SavingsUploaded.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_Preview',args=(return_pk,)))


def Uploading_Existing_Savings_Additional_validate(request,pk):
	tdate = get_current_date(now)
	lock_status='LOCKED'
	savings_status='UPLOADED'
	status='UNTREATED'
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	status1='ACTIVE'
	# transaction_period=TransactionPeriods.objects.get(status=status1)


	member=Members.objects.get(id=pk)
	
	if SavingsUploaded.objects.filter(transaction__member=member,status=status).exists():
		records=SavingsUploaded.objects.filter(transaction__member=member,status=status)
		
		for item in records:
			transaction_id=item.transaction.transaction_id
			transaction=TransactionTypes.objects.get(id=transaction_id)

			standing_order_update=item.standing_order_update

			transaction_period=item.transaction_period
			particulars=item.particulars
			debit=0
			credit=item.balance
			balance=item.balance
			schedule_amount=item.schedule_amount
			account_number=str(item.transaction.account_number)

			member_selected=MembersAccountsDomain.objects.get(account_number=account_number)

			if member_selected=='YES':
				if StandingOrderAccounts.objects.filter(transaction=member_selected).exists():
					standing_order=StandingOrderAccounts.objects.get(transaction=member_selected)
					standing_order.amount=schedule_amount
					standing_order.lock_status=lock_status
					standing_order.save()

				else:

					standing_order=StandingOrderAccounts(transaction=member_selected,amount=schedule_amount,lock_status=lock_status,status=status1)
					standing_order.save()

			
			if PersonalLedger.objects.filter(member=member,transaction=transaction,account_number=account_number).exists():
				ledger=get_ledger_balance(account_number)

				post_to_ledger(member,
								transaction,
								account_number,
								particulars,
								debit,
								credit,
								float(balance)+float(ledger),
								transaction_period,
								status1,
								tdate,processed_by)

			else:
				post_to_ledger(member,
								transaction,
								account_number,
								particulars,
								debit,
								credit,
								balance,
								transaction_period,
								status1,
								tdate,processed_by)


			transaction_status='TREATED'

			item.status=transaction_status
			item.save()

		member.savings_status=savings_status
		member.save()

		messages.success(request,"Record Validated Successfully")
		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_search'))
	else:
		messages.error(request,"No Record Found")
		return HttpResponseRedirect(reverse('Uploading_Existing_Savings_Additional_validate', args=(pk,)))


########################################################################
############################# UPLOADING EXISTING LOANS #################
#########################################################################
def Uploading_Existing_Loans_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Ledger Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploading_Existing_Loans_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Uploading_Existing_Loans_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	loan_status='PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Search'))


		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,loan_status=loan_status,member_category="OLD")
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Search'))

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploading_Existing_Loans_List_load.html',context)


def Uploading_Existing_Loans_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Uploading_Existing_Loans_form(request.POST or None)
	member=Members.objects.get(id=pk)
	records=LoansUploaded.objects.filter(member=member)
	transaction_status='UNTREATED'
	status="ACTIVE"

	if TransactionPeriods.objects.filter(status=status).exists():
		transaction_period=TransactionPeriods.objects.get(status=status)
		transaction_period= transaction_period.transaction_period
	else:
		transaction_period= now

	if request.method=="POST":
		date_format = '%Y-%m-%d'
		transaction_period_id=request.POST.get('transaction_period')
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)



		formatted_date = defaultfilters.date(transaction_period, "SHORT_DATE_FORMAT")
		particulars="Balance Brought Forward as at " + str(formatted_date)

		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		interest_deduction=request.POST.get('interest_deductions')
		# interest_deduction=InterestDeductionSource.objects.get(id=interest_deduction_id)
		# return HttpResponse(interest_deduction)

		loan_amount=request.POST.get('loan_amount')
		if float(loan_amount)<=0:
			messages.error(request,'Loan Amount cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

		balance=float(request.POST.get('balance'))
		if abs(float(balance))<=0:
			messages.error(request,'Balance Brought Forward cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

		amount_paid=float(loan_amount) - float(balance)
		repayment=request.POST.get('repayment')
		if float(repayment)<=0:
			messages.error(request,'Monthly Repayment cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))


		# interest_rate=request.POST.get('interest_rate')
		interest_rate=transaction.interest_rate
		# if float(interest_rate)<0:
		# 	messages.error(request,'Interest Rate cannot be less than zero')
		# 	return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

		# admin_charge_rate=request.POST.get('admin_charge_rate')
		admin_charge_rate=transaction.admin_charges
		# if float(admin_charge_rate)<0:
		# 	messages.error(request,'Admin Charge Rate cannot be less than zero')
		# 	return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))


		duration=request.POST.get('duration')
		if int(duration)<=0:
			messages.error(request,'Duration cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

		if float(balance) > float(loan_amount):
			messages.error(request,'Loan Balance cannot be greater than Loan Amount')
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

		if float(repayment) > abs(float(balance)) or float(repayment)>float(loan_amount):
			messages.error(request,'Monthly repayment cannot be greater than Loan Amount or Balance')
			return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))



		start_date_id=request.POST.get('start_date')
		start_date=datetime.datetime.strptime(start_date_id, '%Y-%m-%d')
		stop_date = start_date+ relativedelta(months=int(duration))


		processed_by=CustomUser.objects.get(id=request.user.id)

		if LoansUploaded.objects.filter(member=member,transaction=transaction).exists():
			record=LoansUploaded.objects.get(member=member,transaction=transaction)
			record.particulars=particulars
			record.loan_amount=loan_amount
			record.amount_paid=amount_paid
			record.balance=balance
			record.repayment=repayment,
			record.interest_rate=interest_rate,
			record.admin_charge_rate=admin_charge_rate,
			record.duration=duration,
			record.interest_deduction=interest_deduction,
			record.start_date=start_date,
			record.stop_date=stop_date,
			record.processed_by=processed_by.username
			record.status=transaction_status
			record.transaction_period=transaction_period
			record.save()
			messages.success(request,"Record Updated Successfully")
		else:
			record=LoansUploaded(member=member,
				particulars=particulars,
				transaction=transaction,
				loan_amount=loan_amount,
				amount_paid=amount_paid,
				balance=balance,
				repayment=repayment,
				interest_rate=interest_rate,
				admin_charge_rate=admin_charge_rate,
				duration=duration,
				interest_deduction=interest_deduction,
				start_date=start_date,
				stop_date=stop_date,
				processed_by=processed_by.username,status=transaction_status,transaction_period=transaction_period)
			record.save()
			messages.success(request,"Record Addedd Successfully")

		return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

	transaction_period=date(2022,6,30)
	form.fields['start_date'].initial=now
	form.fields['transaction_period'].initial=get_current_date(transaction_period)


	context={

	'member':member,
	'form':form,
	'records':records,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Loans_Preview.html',context)



def Uploading_Existing_Loans_validate(request,pk):
	member=Members.objects.get(id=pk)
	processed_by=CustomUser.objects.get(id=request.user.id)
	loan_status='UPLOADED'
	status = 'UNTREATED'
	status1='ACTIVE'
	status2='INACTIVE'
	schedule_status='SCHEDULED'
	loan_lock='YES'

	# transaction_period=TransactionPeriods.objects.get(status=status1)



	now = datetime.datetime.now()
	tdate=get_current_date(now)

	if MembersNextOfKins.objects.filter(member=member,status='ACTIVE').exists():
		NOK = MembersNextOfKins.objects.get(member=member,status='ACTIVE')
		nok_name=NOK.name
		nok_Relationship=NOK.relationships.title
		nok_phone_no=NOK.phone_number
		nok_address=NOK.address
	else:
		nok_name="UNKNOWN"
		nok_Relationship="UNKNOWN"
		nok_phone_no="UNKNOWN"
		nok_address="UNKNOWN"

	if LoansUploaded.objects.filter(member=member,status=status).exists():

		loan_records=LoansUploaded.objects.filter(member=member,status=status)

		for record in loan_records:
			transaction_period=record.transaction_period
			formatted_date = defaultfilters.date(transaction_period, "SHORT_DATE_FORMAT")

			transaction_id=record.transaction_id
			transaction=TransactionTypes.objects.get(id=transaction_id)

			member_id=member.coop_no
			my_id=member_id
			particulars=record.particulars
			debit=abs(record.balance)
			credit=0
			balance=-record.balance
			amount_paid=record.amount_paid

			repayment=record.repayment
			loan_amount=record.loan_amount
			repayment=record.repayment
			duration=record.duration

			interest_rate=record.interest_rate
			interest_deduction=record.interest_deduction

			interest = (float(interest_rate)/100) * float(loan_amount)
			admin_charge_rate=record.admin_charge_rate
			admin_charge = (float(admin_charge_rate/100))* float(loan_amount)

			start_date=record.start_date
			stop_date=record.stop_date
			processed_by=CustomUser.objects.get(id=request.user.id)
			processed_by=processed_by.username

			loan_code=transaction.code
			if LoanNumber.objects.all().count() == 0:
				messages.error(request,"Loan Number not Set")
				return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

			loan_number=generate_number(loan_code,my_id,now)

			particulars="Balance Brought Forward as at " + str(formatted_date) + " for a loan of " + str(loan_amount)

			if PersonalLedger.objects.filter(member=member,transaction=transaction).exists():
				pass
			else:
				post_to_ledger(
							member,
							transaction,
							loan_number,
							particulars,
							debit,
							credit,
							balance,
							transaction_period,
							status1,
							tdate,processed_by
							)


				if LoansRepaymentBase.objects.filter(member=member,transaction=transaction,status=status1).exists():
					pass
				else:


					Loans_Repayment_Base(
						member,
						nok_name,
	                    nok_Relationship,
	                    nok_phone_no,
	                    nok_address,
						duration,
						interest_deduction,
                    	interest_rate,
                    	interest,
                    	admin_charge,
						transaction,
						loan_number,
						loan_amount,
						repayment,
						balance,
						amount_paid,
						start_date,
						stop_date,
						processed_by,
						status1,
						tdate,
						schedule_status
						)




			transaction_status='TREATED'

			record.status=transaction_status
			record.loan_number=loan_number
			record.save()

		member.loan_status=loan_status
		member.save()

		if transaction.auto_stop_savings == 'YES':
			savings=LoanBasedSavings.objects.all()
			if savings:
				record=LoanBasedSavings.objects.all().first()
				if StandingOrderAccounts.objects.filter(transaction__transaction=record.savings,transaction__member=member).exists():
					StandingOrderAccounts.objects.filter(transaction__transaction=record.savings,transaction__member=member).update(status=status2)
					queryset=StandingOrderAccounts.objects.get(transaction__transaction=record.savings,transaction__member=member)
					MembersAccountsDomain.objects.filter(account_number=queryset.transaction.account_number).update(loan_lock=loan_lock)
					StandingOrderDeactivatedAccounts(transaction=queryset,status=status,processed_by=processed_by,tdate=tdate).save()
		messages.success(request,"Record Validated Successfully")


	else:
		messages.error(request,"No Record Found")
	return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Search'))


def Uploading_Existing_Loans_delete(request,pk,return_pk):
	record=LoansUploaded.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(return_pk,)))



########################################################################
############################# UPLOADING EXISTING ADDITIONAL LOANS ######
#########################################################################
def Uploading_Existing_Additional_Loans_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Additional Loans Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploading_Existing_Additional_Loans_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Uploading_Existing_Aditional_Loans(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	loan_status='PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Search'))


		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,member_category="OLD").filter(~Q(loan_status=loan_status))
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Search'))

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploading_Existing_Aditional_Loans.html',context)





def Uploading_Existing_Additional_Loans_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Uploading_Existing_Loans_form(request.POST or None)
	member=Members.objects.get(id=pk)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	records=LoansUploaded.objects.filter(member=member)

	transaction_status='UNTREATED'
	status="ACTIVE"

	if TransactionPeriods.objects.filter(status=status).exists():
		transaction_period=TransactionPeriods.objects.get(status=status)
		transaction_period=transaction_period.transaction_period
	else:
		transaction_period=now


	if request.method=="POST":
		transaction_period_id = request.POST.get('transaction_period')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)



		formatted_date = defaultfilters.date(transaction_period_id, "SHORT_DATE_FORMAT")
		particulars="Balance Brought Forward as at " + str(formatted_date)

		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)

		interest_deduction=request.POST.get('interest_deductions')
		# interest_deduction=InterestDeductionSource.objects.get(id=interest_deduction_id)


		loan_amount=request.POST.get('loan_amount')
		if float(loan_amount)<=0:
			messages.error(request,'Loan Amount cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		balance=float(request.POST.get('balance'))
		if abs(float(balance))<=0:
			messages.error(request,'Balance Brought Forward cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		amount_paid=float(loan_amount) - float(balance)
		repayment=request.POST.get('repayment')
		if float(repayment)<=0:
			messages.error(request,'Monthly Repayment cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		if float(loan_amount) < float(repayment):
			messages.error(request,f'This Monthly repayment cannot exceed {loan_amount}')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		loan_max=transaction.maximum_amount
		if float(loan_amount) > float(loan_max):
			messages.error(request,f'This Loan amount cannot exceed {loan_max}')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))



		interest_rate=transaction.interest_rate
		# if float(interest_rate)<0:
		# 	messages.error(request,'Interest Rate cannot be less than zero')
		# 	return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		admin_charge_rate=transaction.admin_charges
		# if float(interest_rate)<0:
		# 	messages.error(request,'Admin Charge Rate cannot be less than zero')
		# 	return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))


		duration=request.POST.get('duration')
		if int(duration)<=0:
			messages.error(request,'Duration cannot be zero')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		if float(balance) > float(loan_amount):
			messages.error(request,'Loan Balance cannot be greater than Loan Amount')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

		if float(repayment) > abs(float(balance)) or float(repayment)>float(loan_amount):
			messages.error(request,'Monthly repayment cannot be greater than Loan Amount or Balance')
			return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))



		start_date_id=request.POST.get('start_date')
		start_date=datetime.datetime.strptime(start_date_id, '%Y-%m-%d')
		stop_date = start_date+ relativedelta(months=int(duration))

		# if LoansUploaded.objects.filter(member=member,transaction=transaction).exists():
		# 	record=LoansUploaded.objects.get(member=member,transaction=transaction)
		# 	record.particulars=particulars
		# 	record.loan_amount=loan_amount
		# 	record.amount_paid=amount_paid
		# 	record.balance=balance
		# 	record.repayment=repayment,
		# 	record.admin_charge_rate=admin_charge_rate,
		# 	record.interest_rate=interest_rate,
		# 	record.duration=duration,
		# 	record.interest_deduction=interest_deduction,
		# 	record.start_date=start_date,
		# 	record.stop_date=stop_date,
		# 	record.processed_by=processed_by
		# 	record.status=transaction_status
		# 	record.transaction_period=transaction_period
		# 	record.processed_by=processed_by
		# 	record.save()
		# 	messages.success(request,"Record Updated Successfully")
		# else:
		record=LoansUploaded(member=member,
			particulars=particulars,
			transaction=transaction,
			loan_amount=loan_amount,
			amount_paid=amount_paid,
			balance=balance,
			repayment=repayment,
			interest_rate=interest_rate,
			admin_charge_rate=admin_charge_rate,
			duration=duration,
			interest_deduction=interest_deduction,
			start_date=start_date,
			stop_date=stop_date,
			processed_by=processed_by,
			status=transaction_status,
			transaction_period=transaction_period)
		record.save()
		messages.success(request,"Record Addedd Successfully")

		return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(pk,)))

	transaction_period=date(2022,6,30)
	form.fields['start_date'].initial=now
	form.fields['transaction_period'].initial=get_current_date(transaction_period)


	context={

	'member':member,
	'form':form,
	'records':records,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploading_Existing_Additional_Loans_Preview.html',context)



def Uploading_Existing_Additional_Loans_validate(request,pk):
	member=Members.objects.get(id=pk)

	loan_status='UPLOADED'
	status = 'UNTREATED'
	status1='ACTIVE'
	schedule_status='SCHEDULED'




	now = datetime.datetime.now()
	tdate=get_current_date(now)

	if MembersNextOfKins.objects.filter(member=member).exists():
		NOK = MembersNextOfKins.objects.get(member=member,status='ACTIVE')
		nok_name=NOK.name
		nok_Relationship=NOK.relationships.title
		nok_phone_no=NOK.phone_number
		nok_address=NOK.address
	else:
		nok_name="UNKNOWN"
		nok_Relationship="UNKNOWN"
		nok_phone_no="UNKNOWN"
		nok_address="UNKNOWN"

	if LoansUploaded.objects.filter(member=member,status=status).exists():

		loan_records=LoansUploaded.objects.filter(member=member,status=status)

		for record in loan_records:
			transaction_period=record.transaction_period
			formatted_date = defaultfilters.date(transaction_period, "SHORT_DATE_FORMAT")

			transaction_id=record.transaction_id
			transaction=TransactionTypes.objects.get(id=transaction_id)

			member_id=member.coop_no
			my_id=member_id
			particulars=record.particulars
			debit=abs(record.balance)
			credit=0
			balance=-record.balance
			amount_paid=record.amount_paid

			repayment=record.repayment
			loan_amount=record.loan_amount
			repayment=record.repayment
			duration=record.duration

			interest_rate=record.interest_rate
			interest_deduction=record.interest_deduction
			interest= (float(interest_rate)/100)*float(loan_amount)

			admin_charge_rate=record.admin_charge_rate
			admin_charge= (float(admin_charge_rate)/100)*float(admin_charge_rate)
			start_date=record.start_date
			stop_date=record.stop_date
			processed_by=CustomUser.objects.get(id=request.user.id)
			processed_by=processed_by.username

			loan_code=transaction.code
			if LoanNumber.objects.all().count() == 0:
				messages.error(request,"Loan Number not Set")
				return HttpResponseRedirect(reverse('Uploading_Existing_Loans_Preview',args=(pk,)))

			loan_number=generate_number(loan_code,my_id,now)


			particulars="Balance Brought Forward as at " + str(formatted_date) + " for a loan of " + str(loan_amount)


			post_to_ledger(member,
							transaction,
							loan_number,
							particulars,
							debit,
							credit,
							balance,
							transaction_period,
							status1,
							tdate,processed_by
							)



			Loans_Repayment_Base(
				member,
				nok_name,
                nok_Relationship,
                nok_phone_no,
                nok_address,
				duration,
				interest_deduction,
            	interest_rate,
            	interest,
            	admin_charge,
				transaction,
				loan_number,
				loan_amount,
				repayment,
				balance,
				amount_paid,
				start_date,
				stop_date,
				processed_by,
				status1,
				tdate,
				schedule_status
				)


			record.status='TREATED'
			record.loan_number=loan_number
			record.save()


		member.loan_status=loan_status

		member.save()
		messages.success(request,"Record Validated Successfully")


	else:
		messages.error(request,"No Record Found")
	return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Search'))



def Uploading_Existing_Additional_Loans_delete(request,pk,return_pk):
	record=LoansUploaded.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Uploading_Existing_Additional_Loans_Preview',args=(return_pk,)))


def Uploade_Existing_Loan_Period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	status="ACTIVE"
	salary_status='PENDING'
	# records=Members.objects.filter(status=status).filter(Q(gender__isnull=True) | Q(gender=""))
	# records=Members.objects.filter(status=status).filter(Q(salary_status__isnull=True) | Q(salary_status=""))

	form = Uploading_Existing_Savings_Done_List_Select_Period_Form(request.POST or None)
	if request.method == "POST":
		date_format = '%Y-%m-%d'

		tdate_id=request.POST.get('tdate')
		dtObj = datetime.datetime.strptime(tdate_id, date_format)
		tdate=get_current_date(dtObj)

		transaction_period=request.POST.get('transaction_range')

		return HttpResponseRedirect(reverse('Uploaded_Existing_Loans_Done_List_load', args=(transaction_period,tdate,)))


	form.fields['tdate'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploade_Existing_Loan_Period_load.html',context)



def Uploaded_Existing_Loans_Done_List_load(request,transaction_period,tdate):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	title="LIST OF MEMBERS"

	savings_status='UPLOADED'

	if transaction_period == 'ALL RECORDS':
		# queryset=SavingsUploaded.objects.filter().order_by('transaction__member__member_id').values_list('transaction__member__member_id','transaction__member__admin__last_name','transaction__member__admin__first_name','transaction__member__middle_name','transaction__member__ippis_no','processed_by','tdate').distinct()
		queryset=LoansUploaded.objects.filter(status='TREATED').order_by('member__coop_no').values_list('member__member_id','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no','processed_by','tdate','member__coop_no').distinct()

	elif transaction_period == 'SELECTED DATE':

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(tdate, date_format)
		t_date=get_current_date(dtObj)
		queryset=LoansUploaded.objects.filter(Q(tdate__year=t_date.year,tdate__month=t_date.month,tdate__day=t_date.day) & Q(status='TREATED')).order_by('member__coop_no').values_list('member__member_id','member__admin__last_name','member__admin__first_name','member__middle_name','member__ippis_no','processed_by','tdate','member__coop_no').distinct()


	member_array = []
	for query in queryset:
		member_array.append((query[0][13:],query[1],query[2],query[3],query[4],query[5],get_current_date(query[6]),query[7]))

	context={
	'tdate':tdate,
	'transaction_period':transaction_period,
	'member_array':member_array,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploaded_Existing_Loans_Done_List_load.html',context)


def Uploaded_Existing_loan_Done_View_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=LoansRepaymentBase.objects.filter(member__coop_no=pk)

	member=Members.objects.get(coop_no=pk)

	context={
	'records':records,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploaded_Existing_loan_Done_View_Details.html',context)




def Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members "
	form = searchForm(request.POST or None)

	loan=LoansRepaymentBase.objects.get(loan_number=pk)

	button_show=False
	records=LoanGuarantors.objects.filter(loan=loan)

	if records:
		button_show=True

	return render(request,'deskofficer_templates/Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'loan':loan,
	'button_show':button_show,
	'records':records,
	})




def Uploaded_Guarantors_for_Existing_Loans_List_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	loan_status='PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors',args=(pk,)))


		records=Members.objects.filter(Q(coop_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,member_category="OLD")
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors',args=(pk,)))

		loan=LoansRepaymentBase.objects.get(loan_number=pk)
		context={
		'loan':loan,
		'records':records,
		'pk':pk,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploaded_Guarantors_for_Existing_Loans_List_Load.html',context)



def Uploaded_Guarantors_for_Save(request,pk,member_pk):
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	member=Members.objects.get(id=member_pk)
	loan=LoansRepaymentBase.objects.get(loan_number=pk)
	guarantors=loan.transaction.guarantors

	existing_guarantors=LoanGuarantors.objects.filter(loan=loan).count()

	if int(existing_guarantors) >=int(guarantors):
		messages.error(request,'You have select the number of guarantors required')
		return HttpResponseRedirect(reverse('Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors',args=(pk,)))

	if LoanGuarantors.objects.filter(loan=loan,member=member).exists():
		messages.error(request,'This member has been selected as guarantors for this loan')
		return HttpResponseRedirect(reverse('Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors',args=(pk,)))


	LoanGuarantors(loan=loan,member=member,processed_by=processed_by).save()

	return HttpResponseRedirect(reverse('Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors',args=(pk,)))


def Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors_delete(request,pk):
	record=LoanGuarantors.objects.get(id=pk)

	return_pk = record.loan.loan_number
	record.delete()
	return HttpResponseRedirect(reverse("Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors", args=(return_pk,)))



def Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors_lock(request,pk):
	LoanGuarantors.objects.filter(loan__loan_number=pk).update(status='LOCKED')
	return HttpResponseRedirect(reverse("Uploaded_Existing_loan_Done_View_Details_Upload_Guarantors", args=(pk,)))





def Uploaded_Existing_Loan_Revert_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Loans Posting Revert"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Uploaded_Existing_Loan_Revert_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Uploaded_Existing_Loan_Revert_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	loan_status='PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Uploaded_Existing_Loan_Revert_Search'))


		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,member_category="OLD").filter(~Q(loan_status=loan_status))
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Uploaded_Existing_Loan_Revert_Search'))

		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Uploaded_Existing_Loan_Revert_List_Load.html',context)



def Uploaded_Existing_Loan_Revert_Preview_All(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member_id=Members.objects.get(id=pk)

	records=LoansUploaded.objects.filter(member=member_id)

	context={
	'member':member_id,

	'records':records,
	'return_pk':pk,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploaded_Existing_Loan_Revert_Preview_All.html',context)


def Uploaded_Existing_Loan_Revert_delete_Selected(request,pk,return_pk):
	record=LoansUploaded.objects.get(id=pk)
	loan_number=record.loan_number
	record.delete()
	PersonalLedger.objects.filter(account_number=loan_number).delete()
	LoansRepaymentBase.objects.filter(loan_number=loan_number).delete()

	member=Members.objects.get(id=return_pk)

	if LoansUploaded.objects.filter(member=member).exists():
		pass
	else:
		member.loan_status='PENDING'
		member.save()
	return HttpResponseRedirect(reverse('Uploaded_Existing_Loan_Revert_Preview_All',args=(return_pk,)))


def Uploaded_Existing_Loan_Revert_Discard_All(request,pk):
	member=Members.objects.get(id=pk)
	LoansUploaded.objects.filter(member=member).delete()
	LoansRepaymentBase.objects.filter(member=member).delete()
	PersonalLedger.objects.filter(member=member,transaction__source__title='LOAN').delete()
	member.loan_status='PENDING'
	member.save()
	return HttpResponseRedirect(reverse('Uploaded_Existing_Loan_Revert_Preview_All',args=(pk,)))



def Uploade_Existing_Loan_Guarantors_Upload_Period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	status="ACTIVE"
	salary_status='PENDING'

	form = Uploading_Existing_Savings_Done_List_Select_Period_Form(request.POST or None)
	if request.method == "POST":
		date_format = '%Y-%m-%d'

		tdate_id=request.POST.get('tdate')
		dtObj = datetime.datetime.strptime(tdate_id, date_format)
		tdate=get_current_date(dtObj)

		transaction_period=request.POST.get('transaction_range')

		return HttpResponseRedirect(reverse('Uploade_Existing_Loan_Guarantors_Upload_Period_load', args=(transaction_period,tdate,)))


	form.fields['tdate'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Uploade_Existing_Loan_Guarantors_Upload_Period_load.html',context)




########################################################################
############################# VIEWING STANDING ORDERS ##################
#########################################################################
def Standing_Orders_Transaction_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=TransactionTypes.objects.filter(source__title='SAVINGS')


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Orders_Transaction_List_Load.html',context)


def Standing_Orders_Transaction_Details_List_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction=TransactionTypes.objects.get(id=pk)
	records=StandingOrderAccounts.objects.filter(transaction__transaction=transaction,status='ACTIVE')

	queryset=  StandingOrderAccounts.objects.filter(transaction__transaction=transaction,status='ACTIVE').aggregate(total_cash=Sum('amount'))
	total_amount=queryset['total_cash']


	context={
	'total_amount':total_amount,
	'records':records,
	'transaction':transaction,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Orders_Transaction_Details_List_Load.html',context)


def export_Standing_Orders_Transaction_Details_List_xls(request,pk):
	response = HttpResponse(content_type='application/ms-excel')

	transaction=TransactionTypes.objects.get(id=pk)

	response['Content-Disposition'] = f'attachment; filename="{transaction.name}.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Coop No', 'IPPIS No','Last Name', 'First_Name','Middle Name','Amount' ]

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	rows = StandingOrderAccounts.objects.filter(transaction__transaction=transaction,status='ACTIVE').values_list('transaction__member__coop_no','transaction__member__ippis_no','transaction__member__admin__last_name','transaction__member__admin__first_name', 'transaction__member__middle_name','amount')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


def Standing_Orders_Transaction_Salary_Institution_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=SalaryInstitution.objects.all()
	transaction=TransactionTypes.objects.get(id=pk)
	# records=StandingOrderAccounts.objects.filter(transaction__member__salary_institution=salary_institution,transaction__transaction=transaction,status='ACTIVE')
	context={
	'transaction':transaction,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Orders_Transaction_Salary_Institution_Load.html',context)


def Standing_Orders_Transaction_Details_Salary_Institution_Details(request,pk,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transaction=TransactionTypes.objects.get(id=trans_id)
	records=StandingOrderAccounts.objects.filter(transaction__member__salary_institution=salary_institution,transaction__transaction=transaction,status='ACTIVE')

	queryset=  StandingOrderAccounts.objects.filter(transaction__member__salary_institution=salary_institution,transaction__transaction=transaction,status='ACTIVE').aggregate(total_cash=Sum('amount'))
	total_amount=queryset['total_cash']


	context={
	'total_amount':total_amount,
	'records':records,
	'salary_institution':salary_institution,
	'transaction':transaction,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Orders_Transaction_Details_Salary_Institution_Details.html',context)


def Standing_Orders_Transaction_Details_Salary_Institution_Details_Excel_Export(request,pk,trans_id):
	response = HttpResponse(content_type='application/ms-excel')

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transaction=TransactionTypes.objects.get(id=trans_id)



	response['Content-Disposition'] = f'attachment; filename="{salary_institution.title}_{transaction.name}.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Coop No', 'IPPIS No','Last Name', 'First_Name','Middle Name','Amount' ]

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	rows = StandingOrderAccounts.objects.filter(transaction__member__salary_institution=salary_institution,transaction__transaction=transaction,status='ACTIVE').values_list('transaction__member__coop_no','transaction__member__ippis_no','transaction__member__admin__last_name','transaction__member__admin__first_name', 'transaction__member__middle_name','amount')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response



def Standing_Order_Consolidated_Salary_Institution_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=SalaryInstitution.objects.filter()


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Consolidated_Salary_Institution_list_load.html',context)


def Standing_Order_Consolidated_Transaction_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')

	members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)

	columns=['#','MEMBER ID', 'NAME']

	for transaction in transactions:
		columns.append(transaction.name)


	columns.append("TOTAL")
	order_list_array=[]
	for member in members:
		order_array=[]
		queryset=  StandingOrderAccounts.objects.filter(transaction__member=member,status='ACTIVE').aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		for transaction in transactions:

			value=''
			if StandingOrderAccounts.objects.filter(transaction__member=member,transaction__transaction=transaction,status='ACTIVE').exists():
				record=StandingOrderAccounts.objects.get(transaction__member=member,transaction__transaction=transaction,status='ACTIVE')
				value=record.amount


			order_array.append(value)



		order_array.insert(0,member.coop_no)
		order_array.insert(1,member.get_full_name)
		order_array.append(total_amount)

		order_list_array.append(order_array)

	context={
	'columns':columns,
	'salary_institution':salary_institution,
	'members':members,
	'order_list_array':order_list_array,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Standing_Order_Consolidated_Transaction_Details.html',context)




def export_Standing_Order_Consolidated_Transaction_Details_xls(request,pk):
	status='TREATED'
	response = HttpResponse(content_type='application/ms-excel')
	salary_institution=SalaryInstitution.objects.get(id=pk)
	response['Content-Disposition'] = 'attachment; filename="{salary_institution.title}_CONSODIDATED_SAVINGS.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True


	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')

	columns=['MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")

	# columns = ['Member ID', 'Name', 'Saving Number', 'Bank', 'Account Name','Account Number','Amount']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)


	order_list_array=[]
	for member in members:
		order_array=[]
		queryset=  StandingOrderAccounts.objects.filter(transaction__member=member,status='ACTIVE').aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		for transaction in transactions:

			value=''
			if StandingOrderAccounts.objects.filter(transaction__member=member,transaction__transaction=transaction,status='ACTIVE').exists():
				record=StandingOrderAccounts.objects.get(transaction__member=member,transaction__transaction=transaction,status='ACTIVE')
				value=record.amount


			order_array.append(value)



		order_array.insert(0,member.coop_no)
		order_array.insert(1,member.get_full_name)
		order_array.append(total_amount)

		order_list_array.append(order_array)






	# rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')
	rows = order_list_array

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response




def Balance_Brought_Forward_Consolidated_Salary_Institution_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=SalaryInstitution.objects.filter()


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Balance_Brought_Forward_Consolidated_Salary_Institution_list_load.html',context)



def Balance_Brought_Consolidated_Transaction_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')

	members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)

	columns=['#','MEMBER ID', 'NAME']

	for transaction in transactions:
		columns.append(transaction.name)



	order_list_array=[]
	for member in members:
		order_array=[]
		# queryset=  PersonalLedger.objects.filter(member=member,status='ACTIVE').aggregate(total_cash=Sum('amount'))
		# total_amount=queryset['total_cash']

		for transaction in transactions:

			value=''
			if PersonalLedger.objects.filter(member=member,transaction=transaction,status='ACTIVE').exists():
				record=PersonalLedger.objects.filter(member=member,transaction=transaction,status='ACTIVE').first()
				value=abs(record.balance)


			order_array.append(value)



		order_array.insert(0,member.coop_no)
		order_array.insert(1,member.get_full_name)


		order_list_array.append(order_array)


	context={
	'columns':columns,
	'salary_institution':salary_institution,
	'members':members,
	'order_list_array':order_list_array,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Balance_Brought_Consolidated_Transaction_Details.html',context)



def Balance_Brought_Consolidated_Transaction_Details_xls(request,pk):
	status='TREATED'
	response = HttpResponse(content_type='application/ms-excel')
	salary_institution=SalaryInstitution.objects.get(id=pk)
	response['Content-Disposition'] = 'attachment; filename="{salary_institution.title}_CONSODIDATED_SAVINGS_BALANCCE_BROUGHT_FORWARD.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True


	transactions=TransactionTypes.objects.filter(source__title='SAVINGS')

	columns=['MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)


	# columns = ['Member ID', 'Name', 'Saving Number', 'Bank', 'Account Name','Account Number','Amount']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)


	order_list_array=[]
	for member in members:
		order_array=[]
		queryset=  StandingOrderAccounts.objects.filter(transaction__member=member,status='ACTIVE').aggregate(total_cash=Sum('amount'))
		total_amount=queryset['total_cash']

		for transaction in transactions:

			value=''
			if PersonalLedger.objects.filter(member=member,transaction=transaction,status='ACTIVE').exists():
				record=PersonalLedger.objects.filter(member=member,transaction=transaction,status='ACTIVE').first()
				value=abs(record.balance)


			order_array.append(value)



		order_array.insert(0,member.coop_no)
		order_array.insert(1,member.get_full_name)


		order_list_array.append(order_array)






	# rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')
	rows = order_list_array

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


########################################################################
############################# CONSOLIATED LOAN REPAYMENT ###############
#########################################################################
def Loan_Repayment_Consolidated_Salary_Institution_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=SalaryInstitution.objects.filter()


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_Repayment_Consolidated_Salary_Institution_list_load.html',context)




def Loan_Repayment_Consolidated_Transaction_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(source__title='LOAN')

	members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)

	columns=['#','MEMBER ID', 'NAME']

	for transaction in transactions:
		columns.append(transaction.name)


	columns.append("TOTAL")
	order_list_array=[]
	for member in members:
		order_array=[]
		queryset=  LoansRepaymentBase.objects.filter(member=member,status='ACTIVE').aggregate(total_cash=Sum('repayment'))
		total_amount=queryset['total_cash']

		for transaction in transactions:

			value=''
			if LoansRepaymentBase.objects.filter(member=member,transaction=transaction,status='ACTIVE').exists():
				records=LoansRepaymentBase.objects.filter(member=member,transaction=transaction,status='ACTIVE')
				value=0
				for item in records:
					value=float(value)+ float(item.repayment)
			order_array.append(value)



		order_array.insert(0,member.coop_no)
		order_array.insert(1,member.get_full_name)
		order_array.append(total_amount)

		order_list_array.append(order_array)

	context={
	'columns':columns,
	'salary_institution':salary_institution,
	'members':members,
	'order_list_array':order_list_array,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_Repayment_Consolidated_Transaction_Details.html',context)



def export_Loan_Repayment_Consolidated_Transaction_Details_xls(request,pk):
	status='TREATED'
	response = HttpResponse(content_type='application/ms-excel')
	salary_institution=SalaryInstitution.objects.get(id=pk)

	response['Content-Disposition'] = F'attachment; filename="{salary_institution.title}_CONSODIDATED_LOAN.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(source__title='LOAN')

	columns=['MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows



	members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)

	order_list_array=[]
	for member in members:
		order_array=[]
		queryset=  LoansRepaymentBase.objects.filter(member=member,status='ACTIVE').aggregate(total_cash=Sum('repayment'))
		total_amount=queryset['total_cash']

		for transaction in transactions:

			value=''
			if LoansRepaymentBase.objects.filter(member=member,transaction=transaction,status='ACTIVE').exists():
				records=LoansRepaymentBase.objects.filter(member=member,transaction=transaction,status='ACTIVE')
				value=0
				for item in records:
					value=float(value)+ float(item.repayment)

			order_array.append(value)



		order_array.insert(0,member.coop_no)
		order_array.insert(1,member.get_full_name)
		order_array.append(total_amount)

		order_list_array.append(order_array)

	# rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')
	rows = order_list_array

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response



def Loan_Balance_Broght_Forward_Consolidated_Salary_Institution_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=SalaryInstitution.objects.filter()


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_Balance_Broght_Forward_Consolidated_Salary_Institution_list_load.html',context)



def Loan_Balance_Broght_Forward_Consolidated_Transaction_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(Q(source__title='LOAN') & ~Q(code=400))

	# members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)
	# PersonalLedger.objects.filter(member=member,transaction=transaction,status=transaction_status).order_by('account_number').values_list('account_number', flat=True).distinct()
	members=LoansRepaymentBase.objects.filter(Q(member__salary_institution=salary_institution) & Q(balance__lt=0)).order_by('member__coop_no').values_list('member','member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name').distinct()

	columns=['#','MEMBER ID', 'NAME']

	for transaction in transactions:
		columns.append(transaction.name)


	# return HttpResponse(len(columns))
	order_list_array=[]
	for member in members:
		order_array=[]
	
		for transaction in transactions:

			small_value=''
			if LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0)).exists():
				records=LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0))
				
				small_value=[]
				for item in records:
					small_value.append((f'{item.loan_number} => {abs(item.balance)}'))
					# return HttpResponse(small_value)
			order_array.append(small_value)



		order_array.insert(0,member[1])
		order_array.insert(1,f'{member[2]} {member[3]} {member[4]}')
		

		order_list_array.append(order_array)

	context={
	'columns':columns,
	'salary_institution':salary_institution,
	'members':members,
	'order_list_array':order_list_array,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_Balance_Broght_Forward_Consolidated_Transaction_Details.html',context)




def Loan_Balance_Broght_Forward_Consolidated_Transaction_Details_xls(request,pk):
	status='TREATED'
	response = HttpResponse(content_type='application/ms-excel')
	salary_institution=SalaryInstitution.objects.get(id=pk)

	response['Content-Disposition'] = F'attachment; filename="{salary_institution.title}_CONSODIDATED_LOAN.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	salary_institution=SalaryInstitution.objects.get(id=pk)
	transactions=TransactionTypes.objects.filter(Q(source__title='LOAN') & ~Q(code=400))


	columns=['MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	# members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)
	# PersonalLedger.objects.filter(member=member,transaction=transaction,status=transaction_status).order_by('account_number').values_list('account_number', flat=True).distinct()
	members=LoansRepaymentBase.objects.filter(Q(member__salary_institution=salary_institution) & Q(balance__lt=0)).order_by('member__coop_no').values_list('member','member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name').distinct()


	order_list_array=[]
	for member in members:
		order_array=[]
		# queryset=  LoansRepaymentBase.objects.filter(member=member,status='ACTIVE').aggregate(total_cash=Sum('repayment'))
		# total_amount=queryset['total_cash']

		for transaction in transactions:
			small_value=''
			if LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0)).exists():
				records=LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0))
				
				small_value=[]
				for item in records:
					small_value.append((f'{item.loan_number} => {abs(item.balance)},  '))
					# return HttpResponse(small_value)
			order_array.append(small_value)



		order_array.insert(0,member[1])
		order_array.insert(1,f'{member[2]} {member[3]} {member[4]}')
		


		order_list_array.append(order_array)
	

	# rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')
	rows = order_list_array

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response


def Loan_Balance_Broght_Forward_Consolidated_Transaction_All_Details(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transactions=TransactionTypes.objects.filter(Q(source__title='LOAN') & ~Q(code=400))
	members=LoansRepaymentBase.objects.filter(balance__lt=0).order_by('member__coop_no').values_list('member','member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name').distinct()

	columns=['#','MEMBER ID', 'NAME']

	for transaction in transactions:
		columns.append(transaction.name)


	# return HttpResponse(len(columns))
	order_list_array=[]
	for member in members:
		order_array=[]
	
		for transaction in transactions:

			small_value=''
			if LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0)).exists():
				records=LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0))
				
				small_value=[]
				for item in records:
					small_value.append((f'{item.loan_number} => {abs(item.balance)}'))
					# return HttpResponse(small_value)
			order_array.append(small_value)



		order_array.insert(0,member[1])
		order_array.insert(1,f'{member[2]} {member[3]} {member[4]}')
		

		order_list_array.append(order_array)

	context={
	'columns':columns,

	'members':members,
	'order_list_array':order_list_array,
	'transactions':transactions,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Loan_Balance_Broght_Forward_Consolidated_Transaction_All_Details.html',context)


def Loan_Balance_Broght_Forward_Consolidated_Transaction_All_Details_xls(request):
	status='TREATED'
	response = HttpResponse(content_type='application/ms-excel')


	response['Content-Disposition'] = F'attachment; filename="CONSODIDATED_LOAN_BALANCE.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True


	transactions=TransactionTypes.objects.filter(source__title='LOAN')

	columns=['MEMBER ID', 'NAME']
	for transaction in transactions:
		columns.append(transaction.name)
	columns.append("TOTAL")

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows



	# members=Members.objects.filter(status="ACTIVE",salary_institution=salary_institution)
	members=LoansRepaymentBase.objects.filter(balance__lt=0).order_by('member__coop_no').values_list('member','member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name').distinct()

	order_list_array=[]
	for member in members:
		order_array=[]
		# queryset=  LoansRepaymentBase.objects.filter(member=member,status='ACTIVE').aggregate(total_cash=Sum('repayment'))
		# total_amount=queryset['total_cash']

		for transaction in transactions:
			small_value=''
			if LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0)).exists():
				records=LoansRepaymentBase.objects.filter(Q(member=member[0]) & Q(transaction=transaction) & Q(balance__lt=0))
			
				value=0
				small_value=[]
				for item in records:
					small_value.append((f'{item.loan_number} => {abs(item.balance)},  '))
					# small_value.append('|')
					# return HttpResponse(small_value)
			order_array.append(small_value)


		order_array.insert(0,member[1])
		order_array.insert(1,f'{member[2]} {member[3]} {member[4]}')


		order_list_array.append(order_array)
	

	# rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')
	rows = order_list_array

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response

########################################################################
############################# UPDATING NORMINAL ROLL#####################
#########################################################################

def Norminal_Roll_Update_Coop_Number_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Members"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Norminal_Roll_Update_Coop_Number_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Norminal_Roll_Update_Coop_Number_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS FOR COOP NUMBER UPDATE"
	form = searchForm(request.POST)
	status="ACTIVE"

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Norminal_Roll_Update_Coop_Number_Search'))

		members=searchMembers(form['title'].value(),status)
		# members=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Norminal_Roll_Update_Coop_Number.html',context)



def Norminal_Roll_Update_Coop_Number_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Norminal_Roll_Update_form(request.POST or None)
	member=Members.objects.get(pk=pk)

	if request.method=='POST':

		coop_no=request.POST.get('coop_no').zfill(5)


		if Members.objects.filter(coop_no=coop_no).exclude(id=pk).exists():
			messages.error(request,'Record with this Coo No Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update_Coop_Number_Update', args=(pk,)))
		member_id=member.member_id[:13]

		member.coop_no=coop_no
		member.member_id=f'{member_id}{coop_no}'
		member.save()

		return HttpResponseRedirect(reverse('deskofficer_home'))

	form.fields['coop_no'].initial= member.coop_no

	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Update_Coop_Number_Update.html',context)



def Norminal_Roll_Update_Coop_Number_Update_Members_Dashboard(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Norminal_Roll_Update_form(request.POST or None)
	member=Members.objects.get(pk=pk)

	if request.method=='POST':

		coop_no=request.POST.get('coop_no').zfill(5)


		if Members.objects.filter(coop_no=coop_no).exclude(id=pk).exists():
			messages.error(request,'Record with this Coo No Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update_Coop_Number_Update', args=(pk,)))
		member_id=member.member_id[:13]

		member.coop_no=coop_no
		member.member_id=f'{member_id}{coop_no}'
		member.save()

		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member.pk,)))

	form.fields['coop_no'].initial= member.coop_no

	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Update_Coop_Number_Update.html',context)



def Norminal_Roll_Without_Phone_Number_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	members=Members.objects.all()
	members_array=[]
	for item in members:
		if not item.phone_number or item.phone_number[:5]=='00000': 
			members_array.append((item.pk,item.coop_no,item.get_full_name,item.phone_number))


	context={
	'members_array':members_array,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Without_Phone_Number_List_Load.html',context)



def Norminal_Roll_Without_Phone_Number_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Norminal_Roll_Without_Phone_Number_Update_Form(request.POST or None)
	member=Members.objects.get(id=pk)
	if request.method == 'POST':
		phone_number=request.POST.get('phone_number')

		if Members.objects.filter(phone_number=phone_number).exclude(id=pk).exists():
			messages.error(request,'The Phone Number is already in Use')
			return HttpResponseRedirect(reverse('Norminal_Roll_Without_Phone_Number_Update',args=(pk,)))
	
		member.phone_number=phone_number
		member.save()
	
		return HttpResponseRedirect(reverse('Norminal_Roll_Without_Phone_Number_List_Load'))
	
	form.fields['phone_number'].initial=member.phone_number
	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Without_Phone_Number_Update.html',context)





def Norminal_Roll_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Members"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Norminal_Roll_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})

def Norminal_Roll_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Norminal_Roll_Update_form(request.POST or None)
	member=Members.objects.get(pk=pk)

	if request.method=='POST':
		if request.POST.get("chk_title"):
			title_id=request.POST.get('title')
			member.title=Titles.objects.get(id=title_id)

		member.middle_name=request.POST.get('middle_name')

		if request.POST.get("chk_gender"):
			gender_id=request.POST.get('gender')
			member.gender=Gender.objects.get(id=gender_id)

		member.phone_number=request.POST.get('phone_number')
		if request.POST.get("chk_department"):
			department_id=request.POST.get('department')
			member.department=Departments.objects.get(id=department_id)

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)
		residential_address=request.POST.get('residential_address')
		permanent_home_address=request.POST.get('permanent_home_address')
		file_no=request.POST.get('file_no')
		ippis_no=request.POST.get('ippis_no')
		last_used_net_pay=request.POST.get('last_used_net_pay')

		if last_used_net_pay and float(last_used_net_pay) !=0:
			net_pay_as_at=request.POST.get('net_pay_as_at')
			if net_pay_as_at:
				date_format = '%Y-%m-%d'
				dtObj = datetime.datetime.strptime(net_pay_as_at, date_format)
				net_pay_as_at=get_current_date(dtObj)

			else:
				messages.error(request,'Please Specify period in Payslip')
				return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))

		date_joined=request.POST.get('date_joined')
		date_of_first_appointment=request.POST.get('date_of_first_appointment')
		dob=request.POST.get('dob')
		phone_number=request.POST.get('phone_number')
		last_name=request.POST.get('last_name')
		first_name=request.POST.get('first_name')
		middle_name=request.POST.get('middle_name')


		# exist_records=Members.objects.filter(file_no=file_no)
		# k=1
		# for item in exist_records:
		# 	print(f'{item.admin.last_name} {item.pk} row{k}')
		# 	k=k+1

		if Members.objects.filter(file_no=file_no).exclude(id=pk).exists():
			messages.error(request,'Record with this File No Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))


		if Members.objects.filter(ippis_no=ippis_no).exclude(id=pk).exists():
			messages.error(request,'Record with this Salary Code Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))

		if Members.objects.filter(phone_number=phone_number).exclude(id=pk).exists():
			messages.error(request,'Record with this Phone Number Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))


		member.salary_institution=salary_institution
		member.residential_address=residential_address
		member.permanent_home_address=permanent_home_address
		member.file_no=file_no
		member.ippis_no=ippis_no
		if last_used_net_pay and float(last_used_net_pay) !=0:
			member.last_used_net_pay=last_used_net_pay
			member.net_pay_as_at=net_pay_as_at

		member.date_joined=date_joined
		if request.POST.get("chk_appointment"):
			member.date_of_first_appointment=date_of_first_appointment
		if request.POST.get("chk_dob"):
			member.dob=dob
		member.phone_number=phone_number
		if middle_name:
			member.middle_name=middle_name

		member.save()
		member.admin.last_name=last_name
		member.admin.first_name=first_name
		member.admin.save()
		return HttpResponseRedirect(reverse('Norminal_Roll_Search'))

	form.fields['title'].initial= member.title_id
	form.fields['last_name'].initial= member.admin.last_name
	form.fields['first_name'].initial= member.admin.first_name
	form.fields['middle_name'].initial= member.middle_name

	form.fields['dob'].initial= member.dob
	form.fields['gender'].initial= member.gender_id
	form.fields['phone_number'].initial= member.phone_number
	form.fields['department'].initial= member.department_id

	form.fields['salary_institution'].initial= member.salary_institution_id
	form.fields['residential_address'].initial= member.residential_address
	form.fields['permanent_home_address'].initial= member.permanent_home_address

	form.fields['file_no'].initial= member.file_no
	form.fields['ippis_no'].initial= member.ippis_no
	form.fields['net_pay_as_at'].initial= member.net_pay_as_at
	form.fields['last_used_net_pay'].initial= member.last_used_net_pay
	form.fields['net_pay_as_at'].initial= member.net_pay_as_at
	form.fields['date_joined'].initial= member.date_joined
	form.fields['date_of_first_appointment'].initial= member.date_of_first_appointment

	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Update.html',context)


def Norminal_Roll_Update_Members_Dashboard(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Norminal_Roll_Update_form(request.POST or None)
	member=Members.objects.get(pk=pk)

	if request.method=='POST':
		if request.POST.get("chk_title"):
			title_id=request.POST.get('title')
			member.title=Titles.objects.get(id=title_id)

		member.middle_name=request.POST.get('middle_name')

		if request.POST.get("chk_gender"):
			gender_id=request.POST.get('gender')
			member.gender=Gender.objects.get(id=gender_id)

		member.phone_number=request.POST.get('phone_number')
		if request.POST.get("chk_department"):
			department_id=request.POST.get('department')
			member.department=Departments.objects.get(id=department_id)

		salary_institution_id=request.POST.get('salary_institution')
		salary_institution=SalaryInstitution.objects.get(id=salary_institution_id)
		residential_address=request.POST.get('residential_address')
		permanent_home_address=request.POST.get('permanent_home_address')
		file_no=request.POST.get('file_no')
		ippis_no=request.POST.get('ippis_no')
		last_used_net_pay=request.POST.get('last_used_net_pay')

		if last_used_net_pay and float(last_used_net_pay) !=0:
			net_pay_as_at=request.POST.get('net_pay_as_at')
			if net_pay_as_at:
				date_format = '%Y-%m-%d'
				dtObj = datetime.datetime.strptime(net_pay_as_at, date_format)
				net_pay_as_at=get_current_date(dtObj)

			else:
				messages.error(request,'Please Specify period in Payslip')
				return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))

		date_joined=request.POST.get('date_joined')
		date_of_first_appointment=request.POST.get('date_of_first_appointment')
		dob=request.POST.get('dob')
		phone_number=request.POST.get('phone_number')
		last_name=request.POST.get('last_name')
		first_name=request.POST.get('first_name')
		middle_name=request.POST.get('middle_name')


		if Members.objects.filter(file_no=file_no).exclude(id=pk).exists():
			messages.error(request,'Record with this File No Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))


		if Members.objects.filter(ippis_no=ippis_no).exclude(id=pk).exists():
			messages.error(request,'Record with this Salary Code Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))

		if Members.objects.filter(phone_number=phone_number).exclude(id=pk).exists():
			messages.error(request,'Record with this Phone Number Already Exist')
			return HttpResponseRedirect(reverse('Norminal_Roll_Update', args=(pk,)))


		member.salary_institution=salary_institution
		member.residential_address=residential_address
		member.permanent_home_address=permanent_home_address
		member.file_no=file_no
		member.ippis_no=ippis_no
		if last_used_net_pay and float(last_used_net_pay) !=0:
			member.last_used_net_pay=last_used_net_pay
			member.net_pay_as_at=net_pay_as_at

		member.date_joined=date_joined
		if request.POST.get("chk_appointment"):
			member.date_of_first_appointment=date_of_first_appointment
		if request.POST.get("chk_dob"):
			member.dob=dob
		member.phone_number=phone_number
		if middle_name:
			member.middle_name=middle_name

		member.save()
		member.admin.last_name=last_name
		member.admin.first_name=first_name
		member.admin.save()
		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member.pk,)))

	form.fields['title'].initial= member.title_id
	form.fields['last_name'].initial= member.admin.last_name
	form.fields['first_name'].initial= member.admin.first_name
	form.fields['middle_name'].initial= member.middle_name

	form.fields['dob'].initial= member.dob
	form.fields['gender'].initial= member.gender_id
	form.fields['phone_number'].initial= member.phone_number
	form.fields['department'].initial= member.department_id

	form.fields['salary_institution'].initial= member.salary_institution_id
	form.fields['residential_address'].initial= member.residential_address
	form.fields['permanent_home_address'].initial= member.permanent_home_address

	form.fields['file_no'].initial= member.file_no
	form.fields['ippis_no'].initial= member.ippis_no
	form.fields['net_pay_as_at'].initial= member.net_pay_as_at
	form.fields['last_used_net_pay'].initial= member.last_used_net_pay
	form.fields['net_pay_as_at'].initial= member.net_pay_as_at
	form.fields['date_joined'].initial= member.date_joined
	form.fields['date_of_first_appointment'].initial= member.date_of_first_appointment

	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Update.html',context)


def Norminal_Roll_Update_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('deskofficer_home'))

		members=searchMembers(form['title'].value(),status)
		# members=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Norminal_Roll.html',context)



def Member_delete(request,pk):
	member=Members.objects.get(id=pk)
	member.delete()
	return HttpResponseRedirect(reverse('Norminal_Roll'))


def Members_Ledger_Balance_Update_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	title="Search Members for Ledger Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Ledger_Balance_Update_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Members_Ledger_Balance_Update_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	shares_status = 'PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Search'))


		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,shares_status=shares_status,member_category='OLD')
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Search'))


		context={
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Members_Ledger_Balance_Update_list_load.html',context)


def Members_Ledger_Balance_Update_Transaction_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	loans_monetary=TransactionTypes.objects.filter(source__title='LOAN',category='MONETARY')
	loans_non_monetary=TransactionTypes.objects.filter(source__title='LOAN',category='NON-MONETARY')

	savings=TransactionTypes.objects.filter(source__title='SAVINGS')
	savings_array=[]
	for item in savings:
		if PersonalLedger.objects.filter(transaction=item,member=member).exists():
			queryset=PersonalLedger.objects.filter(transaction=item,member=member).first()
			savings_array.append((item.name,queryset.account_number))

	context={
		'savings_array':savings_array,
		'member':member,
		'savings':savings,
		'loans_monetary':loans_monetary,
		'loans_non_monetary':loans_non_monetary,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
	return render(request,'deskofficer_templates/Members_Ledger_Balance_Update_Transaction_load.html',context)

def Members_Ledger_Balance_Update_Savings_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	account_number=MembersAccountsDomain.objects.get(account_number=pk)

	
	if PersonalLedger.objects.filter(account_number=pk).exists():
		ledger=PersonalLedger.objects.filter(account_number=pk).first()
	else:
		return HttpResponse("Record Found in the Ledger, Please validate the data captured")


	form=Members_Ledger_Balance_Update_Savings_load_Form(request.POST or None)

	if request.method == "POST":
		date_format = '%Y-%m-%d'
		balance_date_obj=request.POST.get('balance_date')

		dtObj = datetime.datetime.strptime(balance_date_obj, date_format)

		balance_date=get_current_date(dtObj)
		current_amount=request.POST.get('current_amount')
		if not current_amount or float(current_amount)<=0:
			messages.info(request,'Amount cannot be zero(0)')
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Savings_load', args=(pk,)))

		debit=current_amount
		credit=0
		balance=float(current_amount)

		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username

		particulars=f'Balance Broght Forward as at {balance_date}'
		ledger.member=ledger.member
		ledger.transaction=ledger.transaction
		ledger.account_number=ledger.account_number
		ledger.particulars=particulars
		ledger.debit=debit
		ledger.credit=credit
		ledger.balance=balance
		ledger.transaction_period= balance_date
		ledger.status='ACTIVE'
		ledger.tdate=tdate
		ledger.processed_by=processed_by
		ledger.save()

		SavingsUploaded.objects.filter(transaction__account_number=ledger.account_number).update(balance=balance,
																								transaction_period=balance_date,
																								particulars=particulars
																								)
		return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Transaction_load', args=(ledger.member.pk,)))
	
	byear = "2022"
	bmonth = "06"
	bday = "30"
	bdate = date(int(byear), int(bmonth), int(bday))
	
	form.fields['account_name'].initial=ledger.transaction.name
	form.fields['account_number'].initial=ledger.account_number
	form.fields['exist_amount'].initial=abs(ledger.balance)
	form.fields['current_amount'].initial=abs(ledger.balance)
	form.fields['balance_date'].initial=get_current_date(bdate)
	context={
		'form':form,
		'ledger':ledger,

		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
	return render(request,'deskofficer_templates/Members_Ledger_Balance_Update_Savings_load.html',context)


def Members_Ledger_Balance_Update_Loan_Account_List(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction=TransactionTypes.objects.get(id=pk)
	member=Members.objects.get(id=member_pk)
	loans=LoansRepaymentBase.objects.filter(member=member,transaction=transaction).filter(Q(balance__lt=0))
	context={
		'member':member,
		'loans':loans,

		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
	return render(request,'deskofficer_templates/Members_Ledger_Balance_Update_Loan_Account_List.html',context)

def Members_Ledger_Balance_Update_Loan_Account_Preview(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=member_pk)
	loan=LoansRepaymentBase.objects.get(id=pk)
	admin_charges=loan.transaction.admin_charges
	interest_rate=loan.transaction.interest_rate
	interest_deduction=loan.transaction.interest_deduction
	admin_charge_rate=loan.transaction.admin_charges


	tdate=get_current_date(now)
	form=Members_Ledger_Balance_Update_Loan_Account_Form(request.POST or None)

	if request.method == 'POST':
		if PersonalLedger.objects.filter(account_number=loan.loan_number).exists():
			ledger=PersonalLedger.objects.filter(account_number=loan.loan_number).first()
		else:
			messages.error(request,'Please there is no ledger details found')
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Loan_Account_Preview',args=(pk, member_pk,)))

		duration = request.POST.get('duration')

		start_date_id=request.POST.get('start_date')
		start_date=datetime.datetime.strptime(start_date_id, '%Y-%m-%d')
		stop_date = start_date+ relativedelta(months=int(duration))


		balance_date=request.POST.get('balance_date')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(balance_date, date_format)
		transaction_date=get_current_date(dtObj)

		loan_amount=request.POST.get('loan_amount')
		balance=request.POST.get('balance')



		interest = math.ceil((float(interest_rate)/100) * float(loan_amount))

		admin_charge=math.ceil((float(admin_charges)/100) * float(loan_amount))

		chk_repayment=request.POST.get('chk_repayment')

		if chk_repayment:
			repayment=request.POST.get('repayment')
		else:
			repayment=math.ceil(float(loan_amount) / float(duration))



		if not loan_amount or float(loan_amount)<=0:
			messages.error(request,'Loan Amount cannot be zero(0')
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Loan_Account_Preview',args=(pk, member_pk,)))

		if not balance or float(balance)<=0:
			messages.error(request,'Balance Brought Forward Amount cannot be zero(0')
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Loan_Account_Preview',args=(pk, member_pk,)))

		if not repayment or float(repayment)<=0:
			messages.error(request,'Monthly Repayment Amount cannot be zero(0')
			return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Loan_Account_Preview',args=(pk, member_pk,)))

		amount_paid=float(loan_amount)-float(balance)

		debit=abs(float(balance))
		credit=0
		balance=-float(balance)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username
		particulars=f'Balance Broght Forward as at {transaction_date}'
		ledger.particulars=particulars
		ledger.debit=debit
		ledger.credit=credit
		ledger.balance=balance
		ledger.transaction_period=transaction_date
		ledger.status='ACTIVE'
		ledger.processed_by=processed_by
		ledger.save()

		loan.duration=duration
		loan.interest_deduction=interest_deduction
		loan.interest_rate=interest_rate
		loan.interest=interest
		loan.admin_charge=admin_charge
		loan.loan_amount=loan_amount
		loan.repayment=repayment
		loan.amount_paid=amount_paid
		loan.balance=balance
		loan.start_date=start_date
		loan.stop_date=stop_date
		loan.schedule_status="SCHEDULED"

		loan.status="ACTIVE"
		loan.tdate=tdate
		loan.processed_by=processed_by
		loan.save()

		queryset=LoansUploaded.objects.get(loan_number=loan.loan_number)
		queryset.particulars=particulars
		queryset.loan_amount=loan_amount
		queryset.balance=float(balance)
		queryset.repayment=repayment
		queryset.duration=duration
		queryset.interest_rate=interest_rate
		queryset.interest_deduction=interest_deduction
		queryset.admin_charge_rate=admin_charge_rate
		queryset.start_date=start_date
		queryset.stop_date=stop_date
		queryset.transaction_period=transaction_date
		queryset.save()

		return HttpResponseRedirect(reverse('Members_Ledger_Balance_Update_Loan_Account_List',args=(loan.transaction.pk,member.pk,)))


	transaction_period=date(2022,6,30)
	form.fields['loan_type'].initial=loan.transaction.name
	form.fields['loan_number'].initial=loan.loan_number
	form.fields['loan_amount'].initial=loan.loan_amount
	form.fields['balance'].initial=abs(loan.balance)
	form.fields['duration'].initial=loan.duration
	form.fields['repayment'].initial=loan.repayment
	form.fields['balance_date'].initial=get_current_date(transaction_period)
	form.fields['start_date'].initial=loan.start_date
	context={
		'member':member,
		'loan':loan,
		'form':form,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
	return render(request,'deskofficer_templates/Members_Ledger_Balance_Update_Loan_Account_Preview.html',context)


############################################################
##################### MEMBERS SHARE ########################
############################################################

def Members_Shares_Upload_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	title="Search Members for Ledger Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Shares_Upload_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Members_Shares_Upload_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	shares_status = 'PENDING'
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Members_Shares_Upload_Search'))


		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,shares_status=shares_status,member_category='OLD')
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Members_Shares_Upload_Search'))


		context={
		'records':records,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Members_Shares_Upload_list_load.html',context)



def Members_Shares_Upload_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	form=Existing_Shares_Upload_form(request.POST or None)

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	status='UNTREATED'
	status1='ACTIVE'
	shares_status='VERIFIED'


	member1=Members.objects.get(id=pk)
	tdate=get_current_date(now)

	unit_share_cost=0
	if MembersShareConfigurations.objects.all().exists():
		unit_share_cost=MembersShareConfigurations.objects.all().first()
		unit_share_cost=unit_share_cost.unit_cost


	transaction=TransactionTypes.objects.get(code=700)

	total_shares=0
	member=[]
	if MembersAccountsDomain.objects.filter(member=member1,transaction=transaction).exists():
		member=MembersAccountsDomain.objects.get(member=member1,transaction=transaction)


	if request.method=="POST" and 'btn-upload' in request.POST:

		transaction_period=TransactionPeriods.objects.get(status='ACTIVE')
		shares_amount=request.POST.get('shares_amount')


		total_shares=float(shares_amount)/float(unit_share_cost)
		shares = "{:.2f}".format(total_shares)


		effective_date=request.POST.get('effective_date')
		date = parse_date(effective_date)


		if not member:
			messages.error(request,'Please There is no account member for this Transaction')
			return HttpResponseRedirect(reverse('Members_Shares_Upload_Preview',args=(pk,)))

		account_number=member.account_number


		if MembersShareAccounts.objects.filter(member=member).exists():
			messages.info(request,'Record Already Exist')
			return HttpResponseRedirect(reverse('Members_Shares_Upload_Preview',args=(pk,)))

		record=MembersShareAccounts(member=member,
									shares=shares,
									unit_cost=unit_share_cost,
									total_cost=shares_amount,
									effective_date=effective_date,
									year=date.year,
									status=status,
									tdate=tdate,
									processed_by=processed_by.username)
		record.save()

		debit=0
		credit=shares_amount
		balance=shares_amount

		particulars='Balance Broght Forward as at ' + str(transaction_period.transaction_period) + " with shares of " + str(shares)
		post_to_ledger(member1,
						transaction,
						account_number,
						particulars,
						debit,
						credit,
						balance,
						transaction_period.transaction_period,
						status1,
						tdate,processed_by
						)


		member1.shares_status=shares_status
		member1.save()

		return HttpResponseRedirect(reverse('deskofficer_home'))

	form.fields['unit_cost'].initial= unit_share_cost
	form.fields['effective_date'].initial= now
	context={
	'member':member,
	'member1':member1,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Shares_Upload_Preview.html',context)



def Members_Initial_Shares_update_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)



	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	title="Search Members for Initial Share Update"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Initial_Shares_update_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Initial_Shares_update_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	title="LIST OF MEMBERS"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Initial_Shares_update_Search'))

		members=MembersShareAccounts.objects.filter(Q(member__member__file_no__icontains=form['title'].value())
													|Q(member__member__ippis_no__icontains=form['title'].value())
													|Q(member__member__phone_number__icontains=form['title'].value())
													|Q(member__member__admin__first_name__icontains=form['title'].value())
													|Q(member__member__admin__last_name__icontains=form['title'].value())
													|Q(member__member__middle_name__icontains=form['title'].value())).filter(Q(shares__lt=2))


		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Members_Initial_Shares_update_list_load.html',context)


def Members_Initial_Shares_update_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=MembersInitialShare_update_form(request.POST or None)
	tdate=get_current_date(now)
	if MembersShareConfigurations.objects.all().count()>0:
		record=MembersShareConfigurations.objects.first()
		form.fields['unit_cost'].initial=record.unit_cost


	member=MembersShareAccounts.objects.get(id=pk)

	if request.method=='POST':
		status='UNTREATED'
		approval_status='PENDING'

		transaction_id=request.POST.get('transactions')
		transaction=SharesDeductionSavings.objects.get(id=transaction_id)

		amount=record.unit_cost
		processed_by=CustomUser.objects.get(id=request.user.id)
		if MembersShareInitialUpdateRequest.objects.filter(member=member,status=status).exists():
			messages.info(request,'There is still an open transaction for this member')
			return HttpResponseRedirect(reverse('Members_Initial_Shares_update_preview',args=(pk,)))

		record=MembersShareInitialUpdateRequest(approval_status=approval_status,tdate=tdate,member=member,transaction=transaction.savings,amount=amount,processed_by=processed_by.username,status=status)
		record.save()
		messages.success(request,'Transaction Completed Successfully')
		return HttpResponseRedirect(reverse('Members_Initial_Shares_update_Search'))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Members_Initial_Shares_update_preview.html',context)


def Members_Initial_Shares_update_approved_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	status='UNTREATED'
	approval_status='APPROVED'
	members=MembersShareInitialUpdateRequest.objects.filter(status=status,approval_status=approval_status)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'members':members,
	}
	return render(request,'deskofficer_templates/Members_Initial_Shares_update_approved_list_load.html',context)


def Members_Initial_Shares_update_approved_processed(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction_period=TransactionPeriods.objects.get(status='ACTIVE')
	status1='ACTIVE'
	status='TREATED'
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	member=MembersShareInitialUpdateRequest.objects.get(id=pk)
	account_number=member.member.member.account_number
	tdate=get_current_date(now)

	ledger_balance=PersonalLedger.objects.filter(account_number=account_number).last()
	if request.method=="POST":
		savings_id=request.POST.get('savings')
		savings=TransactionTypes.objects.get(name=savings_id)

		amount=request.POST.get('amount')
		debit=0
		credit=amount
		balance=float(ledger_balance.balance) + float(amount)

		particulars='Initial Share Balance update as at ' + str(transaction_period.transaction_period) + " with shares: " + str(1) + " Deducted from " + str(savings.name)
		post_to_ledger(
						member.member.member.member,
						member.member.member.transaction,
						ledger_balance.account_number,
						particulars,
						debit,
						credit,
						balance,
						transaction_period.transaction_period,
						status1,
						tdate,processed_by)


		member.status=status
		member.save()

		return HttpResponseRedirect(reverse('Members_Initial_Shares_update_approved_list_load'))

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'member':member,
	'ledger_balance':ledger_balance.balance,
	}
	return render(request,'deskofficer_templates/Members_Initial_Shares_update_approved_processed.html',context)


def Members_Share_Purchase_Request_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Share Purchase"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Members_Share_Purchase_Request_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Search'))

		members=MembersShareAccounts.objects.filter(Q(member__member__file_no__icontains=form['title'].value()) |Q(member__member__ippis_no__icontains=form['title'].value()) |Q(member__member__phone_number__icontains=form['title'].value()) | Q(member__member__admin__first_name__icontains=form['title'].value()) | Q(member__member__admin__last_name__icontains=form['title'].value()) | Q(member__member__middle_name__icontains=form['title'].value())).filter(member__member__status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Members_Share_Purchase_Request_list_load.html',context)


def Members_Share_Purchase_Request_View(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Members_Share_Purchase_Request_form(request.POST or None)
	member1=MembersShareAccounts.objects.get(id=pk)
	account_number=member1.member.account_number
	member=MembersAccountsDomain.objects.get(account_number=account_number)

	if request.method=="POST":
		tdate=get_current_date(now)
		status="UNTREATED"
		max_unit = SharesUnits.objects.all().order_by('unit').last()

		existing_share = member1.shares
		approval_status='PENDING'

		units=request.POST.get('units')
		if not units:
			messages.info(request,'Unit is missing')
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_View',args=(pk,)))


		if int(max_unit.unit) < (int(units) + int(existing_share)):
			messages.error(request,"You have exceed the Maximum Units")
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_View',args=(pk,)))


		if MembersSharePurchaseRequest.objects.filter(member=member,status=status).exists():
			messages.error(request,"You Still Have an Open Transaction")
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_View',args=(pk,)))

		record=MembersSharePurchaseRequest(tdate=tdate,member=member,approval_status=approval_status,units=units,status=status)
		record.save()
		return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Search'))

	# form.fields['units'].initial=
	context={

	"form":form,
	"member":member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'account_number':account_number,
	}
	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_View.html',context)



def Members_Share_Purchase_Request_Manage_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Members for Share Purchase"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Manage_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})


def Members_Share_Purchase_Request_Manage_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Search'))

		members=MembersSharePurchaseRequest.objects.filter(Q(member__member__file_no__icontains=form['title'].value()) |Q(member__member__ippis_no__icontains=form['title'].value()) |Q(member__member__phone_number__icontains=form['title'].value()) | Q(member__member__admin__first_name__icontains=form['title'].value()) | Q(member__member__admin__last_name__icontains=form['title'].value()) | Q(member__member__middle_name__icontains=form['title'].value())).filter(member__member__status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Manage_list_load.html',context)


def Members_Share_Purchase_Request_Manage_Details(request,pk):
	form=Members_Share_Purchase_Request_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=MembersSharePurchaseRequest.objects.get(id=pk)

	member1=MembersShareAccounts.objects.get(member__account_number=member.member.account_number)
	title="LIST OF MEMBERS"

	form.fields['units'].initial=member.units

	if request.method=="POST":
		tdate=get_current_date(now)
		status="UNTREATED"
		max_unit = SharesUnits.objects.all().order_by('unit').last()

		existing_share = member1.shares


		units=request.POST.get('units')
		if not units:
			messages.info(request,'Unit is missing')
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Manage_Details',args=(pk,)))


		if int(max_unit.unit) < (int(units) + int(existing_share)):
			messages.error(request,"You have exceed the Maximum Units")
			return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Manage_Details',args=(pk,)))

		member.units=units
		member.save()
		return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Manage_Search'))


	context={

	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Manage_Details.html',context)



def Members_Share_Purchase_Request_Manage_Details_delete_Confirmation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title = "Are you sure you want to drop this Request"
	record=MembersSharePurchaseRequest.objects.get(id=pk)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'record':record,
	'title':title,
	}
	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Manage_Details_delete_Confirmation.html',context)


def Members_Share_Purchase_Request_Manage_Details_delete(request,pk):
	record=MembersSharePurchaseRequest.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Manage_Search'))


def Members_Share_Purchase_Request_Process(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	approval_status='APPROVED'
	status='UNTREATED'
	records=MembersSharePurchaseRequest.objects.filter(approval_status=approval_status,status=status)


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'records':records,
	}
	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Process.html',context)


def Members_Share_Purchase_Request_Process_View(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	form=Members_Share_Purchase_Request_Process_View_Form(request.POST or None)
	record=MembersSharePurchaseRequest.objects.get(id=pk)
	member=MembersAccountsDomain.objects.get(account_number=record.member.account_number)
	transaction_receipt_category=TransactionTypes.objects.get(code='700')
	status1='ACTIVE'
	status='TREATED'
	status2='UNTREATED'
	receipt_status='UNUSED'
	receipt_status1='USED'
	tdate=get_current_date(now)

	if request.method=="POST":

		receipt_id=request.POST.get('receipt_no')

		if transaction_receipt_category.receipt_type=='MANUAL':
			if Receipts.objects.filter(receipt=receipt_id,status=receipt_status).exists():
				receipt_obj=Receipts.objects.get(receipt=receipt_id,status=receipt_status)
				receipt=receipt_obj.receipt
				receipt_obj.status=receipt_status1
				receipt_obj.save()
			else:
				messages.info(request,'Receipt Already in Use or Not Available')
				return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Process_View', args=(pk,)))
		else:
			receipt_obj=AutoReceipt.objects.first()
			receipt= str(receipt_obj.receipt).zfill(5)
			receipt_obj.receipt=int(receipt_obj.receipt)+1
			receipt_obj.save()



		account_number=record.member.account_number
		bank_id=request.POST.get('account')
		bank_account=CooperativeBankAccounts.objects.get(id=bank_id)

		unit_cost=request.POST.get('unit_cost')
		payment_reference=request.POST.get('payment_reference')
		units=request.POST.get('units')
		total_cost= float(unit_cost) * float(units)

		payment_date=request.POST.get('payment_date')


		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)

		else:
			image_url=None


		purpose=str(units) + " share(s) at a unit cost " + str(unit_cost)
		record_add=MembersCashDeposits(member=member.member,
										bank_accounts=bank_account,
										account_number=account_number,
										transaction=transaction_receipt_category,
										amount=total_cost,
										payment_reference=payment_reference,
										payment_evidience=image_url,
										receipt=receipt,
										purpose=purpose,
										payment_date=payment_date,
										processed_by=processed_by.username,
										status=status2,
										tdate=tdate)
		record_add.save()

		if MembersShareAccounts.objects.filter(member=member).exists():
			share_record=MembersShareAccounts.objects.filter(member=member).first()
			share_record.shares = int(share_record.shares) + int(units)
			share_record.unit_cost=unit_cost
			share_record.total_cost=float(share_record.total_cost) + float(total_cost)
			share_record.save()
		else:
			share_record=MembersShareAccounts(member=member,
											shares=units,
											unit_cost=unit_cost,
											total_cost=total_cost,
											effective_date=now,
											year=now.year,
											processed_by=processed_by.username,
											status=status2,
											tdate=tdate)
			share_record.save()


		if PersonalLedger.objects.filter(account_number=account_number).exists():
			ledger=PersonalLedger.objects.filter(account_number=account_number).order_by('id').last()

			debit=0
			credit=total_cost
			balance=float(ledger.balance) + float(total_cost)
			particulars= str(units) + " Unit(s) Share Purchase, at unit cost of " + str(unit_cost) +  " as at " + str(now)


			post_to_ledger(
						member.member,
						member.transaction,
						account_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						status1,
						tdate,processed_by
						)

		else:
			debit=0
			credit=total_cost
			balance=float(total_cost)
			particulars= str(units) + " Unit(s) Share Purchase, at unit cost of " + str(unit_cost) +  " as at " + str(now)


			post_to_ledger(member.member,
							member.transaction,
							account_number,
							particulars,
							debit,
							credit,
							balance,
							get_current_date(now),
							status1,
							tdate,processed_by)


		record.status=status
		record.save()

		return HttpResponseRedirect(reverse('Members_Share_Purchase_Request_Process'))


	if MembersShareConfigurations.objects.all().count()>0:
		share_cost=MembersShareConfigurations.objects.first()
		form.fields['payment_date'].initial=now
		form.fields['unit_cost'].initial=share_cost.unit_cost
		form.fields['units'].initial=record.units
		form.fields['total_cost'].initial= float(share_cost.unit_cost) * float(record.units)



	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'record':record,
	'form':form,
	'transaction_receipt_category':transaction_receipt_category,
	}
	return render(request,'deskofficer_templates/Members_Share_Purchase_Request_Process_View.html',context)



############################################################
##################### MEMBERS WELFARE ######################
############################################################
def Members_Welfare_Upload_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Ledger Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Welfare_Upload_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Members_Welfare_Upload_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	welfare_status = 'PENDING'
	records=[]
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Members_Welfare_Upload_Search'))



		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status,welfare_status=welfare_status,member_category='OLD')
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Transaction_adjustment_history_Search'))


	context={
	'records':records,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Welfare_Upload_list_load.html',context)




def Members_Welfare_Upload_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Existing_Welfare_Upload_form(request.POST or None)
	welfare_status='VERIFIED'
	transaction=TransactionTypes.objects.get(code=800)
	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	year=tdate.year

	member1=Members.objects.get(id=pk)

	member=[]
	if MembersAccountsDomain.objects.filter(member_id=pk,transaction=transaction).exists():
		member=MembersAccountsDomain.objects.get(member_id=pk,transaction=transaction)

	if request.method=="POST":

		transaction_period=TransactionPeriods.objects.get(status='ACTIVE')

		status='UNTREATED'
		status1='ACTIVE'

		amount=request.POST.get('amount')

		if not member:
			messages.info(request,'Account Number not Available')
			return HttpResponseRedirect(reverse('Members_Welfare_Upload_Preview',args=(pk,)))

		account_number=member.account_number

		if MembersWelfareAccounts.objects.filter(member=member).exists():
			messages.info(request,'Record Already Upload for This Member')
			return HttpResponseRedirect(reverse('Members_Welfare_Upload_Preview',args=(pk,)))

		record=MembersWelfareAccounts(member=member,
									amount=amount,
									status=status,
									year=year,
									tdate=tdate,
									processed_by=processed_by.username)
		record.save()

		member1.welfare_status=welfare_status
		member1.save()

		return HttpResponseRedirect(reverse('Members_Welfare_Upload_Search'))


	context={

	'member':member,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Welfare_Upload_Preview.html',context)



############################################################
##################### CASH DEPOSIT    ######################
############################################################
def Cash_Deposit_Shares_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Cash Deposit for Shares"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Cash_Deposit_Shares_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Cash_Deposit_Shares_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	transaction=TransactionTypes.objects.get(code='700')
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Search'))

		members=MembersAccountsDomain.objects.filter(Q(member__file_no__icontains=form['title'].value()) |Q(member__ippis_no__icontains=form['title'].value()) |Q(member__phone_number__icontains=form['title'].value()) | Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value())).filter(transaction=transaction)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Cash_Deposit_Shares_list_load.html',context)


def Cash_Deposit_Shares_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Deposit_Shares_Preview_Form(request.POST or None)
	member=MembersAccountsDomain.objects.get(id=pk)
	transaction=TransactionTypes.objects.get(code='700')
	account_number=member.account_number
	max_share_obj=SharesUnits.objects.last()
	max_share=max_share_obj.unit
	status1='ACTIVE'

	unit_cost_selected=0
	if MembersShareConfigurations.objects.all().exists():
		unit_cost_obj=MembersShareConfigurations.objects.first()
		unit_cost_selected=unit_cost_obj.unit_cost

	if request.method=="POST":
		tdate=get_current_date(now)
		status='UNTREATED'
		receipt_status='UNUSED'
		receipt_status1='USED'
		receipt_id=request.POST.get('receipt_no')

		if transaction.receipt_type == 'MANUAL':
			if Receipts.objects.filter(receipt=receipt_id,status=receipt_status).exists():
				receipt_obj=Receipts.objects.get(receipt=receipt_id,status=receipt_status)
				receipt=receipt_obj.receipt
				receipt_obj.status=receipt_status1
				receipt_obj.save()
			else:
				messages.info(request,'Receipt Already in Use or Not Available')
				return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview', args=(pk,)))
		else:
			receipt_obj=AutoReceipt.objects.first()
			receipt= str(receipt_obj.receipt).zfill(5)
			receipt_obj.receipt=int(receipt_obj.receipt)+1
			receipt_obj.save()


		units = request.POST.get('units')
		unit_cost = request.POST.get('unit_cost')
		total_amount = request.POST.get('total_amount')
		purpose = request.POST.get('narration')
		payment_date = request.POST.get('payment_date')
		payment_reference = request.POST.get('payment_reference')
		account_id = request.POST.get('account')
		bank_accounts=CooperativeBankAccounts.objects.get(id=account_id)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username

		if not units or units=='0':
			messages.info(request,'Unit is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview',args=(pk,)))

		if not unit_cost or unit_cost=='0':
			messages.info(request,'Unit cost is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview',args=(pk,)))

		if not total_amount or total_amount=='0':
			messages.info(request,'Amount Paid is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview',args=(pk,)))

		if not purpose:
			messages.info(request,'Purpose is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview',args=(pk,)))

		if not payment_reference:
			messages.info(request,'Payment Reference is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview',args=(pk,)))


		if float(total_amount) != float(unit_cost) * float(units):
			messages.info(request,'Invalid Amount Specification')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview', args=(pk,)))


		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)
		else:
			image_url=None


		if MembersShareAccounts.objects.filter(member=member).exists():
			record=MembersShareAccounts.objects.filter(member=member).first()

			if (int(record.shares) + int(units)) > int(record.member.member.shares):
				messages.info(request,'You have exceeded maximum shares allowed')
				return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview', args=(pk,)))

			record.shares=int(record.shares) + int(units)
			record.unit_cost=unit_cost
			record.total_cost=float(record.total_cost) + float(total_amount)
			record.save()

		else:
			messages.info(request,'Account Does not exist')
			return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview', args=(pk,)))

		cash_record=MembersCashDeposits(status=status,tdate=tdate,receipt=receipt,payment_evidience=image_url,bank_accounts=bank_accounts,member=member.member,transaction=transaction,account_number=account_number,amount=total_amount,payment_reference=payment_reference,payment_date=payment_date,purpose=purpose,processed_by=processed_by.username)
		cash_record.save()

		ledger=PersonalLedger.objects.filter(account_number=account_number).order_by('id').last()


		debit=0
		credit=total_amount
		balance=float(ledger.balance) + float(total_amount)
		particulars= str(units) + " Unit(s) Share Payment, at unit cost of " + str(unit_cost) +  " as at " + str(now)


		post_to_ledger(
					member.member,
					transaction,
					account_number,
					particulars,
					debit,
					credit,
					balance,
					get_current_date(now),
					status1,
					tdate,processed_by,
					)
		messages.success(request,'Record Saved Successfully')
		return HttpResponseRedirect(reverse('Cash_Deposit_Shares_Preview', args=(pk,)))

	form.fields['unit_cost'].initial=unit_cost_selected
	form.fields['payment_date'].initial=now


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'member':member,
	'form':form,
	}
	return render(request,'deskofficer_templates/Cash_Deposit_Shares_Preview.html',context)



def Cash_Deposit_Welfare_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Members for Cash Deposit for Welfare"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Cash_Deposit_Welfare_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Cash_Deposit_Welfare_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	transaction=TransactionTypes.objects.get(code='800')
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Search'))
		members=MembersAccountsDomain.objects.filter(Q(member__file_no__icontains=form['title'].value()) |Q(member__ippis_no__icontains=form['title'].value()) |Q(member__phone_number__icontains=form['title'].value()) | Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value())).filter(transaction=transaction)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Cash_Deposit_Welfare_list_load.html',context)


def Cash_Deposit_Welfare_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=Cash_Deposit_Welfare_Preview_Form(request.POST or None)

	transaction=TransactionTypes.objects.get(code='800')
	status = 'UNTREATED'
	receipt_status='UNUSED'
	receipt_status1='USED'
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)

	# return HttpResponse(pk)
	member=MembersAccountsDomain.objects.get(id=pk)

	if request.method=="POST":
		enforce_payment=request.POST.get('enforce_payment')


		receipt_id=request.POST.get('receipt_no')

		if transaction.receipt_type=='MANUAL':
			if Receipts.objects.filter(receipt=receipt_id,status=receipt_status).exists():
				receipt_obj=Receipts.objects.get(receipt=receipt_id,status=receipt_status)
				receipt=receipt_obj.receipt
				receipt_obj.status=receipt_status1
				receipt_obj.save()
			else:
				messages.info(request,'Receipt Already in Use or Not Available')
				return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Preview', args=(pk,)))
		else:
			receipt_obj=AutoReceipt.objects.first()
			receipt= str(receipt_obj.receipt).zfill(5)
			receipt_obj.receipt=int(receipt_obj.receipt)+1
			receipt_obj.save()

		amount = request.POST.get('amount')
		if not amount or amount =='0':
			messages.error(request,'Paid Amount is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Preview',args=(pk,)))

		payment_reference = request.POST.get('payment_reference')
		if not payment_reference:
			messages.error(request,'Payment reference is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Preview',args=(pk,)))

		purpose = request.POST.get('narration')
		if not purpose:
			messages.error(request,'Narration is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Preview',args=(pk,)))

		year = request.POST.get('year')
		if not year:
			messages.error(request,'Year is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Preview',args=(pk,)))

		payment_date = request.POST.get('payment_date')



		account_id = request.POST.get('account')
		bank_accounts=CooperativeBankAccounts.objects.get(id=account_id)


		if request.FILES.get('image', False):
			image = request.FILES['image']
			fs=FileSystemStorage()
			filename=fs.save(image.name,image)
			image_url=fs.url(filename)
		else:
			image_url=None

		if not enforce_payment:
			if MembersWelfareAccounts.objects.filter(member=member,year=year).exists():
				messages.info(request,'Record Already Exist for this Member for Year Entered')
				return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Preview',args=(pk,)))



		MembersCashDeposits(member=member.member,
							bank_accounts=bank_accounts,
							account_number=member.account_number,
							transaction=transaction,
							amount=amount,
							payment_reference=payment_reference,
							payment_evidience=image_url,
							receipt=receipt,
							purpose=purpose,
							payment_date=payment_date,
							processed_by=processed_by.username,
							status=status,
							tdate=tdate).save()


		if MembersWelfareAccounts.objects.filter(member=member,year=year).exists():
			record_exist=MembersWelfareAccounts.objects.filter(member=member,year=year).first()
			amount_exist=record_exist.amount

			record_exist.amount=float(amount) + float(amount_exist)
			record_exist.save()
			messages.success(request,'Record Updated Successfully')
		else:
			MembersWelfareAccounts(member=member,
									amount=amount,
									year=year,
									status=status,
									tdate=tdate,
									processed_by=processed_by.username).save()
			messages.success(request,'Record Saved Successfully')
		return HttpResponseRedirect(reverse('Cash_Deposit_Welfare_Search'))

	form.fields['payment_date'].initial=now


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'member':member,
	'form':form,
	}
	return render(request,'deskofficer_templates/Cash_Deposit_Welfare_Preview.html',context)


def Cash_Deposit_Savings_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Cash Deposit"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Cash_Deposit_Savings_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})



def Cash_Deposit_Savings_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Search'))

		members=searchMembers(form['title'].value(),status)
		# members=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)


		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Cash_Deposit_Savings_list_load.html',context)


def Cash_Deposit_Savings_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	records=MembersAccountsDomain.objects.filter(member=member,transaction__source__title="SAVINGS")

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'member':member,
	}
	return render(request,'deskofficer_templates/Cash_Deposit_Savings_Load.html',context)


def Cash_Deposit_Savings_Preview(request,pk):
	form=Cash_Deposit_Savings_form(request.POST or None)
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	receipt_status='UNUSED'
	receipt_status1='USED'
	status1='ACTIVE'
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	status='UNTREATED'
	tdate=get_current_date(now)

	member=MembersAccountsDomain.objects.get(id=pk)



	if request.method=="POST":
		if member.transaction.receipt_type == 'MANUAL':
			receipt_id = request.POST.get('receipt_no')
			if Receipts.objects.filter(receipt=receipt_id,status=receipt_status).exists():
				receipt_obj=Receipts.objects.get(receipt=receipt_id,status=receipt_status)
				receipt=receipt_obj.receipt
				receipt_obj.status=receipt_status1
				receipt_obj.save()
			else:
				messages.info(request,'Receipt Already in Use or Not Available')
				return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Preview', args=(pk,)))
		else:
			receipt_obj=AutoReceipt.objects.first()
			receipt= str(receipt_obj.receipt).zfill(5)
			receipt_obj.receipt=int(receipt_obj.receipt)+1
			receipt_obj.save()

		transaction=member.transaction
		account_number=member.account_number


		amount=request.POST.get('amount')
		payment_reference=request.POST.get('payment_reference')
		payment_date=request.POST.get('payment_date')

		purpose=request.POST.get('purpose')

		bank_accounts_id=request.POST.get("bank_accounts")
		bank_accounts=CooperativeBankAccounts.objects.get(id=bank_accounts_id)


		if request.FILES.get('payment_evidience', False):
			payment_evidience = request.FILES['payment_evidience']
			fs=FileSystemStorage()
			filename=fs.save(payment_evidience.name,payment_evidience)
			payment_evidience_url=fs.url(filename)
		else:
			payment_evidience_url=None

		if MembersCashDeposits.objects.filter(member=member.member,transaction=transaction,account_number=account_number,amount=amount,payment_reference=payment_reference).exists():
			messages.info(request,'This transaction has already been posted')
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Preview',args=(pk,)))

		if not amount  or amount=='0':
			messages.info(request,'Paid Amount is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Preview',args=(pk,)))

		if not purpose:
			messages.info(request,'Purpose is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Preview',args=(pk,)))

		if not payment_reference:
			messages.info(request,'Payment Reference is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Preview',args=(pk,)))

		particulars=purpose
		transaction_period=now
		debit=0
		credit=amount
		balance=credit



		if PersonalLedger.objects.filter(member=member.member,transaction=transaction,account_number=account_number).exists():

			ledger=PersonalLedger.objects.filter(member=member.member,transaction=transaction,account_number=account_number).last()
			ledger_balance=ledger.balance
			balance=float(ledger_balance)+float(amount)

			cash_record=MembersCashDeposits(tdate=tdate,status=status,receipt=receipt,payment_evidience=payment_evidience_url,bank_accounts=bank_accounts,member=member.member,transaction=transaction,account_number=account_number,amount=amount,payment_reference=payment_reference,payment_date=payment_date,purpose=purpose,processed_by=processed_by)
			cash_record.save()


			post_to_ledger(
						member.member,
						transaction,
						account_number,
						particulars,
						debit,
						credit,
						balance,
						transaction_period,
						status1,
						tdate,processed_by
						)

			messages.success(request,'Payment Posted Successfully')
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Load',args=(member.member.pk,)))
		else:

			cash_record=MembersCashDeposits(tdate=tdate,status=status,receipt=receipt,payment_evidience=payment_evidience_url,bank_accounts=bank_accounts,member=member.member,transaction=transaction,account_number=account_number,amount=amount,payment_reference=payment_reference,payment_date=payment_date,purpose=purpose,processed_by=processed_by)
			cash_record.save()


			post_to_ledger(
						member.member,
						transaction,
						account_number,
						particulars,
						debit,
						credit,
						balance,
						transaction_period,
						status1,
						tdate,processed_by
						)


			messages.success(request,'Payment Posted Successfully')
			return HttpResponseRedirect(reverse('Cash_Deposit_Savings_Load',args=(member.member.pk,)))

	form.fields['payment_date'].initial= now


	context={

	'member':member,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	# 'transaction':transaction,
	}
	return render(request,'deskofficer_templates/Cash_Deposit_Savings_Preview.html',context)


def Cash_Deposit_Loans_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Cash Deposit"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Cash_Deposit_Loans_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Cash_Deposit_Loan_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Cash_Deposit_Loans_Search'))

		members=searchMembers(form['title'].value(),status)
		# members=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Cash_Deposit_Loan_list_load.html',context)


def Cash_Deposit_Loans_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Deposit_Loans_form(request.POST or None)
	status1='ACTIVE'
	status='INACTIVE'
	tdate=get_current_date(now)
	processed_by=CustomUser.objects	.get(id=request.user.id)
	processed_by=processed_by.username

	transaction_status='UNTREATED'
	loan_status='INACTIVE'
	processed_by=CustomUser.objects	.get(id=request.user.id)



	member=Members.objects.get(id=pk)
	loans=[]
	loan_cleared_status=False

	if request.method=="POST" and 'btn_display' in request.POST:
		transaction_id=request.POST.get("transactions")
		transaction=TransactionTypes.objects.get(id=transaction_id)

		loans=LoansRepaymentBase.objects.filter(member=member,transaction=transaction).filter(Q(balance__lt=0))

		payment_date=request.POST.get('payment_date')
		if payment_date:
			pass
		else:
			messages.info(request,'Payment Date is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Loans_Preview',args=(pk,)))


	if request.method=="POST" and 'btn_submit' in request.POST:
		processed_by=CustomUser.objects.get(id=request.user.id)

		loan_number_id=request.POST.get("account_number")
		loan_number=LoansRepaymentBase.objects.get(id=loan_number_id)


		transaction_id=request.POST.get("transactions")
		transaction=TransactionTypes.objects.get(id=transaction_id)

		amount=request.POST.get('amount')
		payment_reference=request.POST.get('payment_reference')
		payment_date=request.POST.get('payment_date')
		purpose=request.POST.get('purpose')


		bank_accounts_id=request.POST.get("bank_accounts")
		bank_accounts=CooperativeBankAccounts.objects.get(id=bank_accounts_id)

		if request.FILES.get('payment_evidience', False):
			payment_evidience = request.FILES['payment_evidience']
			fs=FileSystemStorage()
			filename=fs.save(payment_evidience.name,payment_evidience)
			payment_evidience_url=fs.url(filename)
		else:
			payment_evidience_url=None


		account_number=loan_number.loan_number
		if payment_date:
			pass
		else:
			messages.info(request,'Payment Date is Missing')
			return HttpResponseRedirect(reverse('Cash_Deposit_Loans_Preview',args=(pk,)))

		if MembersCashDeposits.objects.filter(bank_accounts=bank_accounts,member=member,account_number=account_number,transaction=transaction,amount=amount,payment_reference=payment_reference).exists():
			messages.info(request,'This transaction has already been posted')
			return HttpResponseRedirect(reverse('Cash_Deposit_Loans_Preview',args=(pk,)))


		particulars=purpose
		transaction_period=get_current_date(now)
		debit=0
		credit=amount

		if PersonalLedger.objects.filter(member=member,transaction=transaction,account_number=account_number).exists():
			ledger=PersonalLedger.objects.filter(member=member,transaction=transaction,account_number=account_number).last()
			ledger_balance=ledger.balance
			balance=float(ledger_balance)+float(amount)

			cash_record=MembersCashDeposits(member=member,
											bank_accounts=bank_accounts,
											account_number=account_number,
											transaction=transaction,
											amount=amount,
											payment_reference=payment_reference,
											purpose=purpose,
											payment_evidience=payment_evidience_url,
											payment_date=payment_date,
											processed_by=processed_by.username,
											status=transaction_status,
											tdate=tdate,
											)
			cash_record.save()

			loan_record=LoansRepaymentBase.objects.get(loan_number=account_number)
			loan_record.amount_paid=float(loan_record.amount_paid)+float(amount)
			loan_record.balance=float(loan_record.balance)+float(amount)
			loan_record.save()

			
			# loan_group=LoansRepaymentBase.objects.filter(loan_number=account_number).update(amount_paid=F("amount_paid")+float(amount),balance=F("balance")+float(amount))

			if LoansRepaymentBase.objects.filter(loan_number=account_number).filter(Q(balance__gte=0)):
				loan_cleared_status=True
				record_update=LoansRepaymentBase.objects.filter(loan_number=account_number).update(status=loan_status)


				loan=LoansRepaymentBase.objects.get(loan_number=account_number)
				record_cleared=LoansCleared(loan=loan,
											processed_by=processed_by.username,
											status=transaction_status,
											tdate=tdate)
				record_cleared.save()



			if LoansRepaymentBase.objects.filter(loan_number=account_number).filter(Q(balance__gte=0)).exists():

				loan_record.status=status
				loan_record.save()



			post_to_ledger(member,
							transaction,
							account_number,
							particulars,
							debit,
							credit,
							balance,
							transaction_period,
							status1,
							tdate,processed_by
							)

			if loan_cleared_status:
				PersonalLedger.objects.filter(member=member,transaction=transaction,account_number=account_number).update(status=status)

			messages.success(request,'Transaction Completed Successfully')
			return HttpResponseRedirect(reverse('Cash_Deposit_Loans_Preview',args=(pk,)))
		else:
			messages.info(request,'This Account does not exist')
			return HttpResponseRedirect(reverse('Cash_Deposit_Loans_Preview',args=(pk,)))

	form.fields['payment_date'].initial=now

	context={
	'member':member,
	'form':form,
	'loans':loans,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Cash_Deposit_Loans_Preview.html',context)



############################################################
##################### CASH WITHDRAWALN######################
############################################################
def Xmas_Savings_Shortlisting_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	status='UNTREATED'
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)


	members_array=[]
	button_enabled=False


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Xmas_Savings_Shortlisting_form(request.POST or None)
	title="LIST OF MEMBERS FOR XMAS SAVINGS SHORTLISTING"
	transaction=TransactionTypes.objects.get(code='103')

	if request.method == 'POST' and 'btn-fetch' in request.POST:
		transaction_date=request.POST.get('transaction_date')
		batch=request.POST.get("batch")


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_date, date_format)
		transaction_date=get_current_date(dtObj)



		members=MembersAccountsDomain.objects.filter(transaction=transaction)
		for member in members:
			if PersonalLedger.objects.filter(account_number=member.account_number).exists():
				record=PersonalLedger.objects.filter(account_number=member.account_number).last()
				if record.balance >0:
					members_array.append((member.member.get_member_Id,member.member.get_full_name,record.account_number,record.balance))

		if members_array:
			button_enabled=True

		if Xmas_Savings_Generated.objects.filter(batch=batch).exists():
			button_enabled=False

	if request.method == 'POST' and 'btn-submit' in request.POST:
		submission_status='PENDING'
		processing_status='UNPROCESSED'
		account_status='NO'
		transaction_date=request.POST.get('transaction_date')
		
		batch_id=request.POST.get("batch")
		batch=XmasSavingsTransactionPeriod.objects.get(id=batch_id)

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_date, date_format)
		transaction_date=get_current_date(dtObj)

		year = transaction_date.year
		# batch= str(year) + " " + batch.title

		if Xmas_Savings_Generated.objects.filter(batch=batch).exists():
			messages.error(request,'Data Already Generated for this Year')
			return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_list_Load'))

		if not transaction_date:
			messages.error(request,'Please select Transaction Period')
			return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_list_Load'))

		members=MembersAccountsDomain.objects.filter(transaction=transaction)
		for member in members:
			if PersonalLedger.objects.filter(account_number=member.account_number).exists():
				record=PersonalLedger.objects.filter(account_number=member.account_number).last()
				if record.balance >0:

					Xmas_Savings_Shortlist(transaction=member,
										amount=record.balance,
										period=transaction_date,
										payment_channel='CASH',
										status=status,
										batch=batch.batch,
										submission_status=submission_status,
										processing_status=processing_status,
										account_status=account_status,
										processed_by=processed_by.username,
										tdate=tdate).save()
		Xmas_Savings_Generated(batch=batch.batch,processed_by=processed_by.username,tdate=tdate).save()

		messages.success(request,'Records Submitted Successfully')
		return HttpResponseRedirect(reverse('deskofficer_home'))


	form.fields['transaction_date'].initial=now

	context={
	'form':form,
	'members_array':members_array,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'button_enabled':button_enabled,

	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_list_Load.html',context)



def Xmas_Savings_Shortlisting_Filter_Batch_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)
	transaction=TransactionTypes.objects.get(code='103')



	form=Xmas_Savings_Shortlisting_Export_form(request.POST or None)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == 'POST':
		batch=request.POST.get('batch')
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Filter_List_Load',args=(batch,'CASH',)))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Filter_Batch_Load.html',context)


def Xmas_Savings_Shortlisting_Filter_List_Load(request,batch,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Xmas_Savings_Shortlisting_Export_form(request.POST or None)



	if request.method == 'POST' and 'btn-fetch' in request.POST:
		category=request.POST.get("category")
		records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=category).exclude(status=status)

		context={
		'task_array':task_array,
		'form':form,
		'records':records,
		'batch':batch,
		'payment':category,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Filter_List_Load.html',context)

	if request.method == 'POST' and 'btn-process' in request.POST:		
		category=request.POST.get("category")

		if Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=category).exclude(status=status).exists():
			Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=category).exclude(status=status).update(status=status)
		else:
			messages.error(request,'No Record Found')

		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Filter_List_Load',args=(batch,category)))


	records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment).exclude(status=status)

	context={
	'task_array':task_array,
	'form':form,
	'records':records,
	'batch':batch,
	'payment':payment,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Filter_List_Load.html',context)


def Xmas_Savings_Shortlisting_Switching(request,pk):
	item=Xmas_Savings_Shortlist.objects.get(id=pk)
	batch=item.batch
	payment=item.payment_channel

	if item.payment_channel == "CASH":
		item.payment_channel='TRANSFERRED'
	else:
		item.payment_channel='CASH'
	item.save()
	return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Filter_List_Load',args=(batch,payment,)))


def Xmas_Savings_Shortlisting_Account_Linkage_Batch_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	transaction=TransactionTypes.objects.get(code='103')

	form=Xmas_Savings_Shortlisting_Export_form(request.POST or None)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == 'POST':
		batch=request.POST.get('batch')
		payment=request.POST.get('category')
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Account_Linkage_List_Load',args=(batch,payment,)))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Account_Linkage_Batch_Load.html',context)


def Xmas_Savings_Shortlisting_Account_Linkage_List_Load(request,batch,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'
	processing_status='UNPROCESSED'


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if payment == "CASH":
		account_status='NO'
		records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,account_status=account_status,processing_status=processing_status)

		context={
		'task_array':task_array,
		'records':records,
		'batch':batch,
		'payment':payment,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Account_Linkage_List_Load.html',context)

	elif payment == 'TRANSFERRED':
		code=0
		if XmasTransferDefaultSaving.objects.all().exists():
			default_account=XmasTransferDefaultSaving.objects.all().first()
			code=default_account.transaction.code

		account_status='NO'
		records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,account_status=account_status,processing_status=processing_status)

		context={
		'task_array':task_array,
		'records':records,
		'batch':batch,
		'payment':payment,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		'code':code,
		}
		return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Account_Transfer_List_Load.html',context)




def Xmas_Savings_Shortlisting_Account_Assignment_Load_Default(request,batch,payment):
	status='TREATED'
	processing_status='UNPROCESSED'
	account_status='NO'
	account_status1='YES'
	records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,account_status=account_status,processing_status=processing_status)
	if records:
		for record in records:
			if MembersBankAccounts.objects.filter(member_id=record.transaction.member).exists():
				selected_account=MembersBankAccounts.objects.filter(member_id=record.transaction.member).order_by('account_priority').first()
				record.bank_account=selected_account
				record.account_status=account_status1
				record.save()
	else:
		messages.error(request,'No Record Found')

	return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Account_Linkage_List_Load',args=(batch,payment,)))


def Xmas_Savings_Shortlisting_Account_Assignment(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Xmas_Savings_Shortlist.objects.get(id=pk)
	if request.method == 'POST':
		account_status='YES'
		account_id=request.POST.get('account')
		account=MembersBankAccounts.objects.get(id=account_id)

		member.bank_account=account
		member.account_status=account_status
		member.details="Xmas Savings payment"
		member.save()
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Account_Linkage_List_Load',args=(member.batch,member.payment_channel,)))

	accounts=MembersBankAccounts.objects.filter(member_id=member.transaction.member).order_by("account_priority")

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'accounts':accounts,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Account_Assignment.html',context)


def Xmas_Savings_Shortlisting_Account_Transfer(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Xmas_Savings_Shortlist.objects.get(id=pk)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if request.method == 'POST':
		tdate=get_current_date(now)
		account_status='YES'
		processing_status='PROCESSED'
		status1='ACTIVE'
		transaction_id = request.POST.get('transaction')
		transaction=MembersAccountsDomain.objects.get(id=transaction_id)

		particulars='Posting from Xmas Savings for ' + member.batch
		debit = 0
		credit =  member.amount
		balance=member.amount

		ledger=get_ledger_balance(transaction.account_number)

		post_to_ledger(member.transaction.member,
					transaction.transaction,
					transaction.account_number,
					particulars,
					debit,
					credit,
					float(ledger) + float(balance),
					get_current_date(now),
					status1,
					tdate,processed_by)

		member.details="Cash transferred to " + transaction.transaction.name + '(' + str(transaction.account_number) + ')'
		member.account_status=account_status
		member.processing_status=processing_status
		member.save()
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Account_Linkage_List_Load',args=(member.batch,member.payment_channel,)))

	savings=MembersAccountsDomain.objects.filter(member_id=member.transaction.member,transaction__source="SAVINGS")

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'savings':savings,
	'member':member,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Account_Transfer.html',context)




def Xmas_Savings_Shortlisting_Export_Batch_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)




	form=Xmas_Savings_Shortlisting_Export_form(request.POST or None)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == 'POST':
		batch=request.POST.get('batch')
		payment=request.POST.get('category')
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Export_List_Load',args=(batch,payment,)))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Export_Batch_Load.html',context)



def Xmas_Savings_Shortlisting_Export_List_Load(request,batch,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)



	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status)

	context={
	'task_array':task_array,
	'records':records,
	'batch':batch,
	'payment':payment,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Export_List_Load.html',context)



def export_xmas_savings_payment_xls(request,batch,payment):
	status='TREATED'
	response = HttpResponse(content_type='application/ms-excel')
	if payment == "CASH":
		response['Content-Disposition'] = 'attachment; filename="xmas_savings_paid.xls"'

		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

		row_num = 0  # Sheet header, first row

		font_style = xlwt.XFStyle()
		font_style.font.bold = True

		columns = ['Member ID', 'Name', 'Saving Number', 'Bank', 'Account Name','Account Number','Amount']

		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

		font_style = xlwt.XFStyle()  # Sheet body, remaining rows


		rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number','bank_account__bank','bank_account__account_name', 'bank_account__account_number', 'amount')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
		wb.save(response)

	elif payment == "TRANSFERRED":
		response['Content-Disposition'] = 'attachment; filename="xmas_savings_transferred.xls"'

		wb = xlwt.Workbook(encoding='utf-8')
		ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

		row_num = 0  # Sheet header, first row

		font_style = xlwt.XFStyle()
		font_style.font.bold = True

		columns = ['Member ID', 'Name', 'Saving Number','Amount']

		for col_num in range(len(columns)):
			ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

		font_style = xlwt.XFStyle()  # Sheet body, remaining rows


		rows = Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status).values_list('transaction__member__member_id','transaction__member__full_name','transaction__account_number', 'amount')

		for row in rows:
			row_num += 1
			for col_num in range(len(row)):
				ws.write(row_num, col_num, row[col_num], font_style)
		wb.save(response)

	return response



def Xmas_Savings_Shortlisting_Processing_Batch_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)




	form=Xmas_Savings_Shortlisting_Export_form(request.POST or None)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == 'POST':
		batch=request.POST.get('batch')
		payment="CASH"
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Processing_List_Load',args=(batch,payment,)))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Processing_Batch_Load.html',context)


def Xmas_Savings_Shortlisting_Processing_List_Load(request,batch,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'
	processing_status='UNPROCESSED'




	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,processing_status=processing_status)

	context={
	'task_array':task_array,
	'records':records,
	'batch':batch,
	'payment':payment,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Processing_List_Load.html',context)


def Xmas_Savings_Shortlisting_Processing_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'




	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Xmas_Savings_Shortlisting_Processing_Preview_form(request.POST or None)

	record=Xmas_Savings_Shortlist.objects.get(id=pk)

	if request.method == 'POST':
		processing_status='PROCESSED'
		amount_paid = request.POST.get('amount_paid')

		if record.account_status == 'NO':
			messages.error(request,'Please add Bank Account paid to for this Member')
			return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Processing_Preview',args=(pk,)))

		record.amount_paid=amount_paid
		record.balance=float(record.amount)-float(amount_paid)
		record.processing_status=processing_status
		record.save()
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Processing_List_Load',args=(record.batch,record.payment_channel,)))

	form.fields['generated_amount'].initial=record.amount
	form.fields['amount_paid'].initial=record.amount
	context={
	'task_array':task_array,
	'record':record,
	'batch':record.batch,
	'payment':record.payment_channel,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Processing_Preview.html',context)

def Xmas_Savings_Shortlisting_Processing_Update_Bank_account(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'




	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=Xmas_Savings_Shortlist.objects.get(id=pk)

	if request.method == 'POST':
		account_status='YES'
		account_id = request.POST.get('account')
		bank_account=MembersBankAccounts.objects.get(id=account_id)


		record.bank_account=bank_account
		record.account_status=account_status
		record.save()
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Processing_List_Load',args=(record.batch,record.payment_channel,)))

	accounts=MembersBankAccounts.objects.filter(member_id=record.transaction.member)


	context={
	'task_array':task_array,
	'record':record,
	'batch':record.batch,
	'payment':record.payment_channel,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'accounts':accounts,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Processing_Update_Bank_account.html',context)



def Xmas_Savings_Shortlisting_Ledger_Posting_Batch_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	form=Xmas_Savings_Shortlisting_Export_form(request.POST or None)
	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == 'POST':
		batch=request.POST.get('batch')
		payment="CASH"
		return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Ledger_Posting_List_Load',args=(batch,payment,)))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Ledger_Posting_Batch_Load.html',context)


def Xmas_Savings_Shortlisting_Ledger_Posting_List_Load(request,batch,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	status='TREATED'
	processing_status='PROCESSED'
	submission_status='PENDING'
	submission_status1='SUBMITTED'

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	total_positive_balance=0
	total_negative_balance=0
	total_amount_paid=0
	total_amount_generated=0

	records=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,processing_status=processing_status,submission_status=submission_status)
	queryset=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,processing_status=processing_status,submission_status=submission_status).aggregate(total_generated=Sum('amount'),total_paid=Sum('amount_paid'),total_balance=Sum('balance'),)
	queryset1=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,processing_status=processing_status,submission_status=submission_status).filter(Q(balance__lt=0)).aggregate(total_neg_balance=Sum('balance'),)
	queryset2=Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,processing_status=processing_status,submission_status=submission_status).filter(Q(balance__gt=0)).aggregate(total_pos_balance=Sum('balance'),)

	if queryset:
		if queryset['total_generated']:
			total_amount_generated=queryset['total_generated']
		if queryset['total_paid']:
			total_amount_paid=abs(float(queryset['total_paid']))

	if queryset1:
		total_negative_balance=queryset1['total_neg_balance']

	if queryset2:
		total_positive_balance=queryset2['total_pos_balance']

	if request.method == "POST":
		tdate=get_current_date(now)
		status1='ACTIVE'
		if not records:
			messages.error(request,'No Record Found')
			return HttpResponseRedirect(reverse('Xmas_Savings_Shortlisting_Ledger_Posting_List_Load',args=(batch,payment,)))
		for record in records:
			particulars="Xmas Savings Payment for " + str(batch)
			debit=record.amount_paid
			credit=0
			balance=record.amount_paid

			ledger=get_ledger_balance(record.transaction.account_number)

			post_to_ledger(record.transaction.member,
					record.transaction.transaction,
					record.transaction.account_number,
					particulars,
					debit,
					credit,
					float(ledger) - float(balance),
					get_current_date(now),
					status1,
					tdate,processed_by)
		Xmas_Savings_Shortlist.objects.filter(batch=batch,payment_channel=payment,status=status,processing_status=processing_status,submission_status=submission_status).update(submission_status=submission_status1)
		return HttpResponseRedirect(reverse('deskofficer_home'))

	context={
	'task_array':task_array,
	'records':records,
	'batch':batch,
	'payment':payment,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'total_amount_generated':total_amount_generated,
	'total_amount_paid':total_amount_paid,
	'total_negative_balance':total_negative_balance,
	'total_positive_balance':total_positive_balance,
	}
	return render(request,'deskofficer_templates/Xmas_Savings_Shortlisting_Ledger_Posting_List_Load.html',context)


def Cash_Withdrawal_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Cash Withdrawal"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Cash_Withdrawal_Search.html',
				{'form':form,'title':title,'task_array':task_array,
				'task_enabler_array':task_enabler_array,
	'default_password':default_password,}
				)


def Cash_Withdrawal_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS FOR CASH WITHDRAWALS"
	status="ACTIVE"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Cash_Withdrawal_Search'))

		members=searchMembers(form['title'].value(),status)
		# members=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Cash_Withdrawal_list_load.html',context)


def Cash_Withdrawal_Transactions_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Withdrawal_form(request.POST or None)
	member=Members.objects.get(id=pk)
	ledger_blance=0
	account_number=""
	member_selected=[]

	if request.method=="POST" and 'btn_fetch' in request.POST:
		transaction_id=request.POST.get('transactions')
		transaction=WithdrawableTransactions.objects.get(id=transaction_id)

		member_selected=MembersAccountsDomain.objects.get(member=member,transaction=transaction.transaction)

		# current_date = datetime.date.today()
		current_date = get_current_date(now)
		maturity_date=current_date + relativedelta(months=transaction.maturity)

		if StandingOrderAccounts.objects.filter(transaction=member_selected).exists():
			record = StandingOrderAccounts.objects.filter(transaction=member_selected).first()
			if PersonalLedger.objects.filter(member=member,account_number=member_selected.account_number).exists():
				ledger=PersonalLedger.objects.filter(member=member,account_number=member_selected.account_number).last()
				ledger_blance=ledger.balance
				account_number=member_selected.account_number
			else:
				messages.info(request,'You do not have any Balance in this Transaction')
				return HttpResponseRedirect(reverse('Cash_Withdrawal_Transactions_load',args=(pk,)))


	if request.method=="POST" and 'btn_submit' in request.POST:
		transaction_id=request.POST.get('transactions')
		transaction=WithdrawableTransactions.objects.get(transaction_id=transaction_id)

		member_selected=MembersAccountsDomain.objects.get(member=member,transaction=transaction.transaction)

		current_date = datetime.date.today()
		maturity_date=current_date + relativedelta(months=transaction.maturity)

		certification_status='PENDING'
		approval_status='PENDING'

		if StandingOrderAccounts.objects.filter(transaction=member_selected).exists():
			record = StandingOrderAccounts.objects.filter(transaction=member_selected).first()
			ledger=PersonalLedger.objects.filter(member=member,account_number=member_selected.account_number).last()
			ledger_balance=ledger.balance
			account_number=member_selected.account_number


		transaction_date_id=request.POST.get('tdate')
		transaction_date=get_current_date(datetime.datetime.strptime(tdate_id, '%Y-%m-%d'))

		withdrawal_amount=request.POST.get('amount')
		narration=request.POST.get('narration')

		if float(ledger_balance) < float(withdrawal_amount):
			messages.info(request,'Invalid Amount Specification')
			return HttpResponseRedirect(reverse('Cash_Withdrawal_Transactions_load',args=(pk,)))
		else:
			status='UNTREATED'
			processed_by=CustomUser.objects.get(id=request.user.id)

			if MembersCashWithdrawalsApplication.objects.filter(member=member_selected,status=status).exists():
				messages.info(request,'You still have Open Transaction')
				return HttpResponseRedirect(reverse('Cash_Withdrawal_Transactions_load',args=(pk,)))

			record=MembersCashWithdrawalsApplication(approval_status=approval_status,transaction_date=transaction_date,member=member_selected,
				tdate=current_date,
				amount=withdrawal_amount,
				narration=narration,
				processed_by=processed_by.username,
				ledger_balance=ledger_balance,
				certification_status=certification_status,
				maturity_date=maturity_date,
				status=status
				)
			record.save()
			# messages.success(request,'Transaction Completed Successfully')
			return HttpResponseRedirect(reverse('deskofficer_home'))


	button_enabled=False
	if member_selected:
		if member_selected.loan_lock.title == 'NO':
			button_enabled=True

	form.fields['tdate'].initial=get_current_date(now)
	context={
	'button_enabled':button_enabled,
	'member_selected':member_selected,
	'form':form,
	'member':member,
	'ledger_blance':ledger_blance,
	'account_number':account_number,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Cash_Withdrawal_Transactions_load.html',context)



def Cash_Withdrawal_Transactions_Request_Status_list_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Cash Withdrawal Status"
	form = search_with_date_Form(request.POST or None)
	form.fields['start_date'].initial=now
	form.fields['stop_date'].initial=now
	return render(request,'deskofficer_templates/Cash_Withdrawal_Transactions_Request_Status_list_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Cash_Withdrawal_Transactions_Request_Status_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS FOR CASH WITHDRAWALS"
	status="ACTIVE"

	status1='UNTREATED'

	form = searchForm(request.POST or None)
	members=[]
	if request.method == "POST":

		if not request.POST.get("title"):
			return HttpResponseRedirect(reverse('Cash_Withdrawal_Transactions_Request_Status_list_Search'))


		members=MembersCashWithdrawalsApplication.objects.filter(status=status1).filter(Q(member__member__file_no__icontains=form['title'].value()) |Q(member__member__ippis_no__icontains=form['title'].value()) |Q(member__member__phone_number__icontains=form['title'].value()) | Q(member__member__admin__first_name__icontains=form['title'].value()) | Q(member__member__admin__last_name__icontains=form['title'].value()) | Q(member__member__middle_name__icontains=form['title'].value()))

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Cash_Withdrawal_Transactions_Request_Status_list_Load.html',context)


def Cash_Withdrawal_Transactions_Request_Status_Drop(request,pk):
	MembersCashWithdrawalsApplication.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('deskofficer_home'))


def Cash_Withdrawal_Transactions_All_Uncleared_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS FOR CASH WITHDRAWALS"
	status='UNTREATED'

	records=MembersCashWithdrawalsApplication.objects.filter(status=status)

	context={
	'records':records,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Cash_Withdrawal_Transactions_All_Uncleared_list_Load.html',context)



def Cash_Withdrawal_Transactions_Approved_list_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Cash Withdrawal Status"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Cash_Withdrawal_Transactions_Approved_list_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})




def Cash_Withdrawal_Transactions_Approved_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS FOR CASH WITHDRAWALS"
	status="ACTIVE"

	status1='UNTREATED'

	form = search_with_date_Form(request.POST or None)
	members=[]
	if request.method == "POST":

		if not request.POST.get("title"):
			return HttpResponseRedirect(reverse('Cash_Withdrawal_Transactions_Approved_list_Search'))

		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'

		dtObj=datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)

		dtObj = datetime.datetime.strptime(stop_date, date_format)
		stop_date=get_current_date(dtObj)

		members=MembersCashWithdrawalsApplication.objects.filter(tdate__range=[start_date,stop_date],status=status1).filter(Q(member__member__file_no__icontains=form['title'].value()) |Q(member__member__ippis_no__icontains=form['title'].value()) |Q(member__member__phone_number__icontains=form['title'].value()) | Q(member__member__admin__first_name__icontains=form['title'].value()) | Q(member__member__admin__last_name__icontains=form['title'].value()) | Q(member__member__middle_name__icontains=form['title'].value()))

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Cash_Withdrawal_Transactions_Approved_list_Load.html',context)





############################################################
##################### MEMBERSHIP TERMINATION ##############
############################################################

def membership_termination_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Membership Request Termination"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_termination_search.html',{'form':form,'title':title,'task_array':task_array,'default_password':default_password,'task_enabler_array':task_enabler_array,'tasks':tasks})


def membership_termination_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Membership Termination Request"
	form = searchForm(request.POST)
	status="ACTIVE"
	members=[]
	if request.method == "POST":
		if not request.POST.get("title"):
			return HttpResponseRedirect(reverse('membership_termination_search'))
		members=searchMembers(form['title'].value(),status)

	context={
	'members':members,
	'title':title,
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_list_load.html',context)



def membership_termination_transactions_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Termination_Sources_upload_form(request.POST or None)
	member=Members.objects.get(id=pk)
	processing_status='UNPROCESSED'
	processed_by=CustomUser.objects.get(id=request.user.id)
	status='UNTREATED'
	approval_status="PENDING"
	allowed_records=Termination_Loan_Allowed.objects.all()
	lock_status='LOCKED'


	record_array=[]
	for item in allowed_records:
		record_array.append(item.termination.title)

	total_loan=0
	loans=LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member=member))
	queryset=LoansRepaymentBase.objects.filter(Q(balance__lt=0) & Q(member=member)).aggregate(total=Sum('balance'))

	if queryset:
		total_loan=queryset['total']

	tdate=get_current_date(now)

	if request.method =="POST":

		loan_amount=abs(float(request.POST.get('loan_amount')))
		termination_id=request.POST.get('termination_types')
		termination = Termination_Types.objects.get(id=termination_id)
		comment=request.POST.get('comment')

		applied_date_id = request.POST.get('date_applied')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(applied_date_id, date_format)
		applied_date=get_current_date(dtObj)



		maturity_date= get_current_date(now + relativedelta(months=int(termination.duration)))


		if float(loan_amount)==0:
			MemberShipTerminationRequest(member=member,
										termination=termination,
										loan_amount=loan_amount,
										comment=comment,
										applied_date=applied_date,
										processed_by=processed_by.username,
										status=status,
										approval_status=approval_status,
										maturity_date=maturity_date,
										tdate=tdate,
										processing_status=processing_status,
										).save()
		elif float(loan_amount)>0:
			if termination.title in record_array:
				MemberShipTerminationRequest(member=member,
											termination=termination,
											loan_amount=loan_amount,
											comment=comment,
											applied_date=applied_date,
											processed_by=processed_by.username,
											status=status,
											approval_status=approval_status,
											maturity_date=maturity_date,
											tdate=tdate,
											processing_status=processing_status,
											).save()
			else:
				messages.error(request,'Termination not Allowed while on loan, see the Management')
				return HttpResponseRedirect(reverse('membership_termination_transactions_load',args=(pk,)))

		else:
			messages.error(request,'Termination not Allowed while on loan, see the Management')
			return HttpResponseRedirect(reverse('membership_termination_transactions_load',args=(pk,)))

		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member.pk,)))
	form.fields['date_applied'].initial = now
	if total_loan:
		form.fields['loan_amount'].initial = abs(total_loan)
	form.fields['comments'].initial = "Please for your Consideration"
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'loans':loans,
	'member':member,
	'total_loan':total_loan,
	}
	return render(request,'deskofficer_templates/membership_termination_transactions_load.html',context)



def membership_termination_approved_list_processing_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Membership Termination Request"

	status="UNTREATED"
	processing_status='UNPROCESSED'
	approval_status='APPROVED'
	members=MemberShipTerminationRequest.objects.filter(approval_status=approval_status,status=status,processing_status=processing_status)

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_approved_list_processing_list_load.html',context)


def membership_termination_approved_list_processing_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	title="Membership Termination Request"
	tdate=get_current_date(now)
	status1='INACTIVE'
	status="UNTREATED"
	status2="TREATED"
	processed_by=CustomUser.objects.get(id=request.user.id)
	approval_status='PENDING'
	processing_status='UNPROCESSED'
	lock_status='LOCKED'
	if MemberShipTerminationRequest.objects.filter(member=pk).exists():
		member=MemberShipTerminationRequest.objects.get(member=pk)
	else:
		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(pk,)))
	
	savings=MembersAccountsDomain.objects.filter(member=member.member)
	schedule_status='UNSCHEDULED'


	record_array=[]
	for item in savings:
		ledger=PersonalLedger.objects.filter(member=item.member,account_number=item.account_number).last()
		if ledger:
			record_array.append((ledger.transaction.name,ledger.account_number,0,ledger.balance))


	loans=LoansRepaymentBase.objects.filter(member=member.member).filter(Q(balance__lt=0))
	if loans:
		for item in loans:
			record_array.append((item.transaction.name,item.loan_number,abs(item.balance)))
	amount=0
	if request.method == 'POST':

		for item in savings:
			ledger=PersonalLedger.objects.filter(member=item.member,account_number=item.account_number).last()
			if ledger:
				amount=float(amount)+ float(ledger.balance)
				MemberShipTerminationTransactionBalances(applicant=member,
												account_number=ledger.account_number,
												transaction=ledger.transaction,
												debit=0,
												credit=ledger.balance,
												status=status,
												processed_by=processed_by.username,
												tdate=tdate).save()

				post_to_ledger(member.member,
					ledger.transaction,
					ledger.account_number,
					"Termination of Membership payoff ",
					ledger.balance,
					0,
					0,
					get_current_date(now),
					status1,
					tdate,processed_by)

				PersonalLedger.objects.filter(account_number=ledger.account_number).update(status=status1)

		if loans:
			for item in loans:
				amount=float(amount)+ float(item.balance)
				MemberShipTerminationTransactionBalances(applicant=member,
												account_number=item.loan_number,
												transaction=item.transaction,
												debit=abs(item.balance),
												credit=0,
												status=status,
												processed_by=processed_by.username,
												tdate=tdate).save()

				post_to_ledger(member.member,
					item.transaction,
					item.loan_number,
					"Termination of Membership payoff ",
					0,
					abs(item.balance),
					0,
					get_current_date(now),
					status1,
					tdate,processed_by)

				PersonalLedger.objects.filter(account_number=item.loan_number).update(status=status1)

				item.amount_paid=item.amount_paid + abs(item.balance)
				item.balance=item.balance + abs(item.balance)
				item.schedule_status=schedule_status
				item.save()

				LoansCleared(loan=item,processed_by=processed_by.username,status=status,tdate=tdate,comment="Termination of Membership").save()


				item=LoansRepaymentBase.objects.get(loan_number=item.loan_number)
				item.amount_paid=item.amount_paid + abs(item.balance)
				item.balance=item.balance + abs(item.balance)
				item.schedule_status=schedule_status
				item.save()

		MemberShipTermination(applicant=member,
							amount=amount,
							approval_status=approval_status,
							processing_status=processing_status,
							status=status,
							lock_status=lock_status,
							processed_by=processed_by.username,
							tdate=tdate).save()

		MembersAccountsDomain.objects.filter(member=member.member).update(status=status1)
		StandingOrderAccounts.objects.filter(transaction__member=member.member).update(status=status1)

		Members.objects.filter(id=member.member_id).update(status=status1)

		member.status=status2
		member.save()

		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(pk,)))
	context={
	'record_array':record_array,
	'member':member,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_approved_list_processing_preview.html',context)


def membership_termination_approved_transaction_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Display_PersonalLedger_All_Records(pk)

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_approved_transaction_details.html',context)


def membership_dashboard_transaction_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = search_with_date_Form(request.POST or None)
	member=MembersAccountsDomain.objects.get(account_number=pk)

	records=[]
	if request.method=="POST":

		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'

		dtObj=datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)

		
		dtObj = datetime.datetime.strptime(stop_date, date_format)
		stop_date=get_current_date(dtObj)



		records=Display_PersonalLedger(pk,start_date,stop_date)
	
	start_date= get_current_date(now) - relativedelta(months=3)
	form.fields['start_date'].initial=start_date
	form.fields['stop_date'].initial=get_current_date(now)
	context={
	'member':member,
	'records':records,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_dashboard_transaction_details.html',context)





def membership_termination_maturity_date_exception_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Membership Request Termination maturity Date Exception"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_termination_maturity_date_exception_search.html',{'form':form,'title':title,'task_array':task_array})


def membership_termination_maturity_date_exception_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Membership Termination Request"
	form = searchForm(request.POST)
	status="INACTIVE"
	status1='UNTREATED'
	processing_status='UNPROCESSED'
	approval_status='PENDING'
	members=[]
	if request.method == "POST":
		if not request.POST.get("title"):
			return HttpResponseRedirect(reverse('membership_termination_search'))
		members=MemberShipTermination.objects.filter(Q(applicant__member__phone_number__icontains=form['title'].value()) | Q(applicant__member__file_no__icontains=form['title'].value()) | Q(applicant__member__ippis_no__icontains=form['title'].value())  | Q(applicant__member__admin__first_name__icontains=form['title'].value()) | Q(applicant__member__admin__last_name__icontains=form['title'].value()) | Q(applicant__member__middle_name__icontains=form['title'].value())).filter(applicant__member__status=status,approval_status=approval_status,processing_status=processing_status,status=status1)


	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_maturity_date_exception_list_load.html',context)


def membership_termination_maturity_date_exception_process(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Membership Termination Request"
	form = Standing_Order_Suspension_Transaction_Releasing_Details_form(request.POST)
	status="UNTREATED"
	approval_status="PENDING"
	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)

	applicant=[]
	if MemberShipTermination.objects.filter(id=pk).exists():
		applicant=MemberShipTermination.objects.filter(id=pk).last()
	
	if request.method == "POST":
		reasons=request.POST.get('comment')

		if reasons:
			MemberShipTerminationRequestException(applicant=applicant,
												reasons=reasons,
												approval_status=approval_status,
												status=status,
												processed_by=processed_by.username,
												tdate=tdate
												).save()
			return HttpResponseRedirect(reverse('deskofficer_home'))
	context={
	'applicant':applicant,
	'form':form,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_maturity_date_exception_process.html',context)



def membership_termination_maturity_date_exception_approved_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Membership Termination Request"
	status="UNTREATED"
	approval_status="APPROVED"


	members=MemberShipTerminationRequestException.objects.filter(approval_status=approval_status,status=status)

	context={
	'members':members,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_maturity_date_exception_approved_list_load.html',context)


def membership_termination_maturity_date_exception_approved_process(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Membership Termination Request"
	lock_status="OPEN"
	status="TREATED"

	applicant=MemberShipTerminationRequestException.objects.get(id=pk)

	record=MemberShipTermination.objects.get(id=applicant.applicant_id)

	record.lock_status=lock_status
	record.save()

	applicant.status=status
	applicant.save()
	return HttpResponseRedirect(reverse('membership_termination_maturity_date_exception_approved_list_load'))



def membership_termination_Disbursement_Processing_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_termination_Request_Approval_Process_form(request.POST or None)

	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	status='TREATED'
	status1='UNTREATED'
	approval_status='APPROVED'
	processing_status='UNPROCESSED'

	members=MemberShipTermination.objects.filter(approval_status=approval_status,status=status,processing_status=processing_status).filter(Q(amount__gt=0))


	context={
	'members':members,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_Disbursement_Processing_list_Load.html',context)


def membership_termination_Disbursement_Processing_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_termination_Disbursement_Processing_Preview_form(request.POST or None)

	member=MemberShipTermination.objects.get(id=pk)
	if request.method == 'POST':
		channel=request.POST.get('channels')


		if channel== 'CASH':
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Cash',args=(pk,'CASH')))
		elif channel == "CHEQUE":
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Cheque',args=(pk,'CHEQUE')))

		elif channel == "TRANSFER":
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Transfer',args=(pk,'TRANSFER')))


		return HttpResponse("Ok")


	form.fields['amount'].initial=member.amount
	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_Disbursement_Processing_Preview.html',context)


def membership_termination_Disbursement_Processing_Cash(request,pk,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	status='UNTREATED'
	processing_status='PROCESSED'

	form=membership_termination_Disbursement_Processing_form(request.POST or None)

	member=MemberShipTermination.objects.get(id=pk)

	if request.method == 'POST':
		payment_channel='CASH'
		pv_number=request.POST.get('pv_number')
		pv_date=request.POST.get('pv_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(pv_date, date_format)
		pv_date=get_current_date(dtObj)
		if not pv_number:
			messages.error(request,'PV Number is Missing')
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Cash',args=(pk,payment)))
		MemberShipTerminationFundDisbursement(member=member,
											 payment_channel=payment_channel,
											 pv_number=pv_number,
											 pv_date=pv_date,
											 amount=member.amount,
											 status=status,
											 processed_by=processed_by.username,
											 tdate=tdate,
											 ).save()

		member.processing_status=processing_status
		member.save()

		return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_list_Load'))

	form.fields['amount'].initial=member.amount
	form.fields['pv_date'].initial=now
	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_Disbursement_Processing_Cash.html',context)

def membership_termination_Disbursement_Processing_Cheque(request,pk,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	status='UNTREATED'
	processing_status='PROCESSED'

	form=membership_termination_Disbursement_Processing_form(request.POST or None)

	member=MemberShipTermination.objects.get(id=pk)

	if request.method == 'POST':
		payment_channel='CHEQUE'
		pv_number=request.POST.get('pv_number')

		date_format = '%Y-%m-%d'

		pv_date=request.POST.get('pv_date')
		dtObj = datetime.datetime.strptime(pv_date, date_format)
		pv_date=get_current_date(dtObj)

		cheque_date=request.POST.get('cheque_date')
		dtObj = datetime.datetime.strptime(cheque_date, date_format)
		cheque_date=get_current_date(dtObj)

		cheque_number=request.POST.get("cheque_number")
		account_id=request.POST.get('accounts')
		account=CooperativeBankAccounts.objects.get(id=account_id)

		if not pv_number:
			messages.error(request,'PV Number is Missing')
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Cheque',args=(pk,payment)))

		if not cheque_number:
			messages.error(request,'Cheque Number is Missing')
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Cheque',args=(pk,payment)))

		MemberShipTerminationFundDisbursement(member=member,
											 payment_channel=payment_channel,
											 pv_number=pv_number,
											 pv_date=pv_date,
											 amount=member.amount,
											 cheque_number=cheque_number,
											 cheque_date=cheque_date,
											 coop_account=account,
											 status=status,
											 processed_by=processed_by.username,
											 tdate=tdate,
											 ).save()

		member.processing_status=processing_status
		member.save()

		return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_list_Load'))

	form.fields['amount'].initial=member.amount
	form.fields['pv_date'].initial=now
	form.fields['cheque_date'].initial=now
	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_Disbursement_Processing_Cheque.html',context)


def membership_termination_Disbursement_Processing_Transfer(request,pk,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	status='UNTREATED'
	processing_status='PROCESSED'

	form=membership_termination_Disbursement_Processing_form(request.POST or None)

	member=MemberShipTermination.objects.get(id=pk)

	member_accounts = MembersBankAccounts.objects.filter(member_id=member.applicant.member)

	if request.method == 'POST':
		payment_channel='TRANSFER'
		pv_number=request.POST.get('pv_number')

		date_format = '%Y-%m-%d'

		pv_date=request.POST.get('pv_date')
		dtObj = datetime.datetime.strptime(pv_date, date_format)
		pv_date=get_current_date(dtObj)

		transfer_date=request.POST.get('transfer_date')
		dtObj = datetime.datetime.strptime(transfer_date, date_format)
		transfer_date=get_current_date(dtObj)

		account_id=request.POST.get('accounts')
		account=CooperativeBankAccounts.objects.get(id=account_id)

		member_account_id=request.POST.get('member_account')
		member_account=MembersBankAccounts.objects.get(id=member_account_id)

		if not pv_number:
			messages.error(request,'PV Number is Missing')
			return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_Transfer',args=(pk,payment)))


		MemberShipTerminationFundDisbursement(member=member,
											 payment_channel=payment_channel,
											 pv_number=pv_number,
											 pv_date=pv_date,
											 amount=member.amount,
											 member_account=member_account,
											 transfer_date=transfer_date,
											 coop_account=account,
											 status=status,
											 processed_by=processed_by.username,
											 tdate=tdate,
											 ).save()

		member.processing_status=processing_status
		member.save()

		return HttpResponseRedirect(reverse('membership_termination_Disbursement_Processing_list_Load'))

	form.fields['amount'].initial=member.amount
	form.fields['pv_date'].initial=now
	form.fields['transfer_date'].initial=now
	context={
	'member_accounts':member_accounts,
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/membership_termination_Disbursement_Processing_Transfer.html',context)




# ###############################################################
# ###############################################################
# ###############################################################
###### WATCH OUT #################################################
###################################################################
###################################################################
###################################################################

def membership_commodity_loan_Shortlisting_transaction_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	short_listed='NO'
	status='UNTREATED'
	applicants=[]

	transaction=[]
	if request.method == 'POST':
		period_id = request.POST.get('period')		
		batch_id = request.POST.get("batch")		
		trans_id = request.POST.get('transaction')
		
		return HttpResponseRedirect(reverse('membership_commodity_loan_Shortlisting_transaction_list_load',args=(period_id, batch_id, trans_id)))
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,

	'applicants':applicants,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Shortlisting_transaction_period_load.html',context)

def membership_commodity_loan_Shortlisting_transaction_list_load(request,period_id, batch_id, trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	short_listed='NO'
	status='UNTREATED'
	applicants=[]

	transaction=[]
	

	period = Commodity_Period.objects.get(id=period_id)

	batch = Commodity_Period_Batch.objects.get(id=batch_id)

	transaction = TransactionTypes.objects.get(id=trans_id)

	applicants=Members_Commodity_Loan_Application.objects.filter(member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,short_listed=short_listed,status=status,approval_status='PENDING')
	transaction=transaction.name


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicants':applicants,
	'transaction':transaction,
	'period':period,
	'batch':batch,
	'trans_id':trans_id,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Shortlisting_transaction_list_load.html',context)



def membership_commodity_loan_Shortlisting(request,pk):
	applicant=Members_Commodity_Loan_Application.objects.get(id=pk)
	applicant.short_listed='YES'
	applicant.save()
	return HttpResponseRedirect(reverse('membership_commodity_loan_Shortlisting_transaction_list_load',args=(applicant.period_id,applicant.batch_id,applicant.member.product.product.sub_category.category.transaction_id)))


def membership_commodity_loan_Shortlisting_All(request,period_id,batch_id,trans_id):
	applicants=Members_Commodity_Loan_Application.objects.filter(member__product__product__sub_category__category__transaction_id=trans_id,batch_id=batch_id,period_id=period_id).update(short_listed='YES')
	
	return HttpResponseRedirect(reverse('membership_commodity_loan_Shortlisting_transaction_list_load',args=(period_id,batch_id,trans_id)))

def membership_commodity_loan_Shortlisted_transaction_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	short_listed='YES'
	status='UNTREATED'
	applicants=[]

	transaction=[]
	if request.method == 'POST':
		period_id = request.POST.get('period')
		period = Commodity_Period.objects.get(id=period_id)

		batch_id = request.POST.get("batch")
		batch = Commodity_Period_Batch.objects.get(id=batch_id)

		transaction_id = request.POST.get('transaction')
		transaction = TransactionTypes.objects.get(id=transaction_id)

		applicants=Members_Commodity_Loan_Application.objects.filter(approval_status='PENDING',member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,short_listed=short_listed,status=status)
		transaction=transaction.name


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,

	'applicants':applicants,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Shortlisted_transaction_period_load.html',context)


def membership_commodity_loan_Shortlisted_History_transaction_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	short_listed='YES'

	applicants=[]

	transaction=[]

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)

	if request.method == 'POST':
		# return HttpResponse("OKKKKK")
		start_date_id=request.POST.get('start_date')
		start_date=datetime.datetime.strptime(start_date_id, '%Y-%m-%d')
		start_date=get_current_date(start_date)

		stop_date_id=request.POST.get('stop_date')
		stop_date=datetime.datetime.strptime(stop_date_id, '%Y-%m-%d')
		stop_date=get_current_date(stop_date)
	
		period_id = request.POST.get('period')
		period = Commodity_Period.objects.get(id=period_id)

		batch_id = request.POST.get("batch")
		batch = Commodity_Period_Batch.objects.get(id=batch_id)

		transaction_id = request.POST.get('transaction')
		transaction = TransactionTypes.objects.get(id=transaction_id)

		
		applicants=Members_Commodity_Loan_Application.objects.filter(tdate__range=[start_date,stop_date],member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,short_listed=short_listed)
		transaction=transaction.name

	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,

	'applicants':applicants,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Shortlisted_History_transaction_period_load.html',context)


def membership_commodity_loan_Form_Sales_Reprint_transaction_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	short_listed='YES'

	applicants=[]

	transaction=[]

	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=get_current_date(now)

	if request.method == 'POST':
		# return HttpResponse("OKKKKK")
		start_date_id=request.POST.get('start_date')
		start_date=datetime.datetime.strptime(start_date_id, '%Y-%m-%d')
		start_date=get_current_date(start_date)

		stop_date_id=request.POST.get('stop_date')
		stop_date=datetime.datetime.strptime(stop_date_id, '%Y-%m-%d')
		stop_date=get_current_date(stop_date)
	
		period_id = request.POST.get('period')
		period = Commodity_Period.objects.get(id=period_id)

		batch_id = request.POST.get("batch")
		batch = Commodity_Period_Batch.objects.get(id=batch_id)

		transaction_id = request.POST.get('transaction')
		transaction = TransactionTypes.objects.get(id=transaction_id)

		
		applicants=Members_Commodity_Loan_Application_Form_Sales.objects.filter(tdate__range=[start_date,stop_date],applicant__member__product__product__sub_category__category__transaction=transaction,applicant__batch=batch,applicant__period=period)
		transaction=transaction.name

	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,

	'applicants':applicants,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Form_Sales_Reprint_transaction_period_load.html',context)


def membership_commodity_loan_Final_Applications_Process(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	# Members_Commodity_Loan_Application_Form_Sales.objects.all().delete()
	# Members_Commodity_Loan_Products_Selection.objects.all().delete()
	# form=membership_commodity_loan_Final_Applications_Process_Form(request.POST or None)

	applicant=Members_Commodity_Loan_Application_Form_Sales.objects.get(id=pk)
	member_id=applicant.applicant.member.member_id

	member=applicant.applicant.member.member

	period=applicant.applicant.period
	batch=applicant.applicant.batch
	records=Members_Commodity_Loan_Application_Form_Sales.objects.filter(applicant__member__member=member,applicant__period=period,applicant__batch=batch)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'applicant':applicant,
	# 'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Final_Applications_Process.html',context)




def membership_commodity_loan_Final_Applications_Process_Complete(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_Final_Applications_Process_Form(request.POST or None)

	# applicant=Members_Commodity_Loan_Application_Form_Sales.objects.get(id=pk)
	# member_id=applicant.applicant.member.member_id

	# member=applicant.applicant.member.member

	# period=applicant.applicant.period
	# batch=applicant.applicant.batch
	record=Members_Commodity_Loan_Products_Selection.objects.get(id=pk)


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'record':record,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Final_Applications_Process_Complete.html',context)



def membership_commodity_loan_Final_Applications_Process_Add_Guarantors(request,member_pk,pk):
	applicant=Members_Commodity_Loan_Application_Form_Sales.objects.get(id=pk)
	max_guarantor=applicant.applicant.member.product.product.category.guarantors
	member=Members.objects.get(id=member_pk)

	if Members_Commodity_Loan_Application_Guarantors.objects.filter(applicant=applicant).count() >= int(max_guarantor):
		messages.info(request,"You have exceeded the maximum Guarantors Allowed")
		return HttpResponseRedirect(reverse('membership_commodity_loan_Final_Applications_Process',args=(pk,)))

	if Members_Commodity_Loan_Application_Guarantors.objects.filter(applicant=applicant,guarantor=member).exists():
		messages.error(request,'This Member already added as Guarantor')
		return HttpResponseRedirect(reverse('membership_commodity_loan_Final_Applications_Process',args=(pk,)))


	Members_Commodity_Loan_Application_Guarantors(applicant=applicant,guarantor=member).save()
	return HttpResponseRedirect(reverse('membership_commodity_loan_Final_Applications_Process',args=(pk,)))



def membership_commodity_loan_Final_Applications_Delete(request,pk,return_pk):
	Members_Commodity_Loan_Application_Guarantors.objects.get(id=pk).delete()
	messages.info(request,"Receod Deleted Successfully")
	return HttpResponseRedirect(reverse('membership_commodity_loan_Final_Applications_Process',args=(return_pk,)))



def membership_commodity_loan_Final_Applications_Process_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Members_Commodity_Loan_Application_Form_Sales_Form(request.POST or None)
	applicant=Members_Commodity_Loan_Application_Form_Sales.objects.get(id=pk)



	if request.method == 'POST':	
		# max_guarantor=applicant.applicant.member.product.product.category.guarantors


		transaction=applicant.applicant.member.product.product.sub_category.category.transaction
		period=applicant.applicant.period
		batch=applicant.applicant.batch

		# date_duration = Company_Products_Duration.objects.get(product=applicant.applicant.member.product.product.category,period=period,batch=batch)
		# start_date=date_duration.start_date
		# stop_date=date_duration.stop_date
		
		tdate=get_current_date(now)

		schedule_status='UNSCHEDULED'
		status="ACTIVE"
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by=processed_by.username

		member=applicant.applicant.member.member

		my_id=member.coop_no

		if MembersNextOfKins.objects.filter(member=member).exists():
			NOK = MembersNextOfKins.objects.get(member=member,status='ACTIVE')
			nok_name=NOK.name
			nok_Relationship=NOK.relationships.title
			nok_phone_no=NOK.phone_number
			nok_address=NOK.address
		else:
			nok_name="UNKNOWN"
			nok_Relationship="UNKNOWN"
			nok_phone_no="UNKNOWN"
			nok_address="UNKNOWN"

		loan_amount=applicant.applicant.coop_price
		duration=applicant.applicant.duration
		repayment=applicant.applicant.repayment
		amount_paid=0
		balance=-float(loan_amount)
		interest_rate=applicant.applicant.member.product.product.sub_category.category.interest_rate
		interest=applicant.applicant.interest
		admin_charge=applicant.applicant.admin_charge
		

		
		interest_deduction = "SPREAD"
		processed_by=CustomUser.objects.get(id=request.user.id)
		


		start_date=request.POST.get('effective_date')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)



		stop_date= get_current_date(start_date + relativedelta(months=int(duration)))
	
		
		loan_code=transaction.code
		if LoanNumber.objects.all().count() == 0:
			messages.error(request,"Loan Number not Set")
			return HttpResponseRedirect(reverse('membership_commodity_loan_Final_Applications_Process',args=(pk,)))

		loan_number = generate_number(loan_code,my_id,now)

		# applicant.applicant.serial_no=request.POST.get('serial_no')
		applicant.applicant.loan_number=loan_number
		applicant.applicant.save()

		Loans_Repayment_Base(
				member,
				nok_name,
                nok_Relationship,
                nok_phone_no,
                nok_address,
				duration,
				interest_deduction,
            	interest_rate, #load please
            	interest, #load
            	admin_charge, #load
				transaction,
				loan_number,
				loan_amount,
				repayment,
				balance,
				amount_paid,
				start_date,
				stop_date,
				processed_by,
				status,
				tdate,
				schedule_status
				)
		

		debit=applicant.applicant.company_price
		credit=0
		balance = -float(debit)
		particulars= applicant.applicant.member.product.product.sub_category.category.title + " ISSUANCE"

		post_to_ledger(member,
						transaction,
						loan_number,
						particulars,
						debit,
						credit,
						balance,
						get_current_date(now),
						status,
						tdate,processed_by)
		

		if float(applicant.applicant.interest)>0:
			ledger_balance=get_ledger_balance(loan_number)

			debit=applicant.applicant.interest
			credit=0
			balance = -float(debit) + float(ledger_balance)
			particulars=  "INTEREST ON " + applicant.applicant.member.product.product.sub_category.category.title

			post_to_ledger(member,
							transaction,
							loan_number,
							particulars,
							debit,
							credit,
							balance,
							get_current_date(now),
							status,
							tdate,processed_by)

		status1='TREATED'
		applicant.status=status1
		applicant.save()

		return HttpResponseRedirect(reverse('Commodity_Loan_Dashboard_Load'))
	
	form.fields['description'].initial=applicant.applicant.member.product.product.product_name
	form.fields['model'].initial=applicant.applicant.member.product.product.product_model
	form.fields['details'].initial=applicant.applicant.member.product.product.details
	form.fields['amount'].initial=applicant.applicant.coop_price
	form.fields['repayment'].initial=applicant.applicant.repayment
	form.fields['receipt'].initial=applicant.receipt
	form.fields['duration'].initial=applicant.applicant.duration
	form.fields['effective_date'].initial=applicant.applicant.effective_date

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicant':applicant,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Final_Applications_Process_Preview.html',context)




def membership_commodity_loan_processing_validation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	applicant=Members_Commodity_Loan_Application.objects.get(receipt=pk)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'applicant':applicant,
	
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_processing_validation.html',context)



def membership_commodity_loan_form_sales_transaction_period_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	short_listed='YES'
	status='UNTREATED'

	applicants=[]

	transaction=[]
	if request.method == 'POST':
		period_id = request.POST.get('period')
		period = Commodity_Period.objects.get(id=period_id)

		batch_id = request.POST.get("batch")
		batch = Commodity_Period_Batch.objects.get(id=batch_id)

		transaction_id = request.POST.get('transaction')
		transaction = TransactionTypes.objects.get(id=transaction_id)
		# Members_Commodity_Loan_Application.objects.filter(approval_status='APPROVED',member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,short_listed=short_listed,status='TREATED').update(status=status)
		applicants=Members_Commodity_Loan_Application.objects.filter(approval_status='APPROVED',member__product__product__sub_category__category__transaction=transaction,batch=batch,period=period,short_listed=short_listed,status=status)
		transaction=transaction.name


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,

	'applicants':applicants,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_form_sales_transaction_period_load.html',context)



def membership_commodity_loan_form_sales(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=membership_commodity_loan_form_sales_transaction_form(request.POST or None)
	applicant=Members_Commodity_Loan_Application.objects.get(pk=pk)


	phones=Members_Commodity_Receipt_Phone_no.objects.filter(status='ACTIVE')[:2]
	phone1=''
	phone2=''

	if phones.count()>1:

		phone1=phones[0].phone_no
		phone2=phones[1].phone_no
	
	elif phones.count()==1:
		phone1=phones[0].phone_no
		


	if request.method == "POST" and 'admin-charge' in request.POST:
		date_format = '%Y-%m-%d'

		effective_date_id=request.POST.get('effective_date')
		dtObj = datetime.datetime.strptime(effective_date_id, date_format)
		effective_date=get_current_date(dtObj)
		phone1=request.POST.get('phone_no1')
		phone2=request.POST.get('phone_no2')
		

		if not phone1 and not phone2:
			messages.error(request,'Phone Number Missing, atleast one Phone number is needed')
			return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales',args=(pk,)))
		
		if 	Members_Commodity_Loan_Application_Form_Sales.objects.filter(applicant=applicant).exists():
			queryset=Members_Commodity_Loan_Application_Form_Sales.objects.filter(applicant=applicant).first()
			receipt=queryset.receipt
		else:
			receipt= get_receipt()

			Members_Commodity_Loan_Application_Form_Sales(applicant=applicant,receipt=receipt,
										tdate=get_current_date(now),
										processed_by=CustomUser.objects.get(id=request.user.id),
										status='UNTREATED').save()
		applicant.effective_date=effective_date
		applicant.receipt=receipt
		applicant.phone_no1=phone1
		applicant.phone_no2=phone2
		applicant.status='TREATED'
		applicant.save()

		
	
		return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales_validation',args=(receipt,)))


	form.fields['phone_no1'].initial = phone1
	form.fields['phone_no2'].initial = phone2
	form.fields['amount'].initial = applicant.coop_price
	form.fields['effective_date'].initial = get_current_date(now)
	form.fields['admin_charges'].initial = applicant.admin_charge
	form.fields['duration'].initial = applicant.duration
	form.fields['repayment'].initial = applicant.repayment
	form.fields['form_print'].initial = applicant.member.product.product.sub_category.category.transaction.form_print
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'applicant':applicant,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_form_sales.html',context)


def membership_commodity_loan_form_sales_validation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=Members_Commodity_Loan_Application.objects.get(receipt=pk)

	


	context={
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/membership_commodity_loan_form_sales_validation.html',context)



def membership_commodity_loan_form_sales_process(request,pk,payment):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=membership_commodity_loan_form_sales_process_Form(request.POST or None)
	applicant=Members_Commodity_Loan_Application.objects.get(pk=pk)
	recceipt_type=applicant.member.product.product.category.transaction.receipt_type

	if request.method == 'POST':
		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		status="UNTREATED"
		receipt_status='UNUSED'
		receipt_status1='USED'

		if applicant.admin_charge > 0:
			if payment != 'CASH':
				bank_id=request.POST.get('banks')
				source_bank=Banks.objects.get(id=bank_id)

				account_name=request.POST.get('account_name')
				other_details=request.POST.get('other_details')

				coop_account_id=request.POST.get('coop_accounts')
				coop_account=CooperativeBankAccounts.objects.get(id=coop_account_id)

				if not account_name:
					messages.error(request,'Account Name is Missing')
					return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales_process', args=(pk,payment,)))

				if not other_details:
					messages.error(request,'Other Details is Missing')
					return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales_process', args=(pk,payment,)))


			if recceipt_type == "MANUAL":
				receipt_id = request.POST.get('receipt_no')
				if Receipts.objects.filter(receipt=receipt_id,status=receipt_status).exists():
					receipt_obj=Receipts.objects.get(receipt=receipt_id,status=receipt_status)
					receipt=receipt_obj.receipt
					receipt_obj.status=receipt_status1
					receipt_obj.save()

				else:
					messages.error(request,'Receipt Already in Use or Not Available')
					return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales_process', args=(pk,payment,)))

			elif recceipt_type == "AUTO":

				receipt_obj=AutoReceipt.objects.first()
				receipt= str(receipt_obj.receipt).zfill(5)
				receipt_obj.receipt=int(receipt_obj.receipt)+1
				receipt_obj.save()



			if payment != 'CASH':
				Members_Commodity_Loan_Application_Form_Sales(applicant=applicant,
															channel=payment,
															source_bank=source_bank,
															account_name=account_name,
															other_details=other_details,
															coop_account=coop_account,
															receipt=receipt,
															tdate=tdate,
															processed_by=processed_by.username,
															status=status).save()
			else:
				Members_Commodity_Loan_Application_Form_Sales(applicant=applicant,
													channel=payment,
													receipt=receipt,
													tdate=tdate,
													processed_by=processed_by.username,
													status=status).save()

		else:
			Members_Commodity_Loan_Application_Form_Sales(applicant=applicant,
									channel=payment,
									tdate=tdate,
									processed_by=processed_by.username,
									status=status).save()

		applicant.status='TREATED'
		applicant.save()

		form_print= request.POST.get('form_print')



		if form_print == 'NO':
			messages.success(request,"Record Added Successfully")
			return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales_transaction_period_load'))
		elif form_print == "YES":
			print("Form printing")
			messages.success(request,"Record Added Successfully")
			return HttpResponseRedirect(reverse('membership_commodity_loan_form_sales_transaction_period_load'))


	form.fields['amount'].initial=applicant.admin_charge
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'payment':payment,
	'applicant':applicant,
	'recceipt_type':recceipt_type,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_form_sales_process.html',context)


def membership_commodity_loan_Final_Applications(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Product_Linking_Period_Load_form(request.POST or None)

	approval_status='APPROVED'
	status='UNTREATED'
	applicants=[]

	transaction=[]
	if request.method == 'POST':
		period_id = request.POST.get('period')
		period = Commodity_Period.objects.get(id=period_id)

		batch_id = request.POST.get("batch")
		batch = Commodity_Period_Batch.objects.get(id=batch_id)

		transaction_id = request.POST.get('transaction')
		transaction = TransactionTypes.objects.get(id=transaction_id)

		applicants=Members_Commodity_Loan_Application_Form_Sales.objects.filter(applicant__member__product__product__sub_category__category__transaction=transaction,applicant__batch=batch,applicant__period=period,status=status)
		transaction=transaction.name


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,

	'applicants':applicants,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_Final_Applications.html',context)




def membership_commodity_loan_completed_transaction_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=LoansRepaymentBase.objects.filter(Q(transaction__code='205') & Q(balance__gte=0) & Q(completed='NO'))
	
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_completed_transaction_load.html',context)



def membership_commodity_loan_completed_transaction_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Members_Commodity_Loan_Application_Form_Sales_Form(request.POST or None)
	if Members_Commodity_Loan_Application.objects.filter(loan_number=pk).exists():
		
		record=Members_Commodity_Loan_Application.objects.get(loan_number=pk)
		queryset=LoansRepaymentBase.objects.get(loan_number=pk)
	else:
		messages.error(request,'No Matching Record Found')
		return HttpResponseRedirect(reverse('membership_commodity_loan_completed_transaction_load'))

	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if request.method == 'POST':
		serial_no=request.POST.get('serial_no')
		if not serial_no:
			messages.error(request,'Serial Number is missing')
			return HttpResponseRedirect(reverse('membership_commodity_loan_completed_transaction_preview',args=(pk,)))
		
		

		if Members_Commodity_Loan_Completed_Transactions.objects.filter(loan_number=queryset.loan_number).exists():
			messages.error(request,f'Record Already Exist- {queryset.loan_number}')
			return HttpResponseRedirect(reverse('membership_commodity_loan_completed_transaction_preview',args=(pk,)))

		Members_Commodity_Loan_Completed_Transactions(member=queryset.member,
														product_name=record.member.product.product.product_name,
														product_model=record.member.product.product.product_model,
														details=record.member.product.product.details,
														loan_amount=record.coop_price,
														amount_paid=queryset.loan_amount,
														serial_no=serial_no,
														receipt=record.receipt,
														loan_number=queryset.loan_number,
														start_date=queryset.start_date,
														tdate=tdate,
														processed_by=processed_by).save()
		record.serial_no=serial_no
		record.save()

		queryset.completed='YES'
		queryset.save()
		return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_validation',args=(record.receipt,)))

	form.fields['description'].initial=record.member.product.product.product_name
	form.fields['model'].initial=record.member.product.product.product_model
	form.fields['details'].initial=record.member.product.product.details
	form.fields['amount'].initial=record.coop_price
	form.fields['amount_paid'].initial=queryset.amount_paid
	form.fields['repayment'].initial=record.repayment
	form.fields['receipt'].initial=record.receipt
	form.fields['duration'].initial=record.duration
	form.fields['effective_date'].initial=queryset.start_date


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'record':record,
	'form':form,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_completed_transaction_preview.html',context)



def membership_commodity_loan_completed_reprint_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Member For Custom Invoicing Reprint"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/membership_commodity_loan_completed_reprint_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def membership_commodity_loan_completed_reprint_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/membership_commodity_loan_completed_reprint_list_load.html',context)






def membership_commodity_loan_completed_transaction_reprint_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	member=Members.objects.get(id=pk)
	records=Members_Commodity_Loan_Completed_Transactions.objects.filter(member=member)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'member':member,
	}
	return render(request,'deskofficer_templates/membership_commodity_loan_completed_transaction_reprint_preview.html',context)


def commodity_loan_trending_products(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records =TransactionTypes.objects.filter(category='NON-MONETARY')
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	# 'transaction':transaction,
	}
	return render(request,'deskofficer_templates/commodity_loan_trending_products.html',context)




def commodity_loan_custom_invoicing_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Member For Custom Invoicing Loan"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def commodity_loan_custom_invoicing_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Loan Request order"
	form = searchForm(request.POST)

	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_search'))

		members=searchMembers(form['title'].value(),'ACTIVE')

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_list_load.html',context)



# def commodity_loan_custom_invoicing_processing(request,pk):
# 	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
# 	task_array=[]
# 	for task in tasks:
# 		task_array.append(task.task.title)

# 	task_enabler=TransactionEnabler.objects.filter(status="YES")
# 	task_enabler_array=[]
# 	for item in task_enabler:
# 		task_enabler_array.append(item.title)

# 	default_password="NO"
# 	if Staff.objects.filter(admin=request.user,default_password='YES'):
# 		default_password="YES"
# 	form=commodity_loan_custom_invoicing_processing_Form(request.POST or None)
# 	member =Members.objects.get(id=pk)
# 	records=Commodity_Loan_Invoicing_Products_Selection_Temp.objects.filter(member=member,status='UNTREATED')
	

# 	if request.method == 'POST':
# 		company=request.POST.get("company")
# 		transaction=request.POST.get("transaction")
# 		period=request.POST.get("period")
# 		batch=request.POST.get("batch")		
		
# 		return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_list',args=(member.pk, company,transaction,period,batch,)))
	
# 	context={
# 	'task_array':task_array,
# 	'task_enabler_array':task_enabler_array,
# 	'default_password':default_password,
# 	'records':records,
# 	'member':member,
# 	'form':form,
# 	}
# 	return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_processing.html',context)


# def commodity_loan_custom_invoicing_processing_products_list(request,member, company,transaction,period,batch):
# 	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
# 	task_array=[]
# 	for task in tasks:
# 		task_array.append(task.task.title)

# 	task_enabler=TransactionEnabler.objects.filter(status="YES")
# 	task_enabler_array=[]
# 	for item in task_enabler:
# 		task_enabler_array.append(item.title)

# 	default_password="NO"
# 	if Staff.objects.filter(admin=request.user,default_password='YES'):
# 		default_password="YES"

# 	company=Companies.objects.get(id=company)
# 	transaction =TransactionTypes.objects.get(id=transaction)
# 	member =Members.objects.get(id=member)
# 	period=Commodity_Period.objects.get(id=period)
# 	batch=Commodity_Period_Batch.objects.get(id=batch)

# 	records=Company_Products.objects.filter(company=company,
# 											product__sub_category__category__transaction=transaction,
# 											period=period,batch=batch
# 											)
# 	context={
# 	'task_array':task_array,
# 	'task_enabler_array':task_enabler_array,
# 	'default_password':default_password,
# 	'records':records,
# 	'company':company,
# 	'transaction':transaction,
# 	'member':member,
# 	'period':period,
# 	'batch':batch,
# 	}
# 	return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_processing_products_list.html',context)



def commodity_loan_custom_invoicing_processing_products_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	
	
	member =Members.objects.get(id=pk)
	phones=Members_Commodity_Receipt_Phone_no.objects.filter(status='ACTIVE')[:2]
	phone1=[]
	phone2=[]

	if phones.count()>1:

		phone1=phones[0].phone_no
		phone2=phones[1].phone_no
	
	elif phones.count()==1:
		phone1=phones[0].phone_no
		


	form = commodity_loan_custom_invoicing_processing_Form(request.POST or None)
	
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)

	if request.method == 'POST':
		date_format = '%Y-%m-%d'

		effective_date_id=request.POST.get('effective_date')
		dtObj = datetime.datetime.strptime(effective_date_id, date_format)
		effective_date=get_current_date(dtObj)

		
		receipt=request.POST.get('receipt')
		serial_no=request.POST.get('serial_no')
		duration=request.POST.get('duration')
		product_name=request.POST.get('description')
		product_model=request.POST.get('model')
		product_details=request.POST.get('details')
		phone1=request.POST.get('phone_no1')
		phone2=request.POST.get('phone_no2')
		
		if not product_name:
			messages.error(request,'Product Name is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		if not phone1 and not phone2:
			messages.error(request,'Phone Number Missing, atleast one Phone number is needed')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		if not product_model:
			messages.error(request,'Product Model is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		if not product_details:
			messages.error(request,'Product Detail is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		if not duration:
			messages.error(request,'Payment Duration is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		if not serial_no:
			messages.error(request,'Product Serial No is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		if not receipt:
			messages.error(request,'Receipt No is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))

		quantity=request.POST.get('quantity')
		
		if not quantity or float(quantity) <=0:
			messages.error(request,'Quantity is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		
		amount=request.POST.get('amount')
		
		if not amount or float(amount) <=0:
			messages.error(request,'Cost price is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))
		

		amount=float(quantity)*float(amount)
		
		receipt=request.POST.get('receipt')
		
		if not receipt:
			messages.error(request,'Receipt is Missing')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))

		if Members_Commodity_Loan_Completed_Transactions.objects.filter(member=member,receipt=receipt).exists():
			messages.error(request,'Record with this receipt No already exist')
			return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_products_preview',args=(pk,)))


		loan_number = generate_number('205',member.coop_no,now)
		queryset= Members_Commodity_Loan_Completed_Transactions(member=member,
															phone_no1=phone1,
															phone_no2=phone2,
															product_name=product_name,
															product_model=product_model,
															details=product_details,
															quantity=quantity,
															duration=duration,
															loan_amount=float(amount),
															amount_paid=float(amount),
															serial_no=serial_no,
															loan_number=loan_number,
															receipt=receipt,
															tdate=tdate,
															start_date=effective_date,
															processed_by=processed_by).save()
		
		return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing_validation',args=(receipt,)))

	
	form.fields['effective_date'].initial=get_current_date(now)
	form.fields['quantity'].initial=1
	form.fields['phone_no1'].initial=phone1
	form.fields['phone_no2'].initial=phone2
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'member':member,
	}
	return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_processing_products_preview.html',context)


def commodity_loan_custom_invoicing_processing_validation(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=Members_Commodity_Loan_Completed_Transactions.objects.get(receipt=pk)



	context={
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}

	return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_processing_validation.html',context)



def commodity_loan_custom_invoicing_processing_drop(request,pk):
	record=Members_Commodity_Loan_Completed_Transactions.objects.get(id=pk)
	member=record.member
	record.delete()
	return HttpResponseRedirect(reverse('commodity_loan_custom_invoicing_processing',args=(member.pk,)))
	





def commodity_loan_custom_invoicing_active_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	
	records=Commodity_Loan_Invoicing_Products_Selection_Temp.objects.filter(status='UNTREATED')
	# print(records)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	
	}
	return render(request,'deskofficer_templates/commodity_loan_custom_invoicing_active_list_load.html',context)



def commodity_loan_trending_products_load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction =TransactionTypes.objects.get(id=pk)
	records=Commodity_Categories.objects.filter(transaction=transaction)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'transaction':transaction,
	# 'transaction':transaction,
	}
	return render(request,'deskofficer_templates/commodity_loan_trending_products_load.html',context)


def commodity_loan_trending_products_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Commodity_Category_Sub.objects.filter(category=pk)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,

	}
	return render(request,'deskofficer_templates/commodity_loan_trending_products_details.html',context)


def trending_products_member_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Trending Product List"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/trending_products_member_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def trending_products_member_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('trending_products_member_Search'))

		members=searchMembers(form['title'].value(),status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/trending_products_member_list_load.html',context)





def Company_add(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method =='POST':
		company=request.POST.get('company')
		if not company:
			messages.error(request,'Company Name Missing')
			return HttpResponseRedirect(reverse('Company_add'))
		Companies(title=company).save()

		return HttpResponseRedirect(reverse('ProformaInvoicedCommodityLoan_Invoice',args=(pk,)))

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	}
	return render(request,'deskofficer_templates/Company_add.html',context)






############################################################
##################### REPORTS      ########################
############################################################


############################################################
################ Monthly Deductions#########################
############################################################
def Monthly_Deductions_Report_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Members for Monthly Deduction"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Monthly_Deductions_Report_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Monthly_Deductions_Report_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Monthly_Deductions_Report_Search'))

		members=searchMembers(form['title'].value(),status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Monthly_Deductions_Report_list_load.html',context)


def Monthly_Deductions_Report_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	periods=TransactionPeriods.objects.all().order_by('transaction_period')

	member=Members.objects.get(id=pk)

	record=[]
	if request.method == 'POST':
		transaction_period_id = request.POST.get('period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)

		if MonthlyDeductionListGenerated.objects.filter(member=member,transaction_period=transaction_period).exists():
			record=MonthlyDeductionListGenerated.objects.get(member=member,transaction_period=transaction_period)

		records=MonthlyDeductionList.objects.filter(member=member,transaction_period=transaction_period)
	context={
	'record':record,
	'records':records,
	'periods':periods,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Monthly_Deductions_Report_Preview.html',context)


def Monthly_Deductions_All_Records_Report_Period(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	# periods=TransactionPeriods.objects.all().order_by('transaction_period')
	form=Monthly_Deductions_All_Records_Report_Period_form(request.POST or None)

	records=[]
	if request.method == 'POST':
		transaction_period_id = request.POST.get('tdate')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)
		transaction_period=get_current_date(dtObj)


		

		records=MonthlyDeductionListGenerated.objects.filter(transaction_period=transaction_period)

	form.fields['tdate'].initial=get_current_date(now)
	context={
	'form':form,
	'records':records,
	# 'periods':periods,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Monthly_Deductions_All_Records_Report_Period.html',context)


def Monthly_Deductions_All_Records_Report_Deatials(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=MonthlyDeductionListGenerated.objects.get(id=pk)

	records=MonthlyDeductionList.objects.filter(member=record.member,transaction_period=record.transaction_period)


	context={
	'records':records,
	'period':record.transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Monthly_Deductions_All_Records_Report_Deatials.html',context)



############################################################
##################### GENERAL SEARCH #######################
############################################################
def Members_General_Search(request):
	status="ACTIVE"
	members=[]
	if request.method == 'POST':
		frm=request.POST.get("search")
		members=generalMemberSearch(frm,status)

		print(members)
	return HttpResponse("OK")

############################################################
##################### ACTIVE LOANS ########################
############################################################
def Load_Active_loans_Transaction_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	records=TransactionTypes.objects.filter(source__title="LOAN")

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Load_Active_loans_Transaction_List_Load.html',context)



def Load_Active_loans(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	records=LoansRepaymentBase.objects.filter(status=status)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Load_Active_loans.html',context)



def export_load_Active_loans_all_records_xls(request):

	status="ACTIVE"

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = 'attachment; filename="All_active_loans.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Member ID', 'Last Name', 'First Name', 'Middle Name','Loan Type','Loan Number','Loan Amount','Amount Paid',"Balance",'Repayment']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows

	rows = LoansRepaymentBase.objects.filter(status='ACTIVE').values_list('member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name','transaction__name','loan_number','loan_amount', 'amount_paid','balance','repayment')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response



def Load_Active_loans_Based_on_Transaction(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction=TransactionTypes.objects.get(id=pk)
	records=LoansRepaymentBase.objects.filter(transaction=transaction,status=status)

	context={
	'transaction':transaction,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Load_Active_loans_Based_on_Transaction.html',context)



def export_Active_loans_Based_on_Transaction_records_xls(request,pk):

	status="ACTIVE"
	transaction=TransactionTypes.objects.get(id=pk)
	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = f'attachment; filename="{transaction.name}.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Member ID', 'Last Name', 'First Name', 'Middle Name','Loan Type','Loan Number','Loan Amount','Amount Paid',"Balance",'Repayment']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	rows = LoansRepaymentBase.objects.filter(transaction=transaction,status=status).values_list('member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name','transaction__name','loan_number','loan_amount', 'amount_paid','balance','repayment')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response




def Load_Active_loans_Based_on_Transaction_on_Institution(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction=TransactionTypes.objects.get(id=pk)
	records=SalaryInstitution.objects.filter()

	context={
	'transaction':transaction,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Load_Active_loans_Based_on_Transaction_on_Institution.html',context)


def Load_Active_loans_Based_on_Transaction_on_Institution_Details(request,pk,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	status="ACTIVE"
	transaction=TransactionTypes.objects.get(id=trans_id)
	salary_institution=SalaryInstitution.objects.get(id=pk)

	records = LoansRepaymentBase.objects.filter(transaction=transaction,member__salary_institution=salary_institution,status=status)

	context={
	'salary_institution':salary_institution,
	'transaction':transaction,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Load_Active_loans_Based_on_Transaction_on_Institution_Details.html',context)


def export_Load_Active_loans_Based_on_Transaction_on_Institution_Details_xls(request,pk,trans_id):

	status="ACTIVE"

	transaction=TransactionTypes.objects.get(id=trans_id)
	salary_institution=SalaryInstitution.objects.get(id=pk)

	response = HttpResponse(content_type='application/ms-excel')
	response['Content-Disposition'] = f'attachment; filename="{salary_institution.title}_{transaction.name}.xls"'

	wb = xlwt.Workbook(encoding='utf-8')
	ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

	row_num = 0  # Sheet header, first row

	font_style = xlwt.XFStyle()
	font_style.font.bold = True

	columns = ['Member ID', 'Last Name', 'First Name', 'Middle Name','Loan Type','Loan Number','Loan Amount','Amount Paid',"Balance",'Repayment']

	for col_num in range(len(columns)):
		ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column

	font_style = xlwt.XFStyle()  # Sheet body, remaining rows


	rows = LoansRepaymentBase.objects.filter(transaction=transaction,member__salary_institution=salary_institution,status=status).values_list('member__coop_no','member__admin__last_name','member__admin__first_name','member__middle_name','transaction__name','loan_number','loan_amount', 'amount_paid','balance','repayment')

	for row in rows:
		row_num += 1
		for col_num in range(len(row)):
			ws.write(row_num, col_num, row[col_num], font_style)
	wb.save(response)

	return response




def Standardized_Standing_Orders_Transaction_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=TransactionTypes.objects.filter(source__title='SAVINGS')

	context={

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Standardized_Standing_Orders_Transaction_Load.html',context)



def Standardized_Standing_Orders_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transaction=TransactionTypes.objects.get(id=pk)
	Members=Members.objects.filter(status='ACTIVE')
	context={
	'transaction':transaction,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'Members':Members,
	}
	return render(request,'deskofficer_templates/Standardized_Standing_Orders_Details.html',context)

############################################################
##################### PERSONEL LEDGER ########################
############################################################

def Members_Dashboard_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members Dashboard"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Dashboard_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Members_Dashboard_Search_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Members_Dashboard_Search'))

		members=searchMembers(form['title'].value(),status)


		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Members_Dashboard_Search_list_load.html',context)


def Auxillary_Savings_Deduction_Generate_Delete(request,pk,member_pk):
	MonthlyDeductionList.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member_pk,)))


def Auxillary_Savings_Deduction_Generate(request,pk,member_pk):
	transaction_period=TransactionPeriods.objects.get(status='ACTIVE')
	transaction_period=transaction_period.transaction_period


	transaction=TransactionTypes.objects.get(id=pk)
	member=Members.objects.get(id=member_pk)

	if StandingOrderAccounts.objects.filter(transaction__member=member,transaction__transaction=transaction).exists():
		account=StandingOrderAccounts.objects.get(transaction__member=member,transaction__transaction=transaction)
	else:
		messages.error(request,'Not seen')
		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member.pk,)))


	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username
	tdate=get_current_date(now)

	if MonthlyDeductionList.objects.filter(member=member,transaction_period=transaction_period,transaction=transaction,account_number=account.transaction.account_number).exists():
		messages.error(request,'Already in the database')
		return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member.pk,)))


	MonthlyDeductionList(
					member=member,
					transaction_period=transaction_period,
					transaction=transaction,
					account_number=account.transaction.account_number,
					amount=account.amount,
					balance=0,
					processing_status="UNPROCESSED",
					processed_by=processed_by,
					salary_institution=member.salary_institution,
					status="UNTREATED",
					tdate=tdate).save()
	return HttpResponseRedirect(reverse('Members_Dashboard_Load',args=(member.pk,)))



def Members_Dashboard_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	
	member=Members.objects.get(id=pk)
	transaction=TransactionTypes.objects.get(code='800')
	transaction1=TransactionTypes.objects.get(code='700')
	welfare_code=MembersAccountsDomain.objects.get(transaction=transaction,member=member)
	share_code=MembersAccountsDomain.objects.get(transaction=transaction1,member=member)

	context={
	'share_code':share_code,
	'welfare_code':welfare_code,
	'member':member,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load.html',context)


def Members_Dashboard_Load_Cooperative_Shop(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	
	queryset=[]
	if CooperativeShopLedger.objects.filter(member=member).exists():

		record=CooperativeShopLedger.objects.filter(member=member).last()
		if abs(record.balance)>0:
			queryset=record

	context={
	'queryset':queryset,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Cooperative_Shop.html',context)


def Members_Dashboard_Load_Welfare_Transactions(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)
	status='UNTREATED'
	total_welfare=0
	welfare=MembersWelfareAccounts.objects.filter(member__member=member,status=status)
	query=MembersWelfareAccounts.objects.filter(member__member=member,status=status).aggregate(total=Sum('amount'))
	total_welfare=query['total']

	context={

	'total_welfare':total_welfare,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Welfare_Transactions.html',context)


def Members_Dashboard_Load_Monthly_Deductions(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=TransactionPeriod_form(request.POST or None)
	
	member=Members.objects.get(id=pk)
	
	
	transaction_period=TransactionPeriods.objects.get(status="ACTIVE")
	transaction_period=transaction_period.transaction_period
	records=MonthlyDeductionList.objects.filter(member=member,transaction_period=transaction_period)

	deduction_sum=MonthlyDeductionList.objects.filter(member=member,transaction_period=transaction_period).aggregate(total=Sum('amount'),deduction=Sum('amount_deducted'))

	
	generated_amount=deduction_sum['total']
	total_deduction=deduction_sum['deduction']

	if request.method=="POST":
		transaction_period_id=request.POST.get('transaction_period')
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_period_id, date_format)

		transaction_period=get_current_date(dtObj)
		records=MonthlyDeductionList.objects.filter(member=member,transaction_period=transaction_period)
		deduction_sum=MonthlyDeductionList.objects.filter(member=member,transaction_period=transaction_period).aggregate(total=Sum('amount'),deduction=Sum('amount_deducted'))

		generated_amount=deduction_sum['total']
		total_deduction=deduction_sum['deduction']

	form.fields['transaction_period'].initial=get_current_date(transaction_period)
	context={
	'generated_amount':generated_amount,
	'total_deduction':total_deduction,
	'transaction_period':transaction_period,
	'records':records,
	'member':member,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Monthly_Deductions.html',context)


def Members_Dashboard_Load_Loan_Ledger(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	loans=LoansRepaymentBase.objects.filter(member=member).filter(Q(balance__lt=0))
	context={
	'loans':loans,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Loan_Ledger.html',context)


def Members_Dashboard_Load_Loan_Ledger_History(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	loans=LoansRepaymentBase.objects.filter(member=member).filter(Q(balance__gt=0) | Q(balance=0))
	context={
	'loans':loans,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Loan_Ledger.html',context)



def Members_Dashboard_Load_Savings_Ledger(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)
	savings=MembersAccountsDomain.objects.filter(member=member)

	savings_array=[]
	for saving in savings:
		if PersonalLedger.objects.filter(account_number=saving.account_number).exists():
			ledger = PersonalLedger.objects.filter(account_number=saving.account_number).last()
			savings_array.append((ledger.transaction.name,ledger.account_number,ledger.balance,saving.transaction.transfer_enabled))

	context={
	'savings_array':savings_array,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Savings_Ledger.html',context)


def Members_Savings_Fund_Transfer_Routes(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	saving=MembersAccountsDomain.objects.get(account_number=pk)
	context={
	'saving':saving,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Routes.html',context)


def Members_Savings_Fund_Transfer_Savings_Routes(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	source_saving=MembersAccountsDomain.objects.get(account_number=pk)
	destination_savings=MembersAccountsDomain.objects.filter(Q(member=source_saving.member) & ~Q(account_number=pk) & Q(transaction__source__title='SAVINGS'))
	

	context={
	'source_saving':source_saving,
	'destination_savings':destination_savings,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Savings_Routes.html',context)


def Members_Savings_Fund_Transfer_Savings_Details(request,pk,dest_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	tdate=get_current_date(now)

	form=Members_Savings_Fund_Transfer_Savings_Details_form(request.POST or None)
	
	destination_saving=MembersAccountsDomain.objects.get(id=dest_pk)
	
	if PersonalLedger.objects.filter(account_number=pk).exists():
		source_saving=PersonalLedger.objects.filter(account_number=pk).last()
	else:
		messages.error(request,'No Record Found for this Transaction')
		return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Routes',args=(pk,)))
	
	if request.method == 'POST':
		amount=request.POST.get('amount')
		narration=request.POST.get('narration')
		

		if not source_saving.balance or float(source_saving.balance)<=0:
			messages.error(request,'This transaction has not Balance')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))

		if not amount or float(amount)<=0:
			messages.error(request,'Invalid Amount Specification')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))
		
		if float(amount)>float(source_saving.balance):
			messages.error(request,'Invalid!!! Amount Specified cannot be greater Source Ledger Balance')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))
		
		if not narration:
			messages.error(request,'Please Specify the Reason')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))

		ledger=get_ledger_balance(destination_saving.account_number)
	
		dest_debit=0
		dest_credit=amount
		dest_balance=abs(float(ledger)) + abs(float(amount))
		dest_particulars=f'Fund transfer from {source_saving.transaction.name}({source_saving.account_number}) for {narration} on {get_print_date(now)}'
		
		post_to_ledger(source_saving.member,
							destination_saving.transaction,
							destination_saving.account_number,
							dest_particulars,
							dest_debit,
							dest_credit,
							dest_balance,
							get_current_date(now),
							'ACTIVE',
							tdate,processed_by)


		source_debit=amount
		source_credit=0
		source_balance=abs(float(source_saving.balance)) - abs(float(amount))
		source_particulars=f'Fund transfer to {destination_saving.transaction.name}({destination_saving.account_number}) for {narration} on {get_print_date(now)}'
		
		post_to_ledger(destination_saving.member,
							source_saving.transaction,
							source_saving.account_number,
							source_particulars,
							source_debit,
							source_credit,
							source_balance,
							get_current_date(now),
							'ACTIVE',
							tdate,processed_by)


	
		Saving_Fund_Transfer_History(member=source_saving.member,
									sources_account_name=source_saving.transaction.name,
									sources_accoun_number=source_saving.account_number,
									destination_account_name=destination_saving.transaction.name,
									destination_accoun_number=destination_saving.account_number,
									amount=amount,
									particulars=narration,
									processed_by=processed_by,
									tdate=tdate,
									).save()
		return HttpResponseRedirect(reverse('Members_Dashboard_Load_Savings_Ledger',args=(destination_saving.member.pk,)))

	form.fields['source_account_name'].initial=source_saving.transaction.name
	form.fields['source_account_number'].initial=source_saving.account_number
	form.fields['balance'].initial=source_saving.balance
	form.fields['destination_account_name'].initial=destination_saving.transaction.name
	form.fields['destination_account_number'].initial=destination_saving.account_number
	context={
	'form':form,
	'source_saving':source_saving,
	'destination_saving':destination_saving,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Savings_Details.html',context)


def Members_Savings_Fund_Transfer_Savings_Details_Report_Period(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"
	form=Purchase_Summary_form(request.POST or None)
	

	if request.method == 'POST':
		start_date=request.POST.get('start_date')
		
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)

		stop_date=request.POST.get('stop_date')
		dtObj = datetime.datetime.strptime(stop_date, date_format)
		stop_date=get_current_date(dtObj)

		records=Saving_Fund_Transfer_History.objects.filter(tdate__range=[start_date,stop_date])
		context={
		'records':records,
		}
		return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Savings_Details_Report_Load.html',context) 
	form.fields['start_date'].initial=get_current_date(now)
	form.fields['stop_date'].initial=now + relativedelta(days=int(3))
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Savings_Details_Report_Period.html',context)



def Members_Savings_Fund_Transfer_Loan_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	saving=MembersAccountsDomain.objects.get(account_number=pk)
	loans=LoansRepaymentBase.objects.filter(member=saving.member).filter(balance__lt=0)

	context={
	'saving':saving,
	'loans':loans,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Loan_Load.html',context)



def Members_Savings_Fund_Transfer_Loan_Details(request,pk,dest_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	tdate=get_current_date(now)

	form=Members_Savings_Fund_Transfer_Savings_Details_form(request.POST or None)

	destination_loan=LoansRepaymentBase.objects.get(id=dest_pk)
	dest_balance=destination_loan.balance

	if PersonalLedger.objects.filter(account_number=pk).exists():
		source_saving=PersonalLedger.objects.filter(account_number=pk).last()
	else:
		messages.error(request,'No Record Found for this Transaction')
		return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Routes',args=(pk,)))
	
	if request.method == 'POST':
		amount=request.POST.get('amount')
		narration=request.POST.get('narration')
		

		if not source_saving.balance or float(source_saving.balance)<=0:
			messages.error(request,'This transaction has not Balance')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))

		if not amount or float(amount)<=0:
			messages.error(request,'Invalid Amount Specification')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))
		
		if float(amount)>float(source_saving.balance):
			messages.error(request,'Invalid!!! Amount Specified cannot be greater Source Ledger Balance')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))
		
		if not narration:
			messages.error(request,'Please Specify the Reason')
			return HttpResponseRedirect(reverse('Members_Savings_Fund_Transfer_Savings_Details',args=(pk,dest_pk,)))

		if float(amount)>abs(float(dest_balance)):
			amount=abs(float(dest_balance))

		destination_loan.balance=float(dest_balance)+abs(float(amount))
		destination_loan.save()


		ledger=get_ledger_balance(destination_loan.loan_number)
	
		dest_debit=0
		dest_credit=amount
		dest_balance=(float(ledger)) + abs(float(amount))
		dest_particulars=f'Fund transfer from {source_saving.transaction.name}({source_saving.account_number}) for {narration} on {get_print_date(now)}'
		
		post_to_ledger(source_saving.member,
							destination_loan.transaction,
							destination_loan.loan_number,
							dest_particulars,
							dest_debit,
							dest_credit,
							dest_balance,
							get_current_date(now),
							'ACTIVE',
							tdate,processed_by)



		source_debit=amount
		source_credit=0
		source_balance=abs(float(source_saving.balance)) - abs(float(amount))
		source_particulars=f'Fund transfer to {destination_loan.transaction.name}({destination_loan.loan_number}) for {narration} on {get_print_date(now)}'
		
		post_to_ledger(destination_loan.member,
							source_saving.transaction,
							source_saving.account_number,
							source_particulars,
							source_debit,
							source_credit,
							source_balance,
							get_current_date(now),
							'ACTIVE',
							tdate,processed_by)


	
		Saving_Fund_Transfer_History(member=source_saving.member,
									sources_account_name=source_saving.transaction.name,
									sources_accoun_number=source_saving.account_number,
									destination_account_name=destination_loan.transaction.name,
									destination_accoun_number=destination_loan.loan_number,
									amount=amount,
									particulars=narration,
									processed_by=processed_by,
									tdate=tdate,
									).save()
		


		if float(destination_loan.balance)>=0:
			record_cleared=LoansCleared(loan=destination_loan,
											processed_by=processed_by,
											status='UNTREATED',
											tdate=tdate)
			record_cleared.save()
		

		
			PersonalLedger.objects.filter(account_number=destination_loan.loan_number).update(status='INACTIVE')
			destination_loan.status="INACTIVE"
			destination_loan.save()

	
		return HttpResponseRedirect(reverse('Members_Dashboard_Load_Savings_Ledger',args=(destination_loan.member.pk,)))

	form.fields['source_account_name'].initial=source_saving.transaction.name
	form.fields['source_account_number'].initial=source_saving.account_number
	form.fields['balance'].initial=source_saving.balance
	form.fields['destination_account_name'].initial=destination_loan.transaction.name
	form.fields['destination_account_number'].initial=destination_loan.loan_number
	context={
	'form':form,
	'source_saving':source_saving,
	'destination_loan':destination_loan,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Savings_Fund_Transfer_Loan_Details.html',context)






def Members_Dashboard_Load_Standing_Orders(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)

	orders=StandingOrderAccounts.objects.filter(transaction__member=member)

	context={
	'member':member,
	'orders':orders,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Standing_Orders.html',context)

def Members_Dashboard_Load_Standing_Orders_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Members_Dashboard_Load_Standing_Orders_Update_Form(request.POST or None)
	record=StandingOrderAccounts.objects.get(id=pk)
	if request.method == 'POST':
		amount=request.POST.get('current_amount')
		if not amount or float(amount)<=0:
			messages.error(request,"Invalid amount specification")
			return HttpResponseRedirect(reverse('Members_Dashboard_Load_Standing_Orders_Update',args=(pk,)))
	
		record.amount=amount
		record.save()
		return HttpResponseRedirect(reverse('Members_Dashboard_Load_Standing_Orders',args=(record.transaction.member.pk,)))
	
	form.fields['existing_amount'].initial=record.amount
	form.fields['current_amount'].initial=record.amount
	context={
	'form':form,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Load_Standing_Orders_Update.html',context)


def Members_Dashboard_Loan_Ledger_transaction_details(request,pk,member_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Display_PersonalLedger_All_Records(pk)

	context={
	'member_pk':member_pk,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Dashboard_Loan_Ledger_transaction_details.html',context)



def PersonalLedger_Selected_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Ledger Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/PersonalLedger_Selected_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def PersonalLedger_Selected_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('PersonalLedger_Selected_Search'))

		members=searchMembers(form['title'].value(),status)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/PersonalLedger_Selected_list_load.html',context)


def PersonalLedger_Transaction_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	form=PersonalLedger_Transaction_Load_form(request.POST or None)
	member=Members.objects.get(id=pk)

	if request.method=="POST":
		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)
		return HttpResponseRedirect(reverse('PersonalLedger_Transaction_Account_Load',args=(member.pk,transaction.pk,)))


	context={
	'form':form,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/PersonalLedger_Transaction_Load.html',context)


def PersonalLedger_Transaction_Account_Load(request,pk,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	form=PersonalLedger_Transaction_Account_Load_form(request.POST or None)
	member=Members.objects.get(id=pk)
	# status=MembershipStatus.objects.all()
	transaction=TransactionTypes.objects.get(id=trans_id)


	p=[]
	records=[]
	account_number=""
	if request.method=="POST" and 'btn-fetch' in request.POST:
		transaction_status=request.POST.get('status')


		transaction=TransactionTypes.objects.get(id=trans_id)
		p=PersonalLedger.objects.filter(member=member,transaction=transaction,status=transaction_status).order_by('account_number').values_list('account_number', flat=True).distinct()


	if request.method=="POST" and 'btn-display' in request.POST:
		account_number=request.POST.get('transaction')
		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)


		dtObj = datetime.datetime.strptime(stop_date, date_format)
		stop_date=get_current_date(dtObj)



		if start_date and stop_date:
			return HttpResponseRedirect(reverse('PersonalLedger_Display',args=(account_number,start_date,stop_date)))
		else:
			return HttpResponseRedirect(reverse('PersonalLedger_Transaction_Account_Load',args=(pk,trans_id,)))


	form.fields['start_date'].initial= now - relativedelta(months=int(3))
	form.fields['stop_date'].initial= now



	context={
	'form':form,
	'transaction_list':p,
	'records':records,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	# 'status':status,
	'transaction':transaction,
	'account_number':account_number,
	}
	return render(request,'deskofficer_templates/PersonalLedger_Transaction_Account_Load.html',context)


def PersonalLedger_Display(request,account_number,start_date,stop_date):
	items=Display_PersonalLedger(account_number,start_date,stop_date)
	title=[]
	if items:
		title=items[0].transaction.name

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'records':items,
	'title':title
	}
	return render(request,'deskofficer_templates/PersonalLedger_Display.html',context)


def MemberShipFormSalesReport(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Purchase_Summary_form(request.POST or None)

	form.fields['stop_date'].initial=now
	form.fields['start_date'].initial=now

	records=[]
	if request.method == 'POST':
		start_date = request.POST.get('start_date')
		stop_date = request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)

		tdate2 = datetime.datetime.strptime(stop_date, date_format)
		records=MemberShipFormSalesRecord.objects.filter(tdate__range=[tdate1,tdate2],new_registration=True)


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,
	'records':records,
	}
	return render(request,'deskofficer_templates/MemberShipFormSalesReport.html',context)



def MemberShipFormSales_Report_individual_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/MemberShipFormSales_Report_individual_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def MemberShipFormSales_Report_individual_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST or None)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('MemberShipFormSales_Report_individual_Search'))

		transaction=TransactionTypes.objects.get(code='800')
		status="ACTIVE"
		# members=MembersAccountsDomain.objects.filter(Q(member__file_no__icontains=form['title'].value()) |Q(member__ippis_no__icontains=form['title'].value()) |Q(member__phone_number__icontains=form['title'].value()) | Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value())).filter(member__status=status,transaction=transaction)
		members=searchMembersFormSales(form['title'].value())

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/MemberShipFormSales_Report_individual_list_Load.html',context)


##############################################################
################### DAY END TRANSACTIONS ####################
#############################################################

def MemberShipFormSalesSummary(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Purchase_Summary_form(request.POST or None)
	processed_by=CustomUser.objects.get(id=request.user.id)
	status="UNTREATED"
	status1="TREATED"

	form.fields['start_date'].initial=now

	records=[]
	button_show=False
	if request.method == 'POST' and 'btn_fetch' in request.POST:

		start_date = request.POST.get('start_date')


		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)

		button_show=False
		records=MemberShipFormSalesRecord.objects.filter(tdate=tdate1,processed_by=processed_by.username,status=status)
		if records:
			button_show=True

	if request.method == 'POST' and 'btn_submit' in request.POST:
		start_date = request.POST.get('start_date')

		date_format = '%Y-%m-%d'
		tdate1 = datetime.datetime.strptime(start_date, date_format)

		records=MemberShipFormSalesRecord.objects.filter(tdate=tdate1,processed_by=processed_by.username,status=status)
		queryset=MemberShipFormSalesRecord.objects.filter(tdate=tdate1,processed_by=processed_by.username,status=status).aggregate(total=Sum('total_amount'))

		total_amount=queryset['total']
		record= Day_End_Desk_Office_Transactions(description="MEMBERSHIP FORM SALES",
												amount=total_amount,
												processed_by=processed_by.username,
												status=status,
												tdate=tdate1,
											)
		record.save()

		MemberShipFormSalesRecord.objects.filter(tdate=tdate1,processed_by=processed_by.username,status=status).update(status=status1)
		return HttpResponseRedirect(reverse('deskofficer_home'))




	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'form':form,
	'records':records,
	'button_show':button_show,
	}
	return render(request,'deskofficer_templates/MemberShipFormSalesSummary.html',context)

def MemberShip_Form_Sales_Summary_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	record=MemberShipFormSalesRecord.objects.get(id=pk)


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'record':record,
	}
	return render(request,'deskofficer_templates/MemberShip_Form_Sales_Summary_Details.html',context)



##########################################################################
######################## SEO SECTION #####################################
##########################################################################


def members_credit_purchase_approval(request):
	approval_status='PENDING'
	status="UNTREATED"
	records=members_credit_sales_summary.objects.filter(status=status,approval_status=approval_status)

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/members_credit_purchase_approval.html',context)


def members_credit_purchase_approval_preview(request,ticket):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	form=approval_form(request.POST or None)
	records=members_credit_sales_analysis.objects.filter(trans_code__ticket=ticket)
	sum_debit = members_credit_sales_analysis.objects.filter(trans_code__ticket=ticket).aggregate(total_debit=Sum('debit'))
	sum_credit = members_credit_sales_analysis.objects.filter(trans_code__ticket=ticket).aggregate(total_credit=Sum('credit'))

	if sum_debit['total_debit']:
		debit_amount=float(sum_debit['total_debit'])

	else:
		debit_amount=0

	if sum_credit['total_credit']:
		credit_amount=float(sum_credit['total_credit'])

	else:
		credit_amount=0


	balance_amount = float(credit_amount)-float(debit_amount)


	selected_items =Members_Credit_Sales_Selected.objects.filter(ticket=ticket)
	if not selected_items:
		messages.error(request,'No record found')
		return HttpResponseRedirect(reverse('members_credit_purchase_approval'))

	sum_selected_items = Members_Credit_Sales_Selected.objects.filter(ticket=ticket).aggregate(total_item_amount=Sum('total'), total_items=Sum('quantity'))

	if sum_selected_items['total_item_amount']:
		total_amount=float(sum_selected_items['total_item_amount'])
		total_item_count=int(sum_selected_items['total_items'])
	else:
		total_amount=0
		total_item_count=0

	balance1=credit_amount-debit_amount
	balance2=balance1-total_amount

	if request.method=="POST":
		approval_date=get_current_date(now)
		approval_officer=CustomUser.objects.get(id=request.user.id).username
		approval_comment=request.POST.get('comment')

		approval_status=request.POST.get('approval_status')

		record=members_credit_sales_summary.objects.get(trans_code__ticket=ticket)

		record.approval_comment=approval_comment
		record.approval_officer=approval_officer
		record.approval_date=approval_date
		record.approval_status=approval_status
		record.save()
		return HttpResponseRedirect(reverse('members_credit_purchase_approval'))
	form.fields['comment'].initial='APPROVED'
	form.fields['approval_status'].initial='APPROVED'


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'records':records,
	'form':form,
	'full_name':selected_items[0].member.get_full_name,
	'selected_items':selected_items,
	'total_amount':total_amount,
	'total_item_count':total_item_count,
	'debit_amount':debit_amount,
	'credit_amount':credit_amount,
	'balance_amount':balance_amount,
	'balance1':balance1,
	'balance2':balance2,
	}
	return render(request,'deskofficer_templates/members_credit_purchase_approval_preview.html',context)




def Initial_Shares_Update_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	approval_status='PENDING'
	status='UNTREATED'
	members=MembersShareInitialUpdateRequest.objects.filter(status=status,approval_status=approval_status)


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,


	'members':members,
	'now':now,
	}
	return render(request,'deskofficer_templates/SEO/Initial_Shares_Update_List_Load.html',context)

def Initial_Shares_Update_preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=Initial_Shares_Update_preview_form(request.POST or None)
	member=MembersShareInitialUpdateRequest.objects.get(id=pk)
	form.fields['amount'].initial=member.amount

	if request.method=='POST':
		approval_status_id=request.POST.get('approval_status')
		approval_status=ApprovalStatus.objects.get(id=approval_status_id)

		comment=request.POST.get('comment')
		member.approval_status=approval_status
		member.approval_comment=comment
		member.approved_at=now
		member.save()
		return HttpResponseRedirect(reverse('Initial_Shares_Update_List_Load'))

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'member':member,
	}
	return render(request,'deskofficer_templates/Initial_Shares_Update_preview.html',context)



def Transaction_Adjustment_Approval_list_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Deposit_Summary_form(request.POST or None)
	if request.method == 'POST':
		transaction_period=request.POST.get('current_date')

		dtObj = datetime.datetime.strptime(transaction_period, '%Y-%m-%d')
		transaction_period=get_current_date(dtObj)

		return HttpResponseRedirect(reverse('Transaction_Adjustment_Approval_list_Load',args=(transaction_period,)))
	form.fields['current_date'].initial=get_current_date(now)
	context={
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Approval_list_Period_Load.html',context)



def Transaction_Adjustment_Approval_list_Load(request,transaction_period):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	approval_status='PENDING'
	# records=TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,approval_status=approval_status).exclude(processed_by=processed_by.username)
	records=TransactionAjustmentRequest.objects.filter(effective_date=transaction_period,approval_status=approval_status) #.exclude(processed_by=processed_by.username)
	button_enabled=False
	if records:
		button_enabled=True
	
	context={
	'button_enabled':button_enabled,
	'transaction_period':transaction_period,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Transaction_Adjustment_Approval_list_Load.html',context)


def Transaction_Adjustment_Approval_Process(request,pk):
	approval_officer=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	approval_status='APPROVED'
	record=TransactionAjustmentRequest.objects.get(id=pk)
	record.approval_status=approval_status
	record.approval_officer=approval_officer.username
	record.approved_at=tdate
	record.save()
	return HttpResponseRedirect(reverse('Transaction_Adjustment_Approval_list_Load'))



def Transaction_Adjustment_Approval_Process_All(request,pk):
	approval_officer=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)
	approval_status='APPROVED'
	TransactionAjustmentRequest.objects.filter(effective_date=pk).update(approval_status=approval_status,approval_officer=approval_officer.username,approved_at=tdate)

	return HttpResponseRedirect(reverse('Transaction_Adjustment_Approval_list_Period_Load'))



def Transaction_Loan_Adjustment_Approval_list_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	approval_status='PENDING'
	records=TransactionLoanAjustmentRequest.objects.filter(approval_status=approval_status)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Transaction_Loan_Adjustment_Approval_list_Load.html',context)


def Transaction_Loan_Adjustment_Approval_list_Process(request,pk):
	approval_status='APPROVED'
	approval_officer=CustomUser.objects.get(id=request.user.id)
	approved_at=get_current_date(now)

	record=TransactionLoanAjustmentRequest.objects.get(id=pk)
	record.approval_status=approval_status
	record.approved_at=approved_at
	record.approval_officer=approval_officer.username

	record.save()
	return HttpResponseRedirect(reverse('Transaction_Loan_Adjustment_Approval_list_Load'))


def Essential_Commodity_Loan_Request_Approval(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	approval_status='PENDING'
	records=Essential_Commodity_Product_Selection_Summary.objects.filter(approval_status=approval_status)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'records':records,
	}
	return render(request,'deskofficer_templates/SEO/Essential_Commodity_Loan_Request_Approval.html',context)


def Essential_Commodity_Loan_Request_Approval_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Essential_Commodity_Loan_Request_Approval_Details_form(request.POST or None)

	record=Essential_Commodity_Product_Selection_Summary.objects.get(id=pk)
	ticket=record.ticket
	records=Essential_Commodity_Product_Select.objects.filter(ticket=ticket)

	if request.method == "POST":
		tdate=get_current_date(now)
		comment=request.POST.get("comment")
		approval_status_id = request.POST.get('approval_status')
		approval_status=ApprovalStatus.objects.get(id=approval_status_id)

		record.approval_comment=comment
		record.approval_status=approval_status
		record.approval_date=tdate

		record.save()

		return HttpResponseRedirect(reverse('Essential_Commodity_Loan_Request_Approval'))
	form.fields['comment'].initial="APPROVED"
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	'form':form,
	'record':record,
	'records':records,
	}
	return render(request,'deskofficer_templates/SEO/Essential_Commodity_Loan_Request_Approval_Details.html',context)

############################################################
##################### GENERAL REPORTS ######################
############################################################

def Cash_Deposit_Report_Date_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Cash_Deposit_Report_Date_Load_form(request.POST or None)

	form.fields['start_date'].initial=now
	form.fields['stop_date'].initial=now
	records=[]
	if request.method=='POST' and 'btn_display' in request.POST:
		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)


		dtObj = datetime.datetime.strptime(stop_date, date_format)
		stop_date=get_current_date(dtObj)

		records=MembersCashDeposits.objects.filter(created_at__range=[start_date,stop_date])

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'records':records,
	}
	return render(request,'deskofficer_templates/Cash_Deposit_Report_Date_Load.html',context)


def Norminal_Roll_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=Members.objects.all().order_by('phone_number')

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_List_Load.html',context)


def Norminal_Roll_Personel_Detail(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	member=Members.objects.get(id=pk)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'member':member,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_Personel_Detail.html',context)



def Norminal_Roll_By_Institution_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records = SalaryInstitution.objects.all().order_by('rank')
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_By_Institution_Load.html',context)



def Norminal_Roll_By_Institution_List_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	salary_institution=SalaryInstitution.objects.get(id=pk)
	members=Members.objects.filter(salary_institution=salary_institution)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'members':members,
	'pk':pk,
	}
	return render(request,'deskofficer_templates/Norminal_Roll_By_Institution_List_Load.html',context)




def Over_Deductions_report(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	periods=TransactionPeriods.objects.all().order_by('transaction_period')

	records=[]
	if request.method == 'POST':
		transaction_period_id = request.POST.get('period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)

		records=MonthlyDeductionListGenerated.objects.filter(transaction_period=transaction_period).filter(Q(balance__gt=0))

	context={
	'records':records,
	'periods':periods,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Over_Deductions_report.html',context)


def Under_Deductions_report(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	periods=TransactionPeriods.objects.all().order_by('transaction_period')

	records=[]
	if request.method == 'POST':
		transaction_period_id = request.POST.get('period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)

		records=MonthlyDeductionListGenerated.objects.filter(transaction_period=transaction_period).filter(Q(balance__lt=0))

	context={
	'records':records,
	'periods':periods,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/Under_Deductions_report.html',context)

def Non_Members_Deductions_report(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	periods=TransactionPeriods.objects.all().order_by('transaction_period')

	records=[]
	if request.method == 'POST':
		transaction_period_id = request.POST.get('period')
		transaction_period=TransactionPeriods.objects.get(id=transaction_period_id)
		transaction_period=get_current_date(transaction_period.transaction_period)

		records=NonMemberAccountDeductions.objects.filter(transaction_period=transaction_period)

	context={
	'records':records,
	'periods':periods,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Non_Members_Deductions_report.html',context)


def Members_Welfare_Report_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Welfare Report"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Welfare_Report_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})


def Members_Welfare_Report_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST or None)
	if request.method == "POST":
		if request.POST.get("title")=="":
			return HttpResponseRedirect(reverse('Members_Welfare_Report_Search'))

		transaction=TransactionTypes.objects.get(code='800')
		status="ACTIVE"
		members=MembersAccountsDomain.objects.filter(Q(member__file_no__icontains=form['title'].value()) |Q(member__ippis_no__icontains=form['title'].value()) |Q(member__phone_number__icontains=form['title'].value()) | Q(member__admin__first_name__icontains=form['title'].value()) | Q(member__admin__last_name__icontains=form['title'].value()) | Q(member__middle_name__icontains=form['title'].value())).filter(member__status=status,transaction=transaction)

		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

		}
		return render(request,'deskofficer_templates/Members_Welfare_Report_list_load.html',context)


def Members_Welfare_Report_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=MembersAccountsDomain.objects.get(id=pk)
	records=MembersWelfareAccounts.objects.filter(member=member)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'member':member,
	}
	return render(request,'deskofficer_templates/Members_Welfare_Report_details.html',context)


def Members_Welfare_Report_General_Records(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Members_Welfare_Report_General_Records_form(request.POST or None)


	members_array = []
	if request.method == 'POST':
		start_year=request.POST.get('start_year')
		stop_year=request.POST.get('stop_year')

		records=MembersWelfareAccounts.objects.filter(year__range=[start_year,stop_year]).order_by('member__member_id').values_list('id','member__member__member_id','member__member__admin__last_name','member__member__admin__first_name','member__member__middle_name','member__account_number','member__member__ippis_no').distinct()

		for record in records:
			queryset=  MembersWelfareAccounts.objects.filter(year__range=[start_year,stop_year],member__member__member_id=record[1]).aggregate(total_cash=Sum('amount'))
			total_amount=queryset['total_cash']

			members_array.append((record[1][13:],record[2] + " " + record[3]+ " " + record[4],record[5],total_amount,record[6]))


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'members_array':members_array,
	}
	return render(request,'deskofficer_templates/Members_Welfare_Report_General_Records.html',context)


def Members_Welfare_Report_General_Record_details(request,pk,member_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=MembersWelfareAccounts.objects.filter(member__member__ippis_no=pk)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'member':member_id,
	}
	return render(request,'deskofficer_templates/Members_Welfare_Report_General_Record_details.html',context)




def Members_Cleared_Loans_Records(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=search_with_date_Form(request.POST or None)


	records = []
	if request.method == 'POST':
		start_date=request.POST.get('start_date')
		stop_date=request.POST.get('stop_date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date, date_format)
		start_date=get_current_date(dtObj)


		dtObj = datetime.datetime.strptime(stop_date, date_format)
		stop_date=get_current_date(dtObj)


		records=LoansCleared.objects.filter(tdate__range=[start_date,stop_date])

	form.fields['start_date'].initial=now
	form.fields['stop_date'].initial=now

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'records':records,
	}
	return render(request,'deskofficer_templates/Members_Cleared_Loans_Records.html',context)



def Members_Cleared_Loans_Records_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=search_with_date_Form(request.POST or None)

	records=PersonalLedger.objects.filter(account_number=pk)

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/Members_Cleared_Loans_Records_Details.html',context)



def Transaction_adjustment_history_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Members for Ledger Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Transaction_adjustment_history_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Transaction_adjustment_history_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Transaction_adjustment_history_Search'))


		members=searchMembers(form['title'].value(),status)


		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Transaction_adjustment_history_List_load.html',context)



def TransactionAjustmentHistory_Transaction_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=pk)
	records=MembersAccountsDomain.objects.filter(member=member,transaction__source__title="SAVINGS")
	context={
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/TransactionAjustmentHistory_Transaction_Load.html',context)

def TransactionAjustmentHistory_details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=MembersAccountsDomain.objects.get(id=pk)

	records=TransactionAjustmentHistory.objects.filter(member=member)
	context={
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/TransactionAjustmentHistory_details.html',context)


def Members_Initial_Shares_Reports_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	members=Members.objects.all()

	members_array=[]
	for member in members:
		if MembersShareAccounts.objects.filter(Q(member__member=member) & Q(shares__lt=2)).exists():
			record=MembersShareAccounts.objects.get(member__member=member)
			members_array.append((member.member_id,member.admin.last_name + " " + member.admin.first_name+ " " + member.middle_name,record.shares,member.pk))
		elif  MembersShareAccounts.objects.exclude(member__member=member):
			members_array.append((member.member_id[13:],member.admin.last_name + " " + member.admin.first_name+ " " + member.middle_name,0,member.pk))


	context={

	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'members_array':members_array,
	}
	return render(request,'deskofficer_templates/Members_Initial_Shares_Reports_Load.html',context)


def Members_Individual_Shares_Report_Search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Search Members for Shares Information"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Members_Individual_Shares_Report_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	})



def Members_Individual_Shares_Report_List_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"
	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Transaction_adjustment_history_Search'))


		members=searchMembers(form['title'].value(),status)
		# members=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)

		# if members.count() <= 0:
		# 	messages.info(request,"No Record Found")
		# 	return HttpResponseRedirect(reverse('Transaction_adjustment_history_Search'))


		context={
		'members':members,
		'title':title,
		'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Members_Individual_Shares_Report_List_load.html',context)



def Members_Individual_Shares_Report_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)

	member=Members.objects.get(id=pk)
	record=[]
	queryset=[]
	if MembersShareAccounts.objects.filter(member__member=member).exists():

		record=MembersShareAccounts.objects.get(member__member=member)
		queryset=PersonalLedger.objects.filter(account_number=record.member.account_number)

	context={
	'record':record,
	'queryset':queryset,
	'member':member,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_Individual_Shares_Report_Details.html',context)


def Members_General_Shares_Report_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	status='UNTREATED'

	records=MembersShareAccounts.objects.filter(status=status)

	context={
	'records':records,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Members_General_Shares_Report_List_Load.html',context)


# def Rental_Services_List_Load(request):
# 	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
# 	task_array=[]
# 	for task in tasks:
# 		task_array.append(task.task.title)

# 	task_enabler=TransactionEnabler.objects.filter(status="YES")
# 	task_enabler_array=[]
# 	for item in task_enabler:
# 		task_enabler_array.append(item.title)


# 	# contact=RentalBookingHeaders.objects.get(id=pk)

# 	records=RentalSubCategories.objects.all()

# 	context={

# 	'records':records,
# 	'task_array':task_array,
# 	'task_enabler_array':task_enabler_array,
	# 'default_password':default_password,
# 	}
# 	return render(request,'deskofficer_templates/Rental_Services_List_Load.html',context)


def Rental_Services_Category_List_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	# contact=RentalBookingHeaders.objects.get(id=pk)

	records=RentalMainCategories.objects.all()

	context={

	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Category_List_Load.html',context)



def Rental_Services_Contact_Person_Register(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)

	form= Rental_Services_Contact_Person_Register_Form(request.POST or None)

	record=RentalMainCategories.objects.get(id=pk)
	contacts=RentalBookingHeaders.objects.filter(category=record,status='UNTREATED',processed_by=processed_by.username)

	if request.method == 'POST':
		if RentalBookingHeaders.objects.filter(category=record,status='UNTREATED').exists():
			messages.error(request,'You Still Have an Open Transaction')
			return HttpResponseRedirect(reverse('Rental_Services_Contact_Person_Register',args=(pk,)))

		name=request.POST.get('name')
		address=request.POST.get('address')
		phone_no=request.POST.get('phone_no')

		if not name:
			messages.error(request,'Name is Missing')
			return HttpResponseRedirect(reverse('Rental_Services_Contact_Person_Register',args=(pk,)))
		if not address:
			messages.error(request,'Address is Missing')
			return HttpResponseRedirect(reverse('Rental_Services_Contact_Person_Register',args=(pk,)))

		if not phone_no:
			messages.error(request,'Phone Number is Missing')
			return HttpResponseRedirect(reverse('Rental_Services_Contact_Person_Register',args=(pk,)))

		if RentalBookingHeaders.objects.filter(category=record,name=name,phone_no=phone_no,status='UNTREATED').exists():
			messages.info(request,'You still have open trabsaction for this Customer')
			return HttpResponseRedirect(reverse('Rental_Services_Contact_Person_Register',args=(pk,)))

		contact=RentalBookingHeaders(category=record,name=name.upper(),address=address.upper(),phone_no=phone_no,status='UNTREATED',processed_by=processed_by.username)
		contact.save()
		pk=contact.id
		return HttpResponseRedirect(reverse('Rental_Date_Time_Selector',args=(pk,)))
	context={
	'record':record,
	'contacts':contacts,
	'form':form,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Contact_Person_Register.html',context)


def Rental_Services_Contact_Person_Register_Delete(request,pk):
	record=RentalBookingHeaders.objects.get(id=pk)
	return_pk=record.category.pk
	record.delete()
	return HttpResponseRedirect(reverse('Rental_Services_Contact_Person_Register',args=(pk,)))


def Rental_Date_Time_Selector(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	t = time.localtime()
	current_time = time.strftime("%H:%M", t)
	processed_by=CustomUser.objects.get(id=request.user.id)
	form =Rental_Date_Time_Selector_Form(request.POST or None)

	person=RentalBookingHeaders.objects.get(id=pk)



	selections=RentalBookingSelections.objects.filter(contact=person,processed_by=processed_by.username,status='UNTREATED')
	queryset=RentalBookingSelections.objects.filter(contact=person,processed_by=processed_by.username,status='UNTREATED').aggregate(total_amount=Sum('amount'))
	total_amount=queryset['total_amount']

	button_show=False
	if selections:
		button_show=True

	if request.method == 'POST':
		b_date=request.POST.get('date')

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(b_date, date_format)
		b_date=get_current_date(dtObj)

		start_time=request.POST.get('start_time')
		stop_time=request.POST.get('stop_time')

		return HttpResponseRedirect(reverse('Rental_Products_List_Load',args=(
																			pk,
																			b_date,
																			start_time,
																			stop_time,
																			)))



	form.fields['date'].initial=now
	form.fields['start_time'].initial=current_time
	form.fields['stop_time'].initial=current_time
	context={
	'total_amount':total_amount,
	'form':form,
	'button_show':button_show,
	'person':person,
	'selections':selections,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Date_Time_Selector.html',context)


def Rental_Products_List_Load(request,pk,b_date,start_time,stop_time):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)

	person=RentalBookingHeaders.objects.get(id=pk)
	records=RentalPriceSettings.objects.filter(main_category=person.category)

	selections=RentalBookingSelections.objects.filter(contact=person,booked_date=b_date,start_time=start_time,stop_time=stop_time,processed_by=processed_by.username,status='UNTREATED')

	button_show=False
	if selections:
		button_show=True

	if request.method == 'POST':
		service_id=request.POST.get('service')
		service=RentalPriceSettings.objects.get(id=service_id)
		if RentalBookingSelections.objects.filter(contact=person,service=service,booked_date=b_date,start_time=start_time,stop_time=stop_time,status='UNTREATED').exists():
			pass
		else:
			RentalBookingSelections(contact=person,service=service,amount=service.amount,booked_date=b_date,start_time=start_time,stop_time=stop_time,tdate=tdate,processed_by=processed_by.username).save()

		RentalBookingSelectionsSummary.objects.filter(contact=person).delete()
		return HttpResponseRedirect(reverse('Rental_Products_List_Load',args=(pk,b_date,start_time,stop_time)))

	context={
	'person':person,
	'button_show':button_show,
	'selections':selections,
	'records':records,
	'b_date':b_date,
	'start_time':start_time,
	'stop_time':stop_time,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Products_List_Load.html',context)


def Rental_Services_Selection_List_Load_Delete(request,pk,b_date,start_time,stop_time):
	record=RentalBookingSelections.objects.get(id=pk)
	pk=record.contact.pk
	record.delete()
	return HttpResponseRedirect(reverse('Rental_Products_List_Load',args=(pk,b_date,start_time,stop_time)))


def Rental_Services_Group_Selection_List_Load_Delete(request,pk):
	record=RentalBookingSelections.objects.get(id=pk)

	pk=record.contact.pk
	record.delete()
	return HttpResponseRedirect(reverse('Rental_Date_Time_Selector',args=(pk,)))


def Rental_Services_Selection_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Rental_Services_Selection_Preview_Form(request.POST or None)
	form1=Rental_Services_Selection_Preview_Final_Form(request.POST or None)

	processed_by=CustomUser.objects.get(id=request.user.id)
	tdate=get_current_date(now)

	person=RentalBookingHeaders.objects.get(id=pk)

	selections=RentalBookingSelections.objects.filter(contact=person,processed_by=processed_by.username,status='UNTREATED')
	queryset=RentalBookingSelections.objects.filter(contact=person,processed_by=processed_by.username,status='UNTREATED').aggregate(total_amount=Sum('amount'))
	total_amount=queryset['total_amount']


	transaction = TransactionTypes.objects.get(code='300')
	receipt_type=transaction.receipt_type
	button_enabled=False

	if receipt_type== 'AUTO':
		button_show=False

	elif receipt_type == "MANUAL":
		button_show=True

	amount=0
	discount=0
	balance=0

	amount_due=0
	amount_paid=0

	if RentalBookingSelectionsSummary.objects.filter(contact=person,tdate=tdate,status='UNTREATED',processed_by=processed_by.username).exists():
		record=RentalBookingSelectionsSummary.objects.get(contact=person,tdate=tdate,status='UNTREATED',processed_by=processed_by.username)
		amount_due=record.balance
		discount=record.discount
		button_enabled=True

	if request.method == 'POST' and "btn-compute" in request.POST:
		amount=total_amount
		discount=request.POST.get('discount')

		if float(discount)>=float(amount):
			messages.error(request,'Discount cannot be greater than Amount')
			return HttpResponseRedirect(reverse('Rental_Services_Selection_Preview',args=(pk,)))

		balance=float(amount) - float(discount)

		if RentalBookingSelectionsSummary.objects.filter(contact=person,tdate=tdate,status='UNTREATED',processed_by=processed_by.username).exists():
			record=RentalBookingSelectionsSummary.objects.get(contact=person,tdate=tdate,status='UNTREATED',processed_by=processed_by.username)
			record.discount=discount
			record.net_pay=balance
			record.balance=balance
			record.save()

		else:
			RentalBookingSelectionsSummary(contact=person,
										amount=amount,
										discount=discount,
										net_pay=balance,
										balance=balance,
										tdate=tdate,
										status='UNTREATED',
										processed_by=processed_by.username
										).save()

		return HttpResponseRedirect(reverse('Rental_Services_Selection_Preview',args=(pk,)))



	if request.method == 'POST' and "btn-process" in request.POST:
		amount_due=request.POST.get('amount_due')
		amount_paid=request.POST.get('amount_paid')
		if amount_paid and float(amount_paid)>0:
			if float(amount_paid) <=float(amount_due):


				if receipt_type=="AUTO":
					receipt=0
				elif receipt_type == 'MANUAL':
					receipt=request.POST.get('receipt_no')

				receipt=generate_main_receipt(receipt_type,receipt)

				if receipt == 'a':
					messages.error(request,'Receipt not found')
					return HttpResponseRedirect(reverse('Rental_Services_Selection_Preview',args=(pk,)))
				elif receipt=='b':
					messages.error(request,'Receipt Already in Use')
					return HttpResponseRedirect(reverse('Rental_Services_Selection_Preview',args=(pk,)))

				RentalBookingSelectionsPayment(contact=person,
												receipt=receipt,
												amount=amount_paid,
												tdate=tdate,status='UNTREATED',
												processed_by=processed_by.username
												).save()

				RentalBookingSelectionsSummary.objects.filter(contact=person).update(amount_paid=F('amount_paid')+float(amount_paid),balance=F('balance')-float(amount_paid))
				RentalBookingSelectionsSummary.objects.filter(contact=person).filter(Q(balance__lte=0)).update(status='TREATED')

				person.status='TREATED'
				person.save()
				return HttpResponseRedirect(reverse('Rental_Services_Category_List_Load'))
			else:
				messages.error(request,'Amount Paid Cannot be More than Amount Due')
				return HttpResponseRedirect(reverse('Rental_Services_Selection_Preview',args=(pk,)))

		messages.error(request,'No Payment Made')
		return HttpResponseRedirect(reverse('Rental_Services_Selection_Preview',args=(pk,)))

	form.fields['amount'].initial=total_amount
	form.fields['discount'].initial=discount
	form1.fields['amount_due'].initial=amount_due
	form1.fields['amount_paid'].initial=amount_paid
	context={
	'button_enabled':button_enabled,
	'button_show':button_show,
	'form':form,
	'form1':form1,
	'person':person,
	'selections':selections,
	'amount_due':amount_due,
	'amount_paid':amount_paid,
	'total_amount':total_amount,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Selection_Preview.html',context)



def Rental_Services_Unpaid_Bill(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=RentalBookingSelectionsSummary.objects.filter(Q(balance__gt=0))

	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Unpaid_Bill.html',context)



def Rental_Services_Unpaid_Bill_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form=Rental_Services_Selection_Preview_Final_Form(request.POST or None)
	record=RentalBookingSelectionsSummary.objects.get(id=pk)
	person = record.contact
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)

	transaction = TransactionTypes.objects.get(code='300')
	receipt_type=transaction.receipt_type
	button_enabled=False

	if receipt_type== 'AUTO':
		button_show=False

	elif receipt_type == "MANUAL":
		button_show=True

	if request.method == 'POST':
		amount_paid=request.POST.get('amount_paid')
		amount_due=request.POST.get('amount_due')

		if amount_paid and float(amount_paid)>0:
			if float(amount_paid) <=float(amount_due):

				if receipt_type=="AUTO":
					receipt_obj=0
				elif receipt_type == 'MANUAL':
					receipt_obj=request.POST.get('receipt_no')

					if not receipt_obj or int(receipt_obj)<=0:
						messages.error(request, "Invalid Receipt No")
						return HttpResponseRedirect(reverse('Rental_Services_Unpaid_Bill_Preview',args=(pk,)))


				receipt=generate_main_receipt(receipt_type,receipt_obj)

				if receipt == 'a':
					messages.error(request,'Receipt not found')
					return HttpResponseRedirect(reverse('Rental_Services_Unpaid_Bill_Preview',args=(pk,)))
				elif receipt=='b':
					messages.error(request,'Receipt Already in Use')
					return HttpResponseRedirect(reverse('Rental_Services_Unpaid_Bill_Preview',args=(pk,)))

				RentalBookingSelectionsPayment(contact=person,
														receipt=receipt,
														amount=amount_paid,
														tdate=tdate,status='UNTREATED',
														processed_by=processed_by.username
														).save()

				RentalBookingSelectionsSummary.objects.filter(contact=person).update(amount_paid=F('amount_paid')+float(amount_paid),balance=F('balance')-float(amount_paid))
				RentalBookingSelectionsSummary.objects.filter(contact=person).filter(Q(balance__lte=0)).update(status='TREATED')

				return HttpResponseRedirect(reverse('Rental_Services_Unpaid_Bill'))
			else:
				messages.error(request,'Amount Paid Cannot be More than Amount Due')
				return HttpResponseRedirect(reverse('Rental_Services_Unpaid_Bill_Preview',args=(pk,)))

		messages.error(request,'No Payment Made')
		return HttpResponseRedirect(reverse('Rental_Services_Unpaid_Bill_Preview',args=(pk,)))

	form.fields['amount_due'].initial=record.balance
	form.fields['amount_paid'].initial=0
	context={
	'button_show':button_show,
	'form':form,
	'person':person,
	'record':record,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Unpaid_Bill_Preview.html',context)


def Rental_Services_Management(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	records=RentalBookingHeaders.objects.filter(processing_status='UNPROCESSED')


	context={
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Management.html',context)



def Rental_Services_Management_Process(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=RentalBookingHeaders.objects.get(id=pk)

	queryset=RentalBookingSelections.objects.filter(contact=record,status='UNTREATED').order_by('booked_date').values_list('booked_date','booked_date').distinct()

	booking_array = []
	for query in queryset:
		booking_array.append((query[0],query[1]))


	context={
	'queryset':queryset,
	'record':record,
	'booking_array':booking_array,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Management_Process.html',context)


def Rental_Services_Management_Process_Completed(request,pk,b_date):
	record=RentalBookingHeaders.objects.get(id=pk)
	tdate=get_current_date(now)
	booked_date=b_date
	# print("Current Date: " + str(tdate))
	# print("Booked Date: " + str(booked_date))

	if str(tdate) < str(booked_date):
		messages.info(request,'Sorry Booked Date is still ahead of this Current Date')
		return HttpResponseRedirect(reverse('Rental_Services_Management_Process',args=(record.pk,)))

	RentalBookingSelections.objects.filter(contact=record,booked_date=b_date).update(status='TREATED')

	if RentalBookingSelections.objects.filter(contact=record,status='UNTREATED').exists():
		pass
	else:
		record.processing_status='PROCESSED'
		record.save()
	return HttpResponseRedirect(reverse('Rental_Services_Management_Process',args=(record.pk,)))



def Rental_Services_Management_Process_Details(request,pk,contact):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	record=RentalBookingHeaders.objects.get(id=contact)

	records=RentalBookingSelections.objects.filter(contact=record,booked_date=pk)

	context={
	'booked_date':pk,
	'record':record,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Rental_Services_Management_Process_Details.html',context)

########################################################################
############################ UPLOADING COMMODITY ########################
#########################################################################

def Upload_Commodity_Product_Loan_Transaction_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=TransactionTypes.objects.filter(category='NON-MONETARY')

	context={

	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Load.html',context)


def Upload_Commodity_Product_Loan_Transaction_Categories_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	queryset=Commodity_Loan_Upload_Transaction_Header.objects.filter(status='UNTREATED')
	transaction=TransactionTypes.objects.get(id=pk)

	record_array=[]
	records=Commodity_Categories.objects.filter(transaction=transaction)
	for item in queryset:

		queryset_total=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=item.ticket,status='UNTREATED').count()

		record_array.append((item.member.coop_no,item.member.get_full_name,queryset_total,item.pk))


	context={
	'record_array':record_array,
	'queryset':queryset,
	'transaction':transaction,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Categories_Load.html',context)

def Upload_Commodity_Product_Loan_Delete_Incomplete_Transactions(request,pk,trans_id):
	record=Commodity_Loan_Upload_Transaction_Header.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Transaction_Categories_Load',args=(trans_id,)))


def Commodity_Loan_Upload_Search(request,pk,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	transaction=TransactionTypes.objects.get(id=trans_id)
	category=Commodity_Categories.objects.get(id=pk)

	title="Search Members"
	form = searchForm(request.POST or None)

	return render(request,'deskofficer_templates/Commodity_Loan_Upload_Search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'transaction':transaction,
	'category':category,
	})


def Commodity_Loan_Upload_List_load(request,cat_id,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="LIST OF MEMBERS"
	form = searchForm(request.POST)
	status="ACTIVE"

	transaction=TransactionTypes.objects.get(id=trans_id)
	category=Commodity_Categories.objects.get(id=cat_id)


	if request.method == "POST":
		if request.POST.get("title")=="":
			messages.info(request,"Please Enter a search data")
			return HttpResponseRedirect(reverse('Commodity_Loan_Upload_Search',args=(cat_id,trans_id,)))

		records=Members.objects.filter(Q(file_no__icontains=form['title'].value()) |Q(ippis_no__icontains=form['title'].value()) |Q(phone_number__icontains=form['title'].value()) | Q(admin__first_name__icontains=form['title'].value()) | Q(admin__last_name__icontains=form['title'].value()) | Q(middle_name__icontains=form['title'].value())).filter(status=status)
		if records.count() <= 0:
			messages.info(request,"No Record Found")
			return HttpResponseRedirect(reverse('Commodity_Loan_Upload_Search',args=(cat_id,trans_id,)))


		context={
		'transaction':transaction,
		'category':category,
		'records':records,
		'title':title,
		'task_array':task_array,
		'task_enabler_array':task_enabler_array,
		'default_password':default_password,
		}
		return render(request,'deskofficer_templates/Commodity_Loan_Upload_List_load.html',context)





def Upload_Commodity_Product_Loan_Transaction_Sub_Categories_Load(request,pk,cat_id,trans_id):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transaction=TransactionTypes.objects.get(id=trans_id)
	member=Members.objects.get(id=pk)

	category=Commodity_Categories.objects.get(id=cat_id)
	records=Commodity_Category_Sub.objects.filter(category=category)

	if Commodity_Loan_Upload_Transaction_Header.objects.filter(member=member,status='UNTREATED').exists():

		ticket_record=Commodity_Loan_Upload_Transaction_Header.objects.filter(member=member,status='UNTREATED').first()


		ticket=ticket_record.ticket
	else:
		ticket=get_ticket()

		Commodity_Loan_Upload_Transaction_Header(category=category,ticket=ticket,member=member).save()

	queryset = Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=ticket,status='UNTREATED')

	queryset_sum=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=ticket,status='UNTREATED').aggregate(total_sum=Sum('total_amount'))
	total_amount=queryset_sum['total_sum']

	button_show=False
	if queryset:
		button_show=True

	context={
	'button_show':button_show,
	'total_amount':total_amount,
	'queryset':queryset,
	'ticket':ticket,
	'member':member,
	'transaction':transaction,
	'category':category,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Sub_Categories_Load.html',context)


def Upload_Commodity_Product_Loan_Transaction_Select_Company_Load(request,pk,member_pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=member_pk)
	sub_category=Commodity_Category_Sub.objects.get(id=pk)

	if request.method == 'POST':
		company_id=request.POST.get('company')
		company=Companies.objects.get(id=company_id)

		period_id=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)


		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)


		return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Transaction_Company_Products_Load',args=(member_pk,sub_category.pk,company.pk,period.pk,batch.pk,return_pk)))

	companies = Companies.objects.all()
	periods=Commodity_Period.objects.all()
	batches=Commodity_Period_Batch.objects.all()
	# return HttpResponse(return_pk)
	context={
	'return_pk':return_pk,
	'companies':companies,
	'periods':periods,
	'batches':batches,
	'sub_category':sub_category,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Select_Company_Load.html',context)


def Upload_Commodity_Product_Loan_Transaction_Select_Company_Load_All(request,member_pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=member_pk)
	# sub_category=Commodity_Category_Sub.objects.get(id=pk)

	if request.method == 'POST':
		company_id=request.POST.get('company')
		company=Companies.objects.get(id=company_id)

		period_id=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_id)


		batch_id=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_id)

	
		return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Transaction_Company_Products_Load_All',args=(member_pk,company.pk,period.pk,batch.pk,return_pk)))

	companies = Companies.objects.all()
	periods=Commodity_Period.objects.all()
	batches=Commodity_Period_Batch.objects.all()
	# return HttpResponse(return_pk)
	context={
	'return_pk':return_pk,
	'companies':companies,
	'periods':periods,
	'batches':batches,
	# 'sub_category':sub_category,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Select_Company_Load_All.html',context)



def Upload_Commodity_Product_Loan_Transaction_Company_Products_Load_All(request,member_pk,comp_pk,period_pk,batch_pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=member_pk)
	# sub_category=Commodity_Category_Sub.objects.get(id=sub_cat)


	company = Companies.objects.get(id=comp_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	products=Company_Products.objects.filter(company=company,period=period,batch=batch)

	context={
	'return_pk':return_pk,
	'products':products,
	'company':company,
	'period':period,
	'batch':batch,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Company_Products_Load_All.html',context)


def Upload_Commodity_Product_Loan_Transaction_Company_Products_Load(request,member_pk,sub_cat,comp_pk,period_pk,batch_pk,return_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	member=Members.objects.get(id=member_pk)
	sub_category=Commodity_Category_Sub.objects.get(id=sub_cat)


	company = Companies.objects.get(id=comp_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	products=Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category=sub_category)

	context={
	'return_pk':return_pk,
	'products':products,
	'company':company,
	'period':period,
	'batch':batch,
	'sub_category':sub_category,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Transaction_Company_Products_Load.html',context)


def Upload_Commodity_Product_Loan_Products_Select(request,pk,member_pk,sub_cat,comp_pk,period_pk,batch_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = Upload_Commodity_Product_Loan_Products_Select_Form(request.POST or None)

	product=Company_Products.objects.get(id=pk)
	return_pk=product.product.sub_category.category.transaction.pk
	member=Members.objects.get(id=member_pk)
	sub_category=Commodity_Category_Sub.objects.get(id=sub_cat)
	company = Companies.objects.get(id=comp_pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	ticket=Commodity_Loan_Upload_Transaction_Header.objects.get(member=member,status='UNTREATED')
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if request.method =="POST":
		quantity=request.POST.get('quantity')
		if not quantity or int(quantity)<=0:
			messages.error(request,'Quantity is Missing')
			return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Products_Select',args=(pk,member_pk,sub_cat,comp_pk,period_pk,batch_pk)))

		total_amount=	float(product.coop_amount)* float(quantity)
		company_price=	float(product.amount)* float(quantity)

		if Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket=ticket,product=product).exists():
			selected_record=Commodity_Loan_Upload_Transaction_Details.objects.get(ticket=ticket,product=product)
			selected_record.amount=product.coop_amount
			selected_record.company_price=product.amount
			selected_record.quantity=quantity
			selected_record.total_amount=total_amount
			selected_record.total_company=company_price
			selected_record.processed_by=processed_by
			selected_record.status="UNTREATED"
			selected_record.save()
		else:
			Commodity_Loan_Upload_Transaction_Details(ticket=ticket,
												product=product,
												amount=product.coop_amount,
												quantity=quantity,
												total_amount=total_amount,
												company_price=product.amount,
												total_company=company_price,
												processed_by=processed_by,
												status="UNTREATED"
												).save()
		return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Transaction_Company_Products_Load',args=(member.pk,sub_cat,comp_pk,period_pk,batch_pk,return_pk)))
	form.fields['product'].initial=product.product.product_name
	form.fields['amount'].initial=product.coop_amount
	form.fields['quantity'].initial=1

	context={
	'return_pk':return_pk,
	'product':product,
	'company':company,
	'period':period,
	'form':form,
	'batch':batch,
	'sub_category':sub_category,
	'member':member,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Products_Select.html',context)


def Upload_Commodity_Product_Loan_Products_Select_Delete(request,pk,cat_id, trans_id,member_pk):
	record=Commodity_Loan_Upload_Transaction_Details.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse("Upload_Commodity_Product_Loan_Transaction_Sub_Categories_Load",args=(member_pk,cat_id,trans_id)))



def Upload_Commodity_Product_Loan_Products_Select_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = Upload_Commodity_Product_Loan_Products_Select_Preview_Form(request.POST or None)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	selected_header=Commodity_Loan_Upload_Transaction_Header.objects.get(ticket=pk)
	loan_code=selected_header.category.transaction.code
	transaction=selected_header.category.transaction
	member=Members.objects.get(id=selected_header.member.id)
	my_id=member.coop_no

	records=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=pk)
	queryset_sum=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=pk).aggregate(total_sum=Sum('total_amount'),total_comp=Sum('total_company'))
	total_amount=queryset_sum['total_sum']
	total_company_price=queryset_sum['total_comp']

	duration=selected_header.category.duration
	interest_rate=selected_header.category.interest_rate
	admin_charges=selected_header.category.admin_charges

	interest = math.ceil((float(interest_rate)/100) * float(total_company_price))
	if not admin_charges:
		admin_charges=0

	admin_charge=math.ceil((float(admin_charges)/100) * float(total_amount))
	loan_amount=float(total_amount)+ float(admin_charge)
	repayment=math.ceil(float(loan_amount)/float(duration))

	if request.method=="POST":
		duration_new = request.POST.get('duration')
		if duration_new or int(duration_new)>0:
			duration=request.POST.get('duration')

		start_date_id=request.POST.get('start_date')
		start_date=datetime.datetime.strptime(start_date_id, '%Y-%m-%d')
		stop_date = start_date+ relativedelta(months=int(duration))

		t_period=request.POST.get('balance_date')
		transaction_period=get_current_date(datetime.datetime.strptime(t_period, '%Y-%m-%d'))

		balance = float(request.POST.get('balance'))
		if not balance or float(balance)<=0:
			messages.error(request,'Balance is missing')
			return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Products_Select_Preview',args=(pk,)))

		repayment= request.POST.get('repayment')
		loan_number = generate_number(loan_code,my_id,now)


		selected_header.loan_amount=loan_amount
		selected_header.loan_number=loan_number
		selected_header.balance=balance
		selected_header.repayment=repayment
		selected_header.interest_rate=interest_rate
		selected_header.duration=duration
		selected_header.start_date=start_date
		selected_header.status='TREATED'
		selected_header.ledger_status="PROCESSED"
		selected_header.save()
		interest_deduction="SPREAD"
		amount_paid=float(loan_amount)-float(balance)

		LoansRepaymentBase(member=member,
							transaction=transaction,
							loan_number=loan_number,
							duration=duration,
							interest_deduction=interest_deduction,
							interest_rate=interest_rate,
							interest=interest,
							admin_charge=admin_charge,
							loan_amount=loan_amount,
							repayment=repayment,
							amount_paid=amount_paid,
							balance=-balance,
							start_date=start_date,
							stop_date=stop_date,
							schedule_status="SCHEDULED",
							nok_name="UNKNOWN",
							nok_Relationship="UNKNOWN",
							nok_phone_no="UNKNOWN",
							nok_address="UNKNOWN",
							status="ACTIVE",
							tdate=tdate,
							processed_by=processed_by,
							).save()


		ledger_balance=get_ledger_balance(loan_number)

		new_ledger_balance=float(ledger_balance)+ float(-balance)
		debit=abs(balance)
		credit=0
		particulars=f"Balance Brought Forward as at {transaction_period} {abs(balance)}"

		post_to_ledger(member,
					transaction,
					loan_number,
					particulars,
					debit,
					credit,
					new_ledger_balance,
					transaction_period,
					'ACTIVE',
					tdate,
					processed_by
					)


		Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=pk).update(status='TREATED')
		return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Transaction_Categories_Load',args=(transaction.pk,)))

	transaction_period=date(2022,6,30)
	form.fields['product_cost'].initial=total_amount
	form.fields['balance'].initial=loan_amount
	form.fields['admin_charge'].initial=admin_charge
	form.fields['loan_amount'].initial=loan_amount
	form.fields['repayment'].initial=repayment
	form.fields['duration'].initial=duration
	form.fields['start_date'].initial=get_current_date(now)
	form.fields['balance_date'].initial=get_current_date(transaction_period)
	context={
	'form':form,
	'transaction':transaction,
	'selected_header':selected_header,
	'member':member,
	'total_amount':total_amount,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Products_Select_Preview.html',context)


def Upload_Commodity_Product_Loan_Products_Uploaded(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=Commodity_Loan_Upload_Transaction_Header.objects.filter(status='TREATED')

	# records=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=pk)

	context={

	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Products_Uploaded.html',context)


def Upload_Commodity_Product_Loan_Products_Uploaded_Delete(request,pk):
	record=Commodity_Loan_Upload_Transaction_Header.objects.get(id=pk)
	loan_number=record.loan_number
	PersonalLedger.objects.filter(account_number=loan_number).delete()
	LoansRepaymentBase.objects.filter(loan_number=loan_number).delete()
	record.delete()
	return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Products_Uploaded'))


def Upload_Commodity_Product_Loan_Products_Uploaded_Details(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	record=Commodity_Loan_Upload_Transaction_Header.objects.get(id=pk)
	ticket=record.ticket

	records=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=ticket)

	context={
	'record':record,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Products_Uploaded_Details.html',context)


def Upload_Commodity_Product_Loan_Ledger_Posting(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	record=Commodity_Loan_Upload_Transaction_Header.objects.get(id=pk)
	ticket=record.ticket

	records=Commodity_Loan_Upload_Transaction_Details.objects.filter(ticket__ticket=ticket)
	form=Upload_Commodity_Product_Loan_Ledger_Posting_Form(request.POST or None)
	if request.method=="POST":
		if record.ledger_status=="PROCESSED":
			messages.error(request,"This is already Posted to Ledger")
			return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Products_Uploaded'))

		transaction_date=request.POST.get('balance_date')


		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(transaction_date, date_format)
		transaction_period=get_current_date(dtObj)

		ledger_balance=get_ledger_balance(record.loan_number)

		new_ledger_balance=float(ledger_balance)+ float(-record.balance)
		debit=abs(record.balance)
		credit=0
		particulars=f"Balance Brought Forward as at {transaction_period} {abs(record.balance)}"


		tdate=get_current_date(now)
		processed_by=CustomUser.objects.get(id=request.user.id)
		processed_by.username
		post_to_ledger(record.member,
					record.category.transaction,
					record.loan_number,
					particulars,
					debit,
					credit,
					new_ledger_balance,
					transaction_period,
					'ACTIVE',
					tdate,
					processed_by
					)
		record.ledger_status="PROCESSED"
		record.save()
		messages.success(request,"Record Successfully posted to Ledger")
		return HttpResponseRedirect(reverse('Upload_Commodity_Product_Loan_Products_Uploaded'))

	transaction_period=date(2022,6,30)
	form.fields['loan_amount'].initial=record.loan_amount
	form.fields['balance'].initial=record.balance
	form.fields['loan_number'].initial=record.loan_number
	form.fields['balance_date'].initial=get_current_date(transaction_period)
	context={
	'form':form,
	'record':record,
	'records':records,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Upload_Commodity_Product_Loan_Ledger_Posting.html',context)




###############################################################################
###############################################################################
####################### USERS MANAGER #########################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
def control_panel(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)


	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request, 'deskofficer_templates/control_panel/control_panel.html',context)


def Desk_General_Tasks_Manager(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,

	}
	return render(request,'deskofficer_templates/control_panel/Desk_General_Tasks_Manager.html',context)


def Desk_Executive_Users(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=CustomUser.objects.filter(user_type='2')

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/Desk_Executive_Users.html',context)


def Desk_Executive_Users_Tasks_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	tasks=System_Users_Tasks.objects.filter(usertype__code='2')
	user=CustomUser.objects.get(id=pk)
	records=System_Users_Tasks_Model.objects.filter(user=user).order_by('task__rank')



	if request.method =="POST" and 'btn-all' in request.POST:
		for task in tasks:
			if System_Users_Tasks_Model.objects.filter(task=task,user=user).exists():
				pass
			else:
				System_Users_Tasks_Model(task=task,user=user).save()

		return HttpResponseRedirect(reverse('Desk_Executive_Users_Tasks_Preview',args=(pk,)))

	if request.method =="POST" and 'btn-selected' in request.POST:
		task_id=request.POST.get('task')
		task=System_Users_Tasks.objects.get(id=task_id)

		if System_Users_Tasks_Model.objects.filter(task=task,user=user).exists():
			messages.info(request,'Record already Exist')
			return HttpResponseRedirect(reverse('Desk_Executive_Users_Tasks_Preview',args=(pk,)))

		System_Users_Tasks_Model(task=task,user=user).save()
		return HttpResponseRedirect(reverse('Desk_Executive_Users_Tasks_Preview',args=(pk,)))


	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'user':user,
	}
	return render(request,'deskofficer_templates/control_panel/Desk_Executive_Users_Tasks_Preview.html',context)


def Desk_Executive_Users_Tasks_Remove(request,pk):
    record=System_Users_Tasks_Model.objects.get(id=pk)
    return_pk=record.user_id
    record.delete()
    return HttpResponseRedirect(reverse('Desk_Executive_Users_Tasks_Preview',args=(return_pk,)))


def Desk_Desk_Office_Users(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=CustomUser.objects.filter(user_type='3')

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/Desk_Desk_Office_Users.html',context)


def Desk_Desk_Office_Tasks_Preview(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	tasks=System_Users_Tasks.objects.filter(usertype__code='3')
	user=CustomUser.objects.get(id=pk)
	records=System_Users_Tasks_Model.objects.filter(user=user).order_by('task__rank')

	if request.method =="POST" and 'btn-all' in request.POST:

		for task in tasks:
			if System_Users_Tasks_Model.objects.filter(task=task,user=user).exists():
				pass
			else:
				System_Users_Tasks_Model(task=task,user=user).save()

		return HttpResponseRedirect(reverse('Desk_Desk_Office_Tasks_Preview',args=(pk,)))

	if request.method =="POST" and 'btn-selected' in request.POST:

		task_id=request.POST.get('task')
		task=System_Users_Tasks.objects.get(id=task_id)

		if System_Users_Tasks_Model.objects.filter(task=task,user=user).exists():
			messages.info(request,'Record already Exist')
			return HttpResponseRedirect(reverse('Desk_Desk_Office_Tasks_Preview',args=(pk,)))

		System_Users_Tasks_Model(task=task,user=user).save()
		return HttpResponseRedirect(reverse('Desk_Desk_Office_Tasks_Preview',args=(pk,)))



	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'user':user,
	}
	return render(request,'deskofficer_templates/control_panel/Desk_Desk_Office_Tasks_Preview.html',context)


def Desk_Desk_Office_Tasks_Remove(request,pk):
    record=System_Users_Tasks_Model.objects.get(id=pk)
    return_pk=record.user_id
    record.delete()
    return HttpResponseRedirect(reverse('Desk_Office_Tasks_Preview',args=(return_pk,)))


def Desk_Shop_Users(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records=CustomUser.objects.filter(user_type='4')

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/Desk_Shop_Users.html',context)


def Desk_Shop_Users_Tasks_Preview(request,pk):
    # tasks=System_Users_Tasks.objects.filter(usertype__code='4')
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	user=CustomUser.objects.get(id=pk)
	records=System_Users_Tasks_Model.objects.filter(user=user).order_by('task__rank')



	if request.method =="POST" and 'btn-all' in request.POST:
		for task in tasks:
			if System_Users_Tasks_Model.objects.filter(task=task,user=user).exists():
				pass
			else:
				System_Users_Tasks_Model(task=task,user=user).save()
		return HttpResponseRedirect(reverse('Desk_Shop_Users_Tasks_Preview',args=(pk,)))


	if request.method =="POST" and 'btn-selected' in request.POST:
		task_id=request.POST.get('task')
		task=System_Users_Tasks.objects.get(id=task_id)

		if System_Users_Tasks_Model.objects.filter(task=task,user=user).exists():
			messages.info(request,'Record already Exist')
			return HttpResponseRedirect(reverse('Desk_Shop_Users_Tasks_Preview',args=(pk,)))

		System_Users_Tasks_Model(task=task,user=user).save()
		return HttpResponseRedirect(reverse('Desk_Shop_Users_Tasks_Preview',args=(pk,)))


	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'user':user,
	}
	return render(request,'deskofficer_templates/control_panel/Desk_Shop_Users_Tasks_Preview.html',context)


def Desk_Shop_Users_Tasks_Remove(request,pk):
	record=System_Users_Tasks_Model.objects.get(id=pk)
	return_pk=record.user_id
	record.delete()
	return HttpResponseRedirect(reverse('Desk_Shop_Users_Tasks_Preview',args=(return_pk,)))


def desk_trending_commodity_signatories(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"




	records = Treanding_Commodity_Signatory.objects.all()
	form = trending_commodity_signatories_form(request.POST or None )
	if request.method == 'POST':
		name = request.POST.get('name')
		designation = request.POST.get('designation')
		phone_no = request.POST.get('phone_no')

		if not name:
			messages.error(request, "Name is missing")
			return HttpResponseRedirect(reverse('desk_trending_commodity_signatories'))
		if not designation:
			messages.error(request, "Designation is missing")
			return HttpResponseRedirect(reverse('desk_trending_commodity_signatories'))
		if not phone_no:
			messages.error(request, "Phone Number is missing")
			return HttpResponseRedirect(reverse('desk_trending_commodity_signatories'))


		Treanding_Commodity_Signatory(name=name.upper(),designation=designation.upper(),phone_no=phone_no).save()
		return HttpResponseRedirect(reverse('desk_trending_commodity_signatories'))

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'records':records,
	}
	return render(request, 'deskofficer_templates/control_panel/desk_trending_commodity_signatories.html',context)


def desk_trending_commodity_signatories_delete(request,pk):
    Treanding_Commodity_Signatory.objects.filter(id=pk).delete()
    return HttpResponseRedirect(reverse('desk_trending_commodity_signatories'))


def desk_addCompanies(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	items= Companies.objects.all()
	title="Add Companies"
	form = addCompaniesForm(request.POST or None)
	if request.method ==  "POST":
		form = addCompaniesForm(request.POST)
		if form.is_valid():
			title=form.cleaned_data["title"]
			record = Companies(title=title.upper())
			record.save()
			messages.success(request,"Record Added Successfully")
			return  HttpResponseRedirect(reverse('desk_addCompanies'))
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'items':items,
	'url':'desk_addCompanies',
	'button_text':"Add Company",
	'title':title,
	}
	return render(request,'deskofficer_templates/control_panel/desk_add_single_item.html', context)

def desk_Manage_Companies(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	companies=Companies.objects.all()
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'companies':companies,
	}
	return render(request,'deskofficer_templates/control_panel/desk_manage_companies.html', context)



def desk_Manage_Companies_update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"




	form = addCompaniesForm(request.POST or None)
	company=Companies.objects.get(id=pk)

	form.fields['title'].initial=company.title

	if request.method == "POST":
		title=request.POST.get('title')
		company.title=title.upper()
		company.save()
		return HttpResponseRedirect(reverse('desk_Manage_Companies'))
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'company':company,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Companies_update.html', context)


def desk_Delete_Companies(request,pk):
	record=Companies.objects.get(id=pk)
	record.delete()
	return HttpResponseRedirect(reverse('desk_Manage_Companies'))



def desk_addCommodityCategory(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Add Commodity Category"
	items= Commodity_Categories.objects.all()
	form = addCommodityCategoryForm(request.POST or None)

	if request.method ==  "POST":

		title=request.POST.get("title")
		transaction_id=request.POST.get('transactions')
		transaction=TransactionTypes.objects.get(id=transaction_id)
		if Commodity_Categories.objects.filter(title=title).exists():
			messages.error(request,'Record with this name already exist')
			return  HttpResponseRedirect(reverse('desk_addCommodityCategory'))
		record = Commodity_Categories(transaction=transaction,title=title,receipt_type="NONE",status="ACTIVE",multiple_loan_status='NOT ALLOWED',form_print="NO")
		record.save()
		messages.success(request,"Record Added Successfully")
		return  HttpResponseRedirect(reverse('desk_addCommodityCategory'))

	records=Commodity_Categories.objects.all()
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'records':records,
	'items':items,
	'url':'addCommodityCategory',
	'button_text':"Add Record",
	'title':title,
	}
	return render(request,'deskofficer_templates/control_panel/desk_addCommodityCategory.html', context)


def desk_Manage_Commodity_Categories_Delete(request,pk):
    record=Commodity_Categories.objects.get(id=pk)
    record.delete()
    messages.success(request,'Record Deleted Successfully')
    return  HttpResponseRedirect(reverse('desk_addCommodityCategory'))


def desk_addCommodityCategorySub(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Add Commodity Sub Categories"
	category= Commodity_Categories.objects.get(id=pk)
	records= Commodity_Category_Sub.objects.filter(category=category)
	form = addCommodityCategoryForm(request.POST or None)

	if request.method ==  "POST":

		title=request.POST.get("title")

		if Commodity_Category_Sub.objects.filter(title=title).exists():
			messages.error(request,'Record with this name already exist')
			return  HttpResponseRedirect(reverse('desk_addCommodityCategorySub',args=(pk,)))
		record = Commodity_Category_Sub(category=category,title=title.upper())
		record.save()
		messages.success(request,"Record Added Successfully")
		return  HttpResponseRedirect(reverse('desk_addCommodityCategorySub',args=(pk,)))


	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'records':records,
	'category':category,
	'url':'addCommodityCategorySub',
	'button_text':"Add Record",
	'title':title,
	}
	return render(request,'deskofficer_templates/control_panel/desk_addCommodityCategorySub.html', context)



def desk_Manage_Commodity_Sub_Categories_Delete(request,pk):
	record=Commodity_Category_Sub.objects.get(id=pk)
	return_pk = record.category.pk
	record.delete()
	messages.success(request,'Record Deleted Successfully')
	return  HttpResponseRedirect(reverse('desk_addCommodityCategorySub',args=(return_pk,)))

def desk_Manage_Commodity_Categories_Title_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	record=Commodity_Categories.objects.get(id=pk)
	form = Manage_Commodity_Categories_Title_Update_form(request.POST or None)

	if request.method == 'POST':
		title = request.POST.get('title')
		record.title=title
		record.save()
		return HttpResponseRedirect(reverse('desk_addCommodityCategory'))

	form.fields['title'].initial= record.title
	context={
	# 'task_array':task_array,'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'record':record,
	'form':form,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Title_Update.html',context)




def desk_Manage_Commodity_Categories_Core_properties_Transactions_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	records =TransactionTypes.objects.filter(category='NON-MONETARY')
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Core_properties_Transactions_Load.html',context)



def desk_Manage_Commodity_Categories_Core_Values(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"




	transaction =TransactionTypes.objects.get(id=pk)
	records=Commodity_Categories.objects.filter(transaction=transaction)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Core_Values.html', context)






def desk_Manage_Commodity_Categories_Core_properties(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	interest_rate_form = Manage_Commodity_Categories_Optional_properties_Form(request.POST or None)
	admin_charges_form = Manage_Commodity_Categories_Optional_properties_Form(request.POST or None)
	guarantor_form = Manage_Commodity_Categories_Optional_properties_Form(request.POST or None)

	record=Commodity_Categories.objects.get(id=pk)
	if request.method == 'POST' and 'btn-interest' in request.POST:
		interest_rate_required = request.POST.get('interest_rate_required')
		record.interest_rate_required=interest_rate_required
		record.interest_rate=0
		record.save()
		return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Core_properties',args=(pk,)))

	if request.method == 'POST' and 'btn-admin' in request.POST:
		admin_charges_required = request.POST.get('admin_charges_required')
		record.admin_charges_required=admin_charges_required
		record.admin_charges=0
		record.save()
		return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Core_properties',args=(pk,)))

	if request.method == 'POST' and 'btn-guarantor' in request.POST:
		guarantor_required = request.POST.get('guarantor_required')
		record.guarantor_required=guarantor_required
		record.guarantors=0
		record.save()

		return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Core_properties',args=(pk,)))

	interest_rate_form.fields['interest_rate_required'].initial=record.interest_rate_required
	admin_charges_form.fields['admin_charges_required'].initial=record.admin_charges_required
	guarantor_form.fields['guarantor_required'].initial=record.guarantor_required
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'interest_rate_form':interest_rate_form,
	'admin_charges_form':admin_charges_form,
	'guarantor_form':guarantor_form,
	'record':record,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Optional_properties.html', context)


def desk_Manage_Commodity_Categories_Peripherals_Transactions_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records =TransactionTypes.objects.filter(category='NON-MONETARY')
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Peripherals_Transactions_Load.html',context)


def desk_Manage_Commodity_Categories_Peripherals(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	transaction =TransactionTypes.objects.get(id=pk)
	records=Commodity_Categories.objects.filter(transaction=transaction)


	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Peripherals.html', context)



def desk_Manage_Commodity_Categories_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	form = addCommodityCategoryForm(request.POST or None)
	record=Commodity_Categories.objects.get(id=pk)

	if request.method == 'POST':

		title = request.POST.get('title')
		if record.interest_rate_required == '1':
			interest_deduction_id = request.POST.get('interest_deductions')

			interest_rate = request.POST.get('interest_rate')

			if interest_rate <= "0":
				messages.error(request,'Interest Rate is Missing')
				return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Update',args=(pk,)))

		if record.admin_charges_required == '1':
			admin_charges_rating = request.POST.get('admin_charges_rating')


			admin_charges = request.POST.get('admin_charges')
			if admin_charges <= "0":
				messages.error(request,'Admin Charge is Missing')
				return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Update',args=(pk,)))


		if record.guarantor_required == '1':
			guarantors = request.POST.get('guarantors')

			if guarantors <= "0":
				messages.error(request,'Guarantor is Missing')
				return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Update',args=(pk,)))

		loan_age = request.POST.get('loan_age')
		if loan_age <= "0":
			messages.error(request,'Loan Age is Missing')
			return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Update',args=(pk,)))


		duration = request.POST.get('duration')
		if duration <= "0":
			messages.error(request,'Duration is Missing')
			return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Update',args=(pk,)))



		receipt_type = request.POST.get('receipt_type')


		if record.interest_rate_required == '1':
			record.interest_rate=interest_rate

		if record.admin_charges_required == '1':
			record.admin_charges_rating=admin_charges_rating
			record.admin_charges=admin_charges


		if record.guarantor_required == '1':
			record.guarantors=guarantors

		record.title=title
		record.duration=duration
		record.loan_age=loan_age
		record.receipt_type=receipt_type
		record.save()


		return HttpResponseRedirect(reverse('desk_Manage_Commodity_Categories_Peripherals',args=(record.transaction_id,)))
	form.fields['title'].initial=record.title

	form.fields['interest_rate'].initial=record.interest_rate
	form.fields['duration'].initial=record.duration
	form.fields['loan_age'].initial=record.loan_age
	form.fields['guarantors'].initial=record.guarantors
	form.fields['receipt_type'].initial=record.receipt_type
	form.fields['admin_charges_rating'].initial=record.admin_charges_rating
	form.fields['admin_charges'].initial=record.admin_charges

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'record':record,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Commodity_Categories_Update.html', context)


def desk_Commodity_Products_Add_Transactions_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records =TransactionTypes.objects.filter(category='NON-MONETARY')
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Add_Transactions_Load.html',context)



def desk_Commodity_Products_Add_Transactions_Categories_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records =Commodity_Categories.objects.filter(transaction_id=pk)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Add_Transactions_Categories_Load.html',context)


def desk_Commodity_Products_Add_Transactions_Sub_Categories_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	category =Commodity_Categories.objects.get(id=pk)
	records= Commodity_Category_Sub.objects.filter(category=category)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'category':category,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Add_Transactions_Sub_Categories_Load.html',context)



def desk_Commodity_Products_add(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	form = Commodity_Products_add_Form(request.POST or None)
	sub_category =Commodity_Category_Sub.objects.get(id=pk)
	records=Commodity_Product_List.objects.filter(sub_category=sub_category)

	if request.method=="POST":
		no_in_pack = request.POST.get('no_in_pack')
		if not no_in_pack or int(no_in_pack)==0:
			no_in_pack=1

		product_name = request.POST.get('product_name').upper()
		product_model = request.POST.get('product_model').upper()
		details = request.POST.get('details').upper()
		if Commodity_Product_List.objects.filter(product_name=product_name).exists():

			Commodity_Product_List.objects.filter(product_name=product_name).update(sub_category=sub_category,
                                                                        product_name=product_name.strip(),
                                                                                    product_model=product_model.strip(),
                                                                                    details=details.strip(),
                                                                                    status="ACTIVE",category=0,no_in_pack=no_in_pack)
			messages.success(request,'Record Updated Successfully')
		else:
			queryset=Commodity_Product_List(sub_category=sub_category,product_name=product_name.strip(),product_model=product_model.strip(),details=details.strip(),no_in_pack=no_in_pack,status="ACTIVE")
			messages.success(request,'Record Submitted Successfully')
			queryset.save()


		return HttpResponseRedirect(reverse('desk_Commodity_Products_add',args=(pk,)))
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'sub_category':sub_category,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_add.html',context)


def desk_Commodity_Products_add_Delete(request,pk,return_pk):
	record=Commodity_Product_List.objects.get(id=pk)
	record.delete()

	return HttpResponseRedirect(reverse('desk_Commodity_Products_add',args=(return_pk,)))



def desk_Commodity_Products_add_Update_Category(request,pk,return_pk):
	queryset=Commodity_Product_List.objects.get(id=pk)
	if queryset.status =="ACTIVE":
		Commodity_Product_List.objects.filter(id=pk).update(status='INACTIVE')
	else:
		Commodity_Product_List.objects.filter(id=pk).update(status='ACTIVE')

	return HttpResponseRedirect(reverse('desk_Commodity_Products_add',args=(return_pk,)))


def desk_Commodity_Products_Manage_Transactions_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	records =TransactionTypes.objects.filter(category='NON-MONETARY')
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Manage_Transactions_Load.html',context)


def desk_Commodity_Products_Manage_Category_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	transaction =TransactionTypes.objects.get(id=pk)
	categories = Commodity_Categories.objects.filter(transaction=transaction)
	# records=Commodity_Product_List.objects.filter(category__transaction=transaction)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'categories':categories,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Manage_Category_Load.html',context)


def desk_Commodity_Products_Manage_Sub_Category_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	category = Commodity_Categories.objects.get(id=pk)
	records=Commodity_Category_Sub.objects.filter(category=category)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'category':category,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Manage_Sub_Category_Load.html',context)




def desk_Commodity_Products_Manage_Load(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	sub_category =Commodity_Category_Sub.objects.get(id=pk)

	records=Commodity_Product_List.objects.filter(sub_category=sub_category).order_by('product_name')

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'sub_category':sub_category,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Manage_Load.html',context)


def desk_Commodity_Products_Manage_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form = Commodity_Products_Update_Form(request.POST or None)
	record=Commodity_Product_List.objects.get(id=pk)


	if request.method == 'POST':
		product_name=request.POST.get('product_name')
		product_model=request.POST.get('product_model')
		details=request.POST.get('details')
		no_in_pack=request.POST.get('no_in_pack')
		status = request.POST.get('status')


		record.product_name=product_name.upper()
		record.product_model=product_model.upper()
		record.details=details.upper()
		record.no_in_pack=no_in_pack
		record.status=status
		record.save()
		messages.success(request,'Record Updated Successfully')
		return HttpResponseRedirect(reverse('desk_Commodity_Products_Manage_Load',args=(record.sub_category_id,)))

	form.fields['product_name'].initial = record.product_name
	form.fields['product_model'].initial = record.product_model
	form.fields['details'].initial = record.details
	form.fields['no_in_pack'].initial = record.no_in_pack
	form.fields['status'].initial = record.status

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'record':record,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Commodity_Products_Manage_Update.html',context)


def desk_Commodity_Products_Manage_Remove(request,pk):

	record=Commodity_Product_List.objects.get(id=pk)

	if Members_Commodity_Loan_Products_Selection.objects.filter(product__product=record).exists():
		messages.error(request,'Record Already in Use')
		return HttpResponseRedirect(reverse('desk_Commodity_Products_Manage_Load',args=(record.category.transaction_id,)))
	record.delete()
	messages.success(request,'Record Deleted Successfully')
	return HttpResponseRedirect(reverse('desk_Commodity_Products_Manage_Load',args=(record.sub_category_id,)))



def desk_Product_Linking_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	if request.method == "POST":
		period_obj=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_obj)

		batch_obj=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_obj)

		transaction_obj=request.POST.get('transaction')
		transaction=TransactionTypes.objects.get(id=transaction_obj)

		return HttpResponseRedirect(reverse('desk_Product_Linking_Company_Load',args=(period_obj, batch_obj,transaction_obj)))
	form=Product_Linking_Period_Load_form(request.POST or None)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	# 'period':period,
	# 'batch':batch,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Period_Load.html',context)


def desk_Product_Linking_Company_Load(request,period_obj,batch_obj,transaction_obj):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	companies=Companies.objects.all()

	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'companies':companies,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Company_Load.html',context)



def desk_Product_Linking_Category_Load(request,period_obj,batch_obj,transaction_obj,company_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)

	categories=Commodity_Categories.objects.filter(transaction=transaction)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'categories':categories,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Category_Load.html',context)



def desk_Product_Linking_Sub_Category_Load(request,period_obj,batch_obj,transaction_obj,company_pk,cat_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)
	category=Commodity_Categories.objects.get(pk=cat_pk)

	sub_categories = Commodity_Category_Sub.objects.filter(category=category)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'category':category,
	'sub_categories':sub_categories,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Sub_Category_Load.html',context)

def desk_Product_Linking_Sub_Category_Load_All(request,period_obj,batch_obj,transaction_obj,company_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)

	records=Commodity_Product_List.objects.filter(status='ACTIVE')
	linked_records = Company_Products.objects.filter(company=company,period=period,batch=batch).order_by('product__product_name')


	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'records':records,
	'linked_records':linked_records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Sub_Category_Load_All.html',context)


def desk_Product_Linking_Details_Preview_All(request,comp_pk,pk,period_pk,batch_pk,transaction_pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	form=Product_Linking_Details_Preview_form(request.POST or None)

	company=Companies.objects.get(id=comp_pk)
	product=Commodity_Product_List.objects.get(id=pk)


	coop_price_enabled=False
	if product.sub_category.category.interest_rate_required != '1':
		coop_price_enabled=True

	if request.method == "POST":

		period=Commodity_Period.objects.get(id=period_pk)
		batch=Commodity_Period_Batch.objects.get(id=batch_pk)

		amount=request.POST.get('amount')


		coop_amount=0
		if product.sub_category.category.interest_rate_required != '1':
			coop_amount=request.POST.get('coop_amount')

		if not coop_amount:
			messages.error(request,'Company Price Missing')
			return HttpResponseRedirect(reverse('desk_Product_Linking_Details_Preview_All',args=(comp_pk,pk,period_pk,batch_pk,transaction_pk,)))

		else:
			coop_amount=float(amount) + (float(product.sub_category.category.interest_rate)/100)*float(amount)


		if not amount:
			messages.error(request,'Company Price Missing')
			return HttpResponseRedirect(reverse('desk_Product_Linking_Details_Preview_All',args=(comp_pk,pk,period_pk,batch_pk,transaction_pk,)))

		if Company_Products.objects.filter(company=company,product=product,period=period,batch=batch).exists():
			Company_Products.objects.filter(company=company,product=product,period=period,batch=batch).update(amount=amount,coop_amount=coop_amount,processed_by=processed_by)
		else:
			Company_Products(company=company,product=product,period=period,batch=batch,amount=amount,coop_amount=coop_amount,status='ACTIVE',processed_by=processed_by).save()

		return HttpResponseRedirect(reverse('desk_Product_Linking_Sub_Category_Load_All',args=(period_pk,batch_pk,transaction_pk,comp_pk,)))

	form.fields['product_name'].initial=product.product_name
	form.fields['product_model'].initial=product.product_model
	form.fields['details'].initial=product.details
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'form':form,
	'product':product,
	'period_pk':period_pk,
	'batch_pk':batch_pk,
	'transaction_pk':transaction_pk,
	'comp_pk':comp_pk,
	'coop_price_enabled':coop_price_enabled,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Details_Preview_All.html',context)


def desk_Product_Linking_Available_Product_Load_All(request,period_obj,batch_obj,transaction_obj,company_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)

	linked_records = Company_Products.objects.filter(company=company,period=period,batch=batch).order_by('product__product_name')

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,

	'linked_records':linked_records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Available_Product_Load_All.html',context)



def desk_Product_Linking_Details(request,pk,period_pk,batch_pk,transaction_pk,company_pk,cat_pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)
	transaction=TransactionTypes.objects.get(id=transaction_pk)
	category=Commodity_Categories.objects.get(pk=cat_pk)

	company=Companies.objects.get(id=company_pk)

	sub_cat =Commodity_Category_Sub.objects.get(id=pk)

	records=Commodity_Product_List.objects.filter(sub_category=sub_cat,status='ACTIVE')
	linked_records = Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category=sub_cat).order_by('product__product_name')

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'records':records,
	'linked_records':linked_records,
	'period':period,
	'batch':batch,
	'sub_cat':sub_cat,
	'category':category,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Details.html',context)


def desk_Product_Linking_Details_Preview(request,comp_pk,pk,period_pk,batch_pk,transaction_pk,cat_pk,sub_cat):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	form=Product_Linking_Details_Preview_form(request.POST or None)

	company=Companies.objects.get(id=comp_pk)
	product=Commodity_Product_List.objects.get(id=pk)
	period=Commodity_Period.objects.get(id=period_pk)
	batch=Commodity_Period_Batch.objects.get(id=batch_pk)

	selected_item=[]
	if Company_Products.objects.filter(period=period,batch=batch,product=product).exists():
		selected_item=Company_Products.objects.get(period=period,batch=batch,product=product)
	
	coop_price_enabled=False
	if product.sub_category.category.interest_rate_required != '1':
		coop_price_enabled=True

	if request.method == "POST":	

		amount=request.POST.get('amount')

		interest=0
		coop_amount=0
		if product.sub_category.category.interest_rate_required != '1':
			coop_amount=request.POST.get('coop_amount')

			if not coop_amount or float(coop_amount)<=0:
				messages.error(request,'Cooperative Price Missing')
				return HttpResponseRedirect(reverse('desk_Product_Linking_Details_Preview',args=(comp_pk,pk,period_pk,batch_pk,transaction_pk,cat_pk,sub_cat,)))

		else:
			if not product.sub_category.category.interest_rate or float(product.sub_category.category.interest_rate)<=0:
				messages.error(request,'Interest Rate is Missing')
				return HttpResponseRedirect(reverse('desk_Product_Linking_Details_Preview',args=(comp_pk,pk,period_pk,batch_pk,transaction_pk,cat_pk,sub_cat,)))

			interest=math.ceil((float(product.sub_category.category.interest_rate)/100)*float(amount))
			coop_amount=float(amount) + float(interest)


		if not amount or float(amount)<=0:
			messages.error(request,'Company Price Missing')
			return HttpResponseRedirect(reverse('desk_Product_Linking_Details_Preview',args=(comp_pk,pk,period_pk,batch_pk,transaction_pk,cat_pk,sub_cat,)))

		if Company_Products.objects.filter(company=company,product=product,period=period,batch=batch).exists():
			Company_Products.objects.filter(company=company,product=product,period=period,batch=batch).update(amount=amount,coop_amount=coop_amount,interest=interest,processed_by=processed_by)
		else:
			Company_Products(company=company,product=product,period=period,batch=batch,amount=amount,coop_amount=coop_amount,interest=interest,status='ACTIVE',processed_by=processed_by).save()

		return HttpResponseRedirect(reverse('desk_Product_Linking_Details',args=(sub_cat,period_pk,batch_pk,transaction_pk,comp_pk,cat_pk,)))

	form.fields['product_name'].initial=product.product_name
	form.fields['product_model'].initial=product.product_model
	form.fields['details'].initial=product.details
	if selected_item:
		form.fields['amount'].initial=selected_item.amount
		form.fields['coop_amount'].initial=selected_item.coop_amount
	else:
		form.fields['amount'].initial=0
		form.fields['coop_amount'].initial=0

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'form':form,
	'product':product,
	'coop_price_enabled':coop_price_enabled,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Linking_Details_Preview.html',context)



def desk_Product_UnLinking_Process(request,comp_pk,pk,period_pk, batch_pk, transaction_pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	product=Company_Products.objects.get(id=pk)
	sub_cat=product.product.sub_category.pk
	company_pk=product.company.pk
	cat_pk=product.product.sub_category.category.pk
	product.delete()

	messages.success(request,"Record Deleted Successfully")
	return  HttpResponseRedirect(reverse('desk_Product_Linking_Details',args=(sub_cat,period_pk,batch_pk,transaction_pk,company_pk,cat_pk)))


def desk_Product_UnLinking_Process1(request,comp_pk,pk,period_pk, batch_pk, transaction_pk):

	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	product=Company_Products.objects.get(id=pk)
	sub_cat=product.product.sub_category.pk
	company_pk=product.company.pk
	cat_pk=product.product.sub_category.category.pk
	product.delete()

	messages.success(request,"Record Deleted Successfully")
	return  HttpResponseRedirect(reverse('desk_Product_Linking_Available_Product_Load_All',args=(period_pk,batch_pk,transaction_pk,company_pk,)))


def desk_Product_Settings_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	if request.method == "POST":
		period_obj=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_obj)

		batch_obj=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_obj)

		transaction_obj=request.POST.get('transaction')
		transaction=TransactionTypes.objects.get(id=transaction_obj)

		return HttpResponseRedirect(reverse('desk_Product_Price_Settings_Company_Load',args=(period_obj, batch_obj,transaction_obj)))
	form=Product_Linking_Period_Load_form(request.POST or None)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	# 'period':period,
	# 'batch':batch,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Settings_Period_Load.html',context)



def desk_Product_Price_Settings_Company_Load(request,period_obj,batch_obj,transaction_obj):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	companies=Companies.objects.all()
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'companies':companies,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Price_Settings_Company_Load.html',context)




def desk_Product_Price_Settings_Category_Load(request,period_obj,batch_obj,transaction_obj,company_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)
	categories=Commodity_Categories.objects.filter(transaction=transaction)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'categories':categories,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Price_Settings_Category_Load.html',context)



def desk_Product_Price_Settings_Sub_Category_Load(request,period_obj,batch_obj,transaction_obj,company_pk,cat_pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)
	category=Commodity_Categories.objects.get(id=cat_pk)

	sub_categories = Commodity_Category_Sub.objects.filter(category=category)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'category':category,
	'sub_categories':sub_categories,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Price_Settings_Sub_Category_Load.html',context)




def desk_Product_Price_Settings_details(request,period_obj,batch_obj,transaction_obj,company_pk,cat_pk,sub_cat):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"



	company=Companies.objects.get(id=company_pk)
	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)
	category=Commodity_Categories.objects.get(id=cat_pk)
	sub_category = Commodity_Category_Sub.objects.get(id=sub_cat)


	records=Company_Products.objects.filter(company=company,period=period,batch=batch,product__sub_category__category__transaction=transaction,product__sub_category=sub_category)

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'records':records,
	'company':company,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'category':category,
	'sub_category':sub_category,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Price_Settings_details.html',context)




def desk_Product_Price_Settings_Update(request,comp_pk,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	form=Commodity_Products_Price_Update_Form(request.POST or None)
	company=Companies.objects.get(id=comp_pk)
	record=Company_Products.objects.get(id=pk)

	
	coop_price_enabled=False
	if record.product.sub_category.category.interest_rate_required != '1':
		coop_price_enabled=True



	if request.method == 'POST':
		unit_cost_price=request.POST.get('unit_cost_price')
		coop_price=0
		if coop_price_enabled:
			coop_price=request.POST.get('coop_price')
			interest=0
		else:
			if not record.product.sub_category.category.interest_rate or float(record.product.sub_category.category.interest_rate)<=0:
				messages.error(request,'Interest Rate Missing from setup')
				return HttpResponseRedirect(reverse('desk_Product_Price_Settings_Update',args=(comp_pk,pk,)))
			interest=math.ceil((float(record.product.sub_category.category.interest_rate)/100)*float(unit_cost_price))
			coop_price=float(unit_cost_price) + float(interest)


		status=request.POST.get('status')
		record.amount=unit_cost_price
		record.coop_amount=coop_price
		record.interest=interest
		record.processed_by=processed_by
		record.status=status
		record.save()
		return HttpResponseRedirect(reverse('desk_Product_Price_Settings_details',args=(record.period_id,record.batch_id,record.product.sub_category.category.transaction_id,
	                                                                   comp_pk,record.product.sub_category.category_id,record.product.sub_category_id, )))


	form.fields['product_name'].initial=record.product.product_name
	form.fields['product_model'].initial=record.product.product_model
	form.fields['details'].initial=record.product.details
	form.fields['unit_cost_price'].initial=record.amount
	form.fields['coop_price'].initial=record.coop_amount
	form.fields['status'].initial=record.status

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'record':record,
	'company':company,
	'form':form,
	'coop_price_enabled':coop_price_enabled,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Price_Settings_Update.html',context)


def desk_CooperativeBankAccounts_add(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=CooperativeBankAccounts_form(request.POST or None)
	banks=CooperativeBankAccounts.objects.all()
	if request.method == 'POST':
		bank_id=request.POST.get('bank')
		bank=Banks.objects.get(id=bank_id)

		account_type=request.POST.get('account_type')

		account_name=request.POST.get('account_name')
		account_number=request.POST.get('account_number')
		sort_code=request.POST.get('sort_code')

		if CooperativeBankAccounts.objects.filter(bank=bank,account_number=account_number).exists():
			messages.error(request,'This account Number is already in Use')
			return HttpResponseRedirect(reverse('desk_CooperativeBankAccounts_add'))

		record=CooperativeBankAccounts(bank=bank,account_type=account_type,account_name=account_name,account_number=account_number,sort_code=sort_code)
		record.save()

		messages.success(request,"Record Added Successfully")
		return HttpResponseRedirect(reverse('desk_CooperativeBankAccounts_add'))

	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'banks':banks,
	}
	return render(request,'deskofficer_templates/control_panel/desk_CooperativeBankAccounts_add.html',context)


def desk_CooperativeBankAccounts_Remove(request,pk):
    record=CooperativeBankAccounts.objects.get(id=pk)
    record.delete()
    return HttpResponseRedirect(reverse('desk_CooperativeBankAccounts_add'))


def desk_CooperativeBankAccounts_Update(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	form=CooperativeBankAccounts_form(request.POST or None)
	record=CooperativeBankAccounts.objects.get(id=pk)

	form.fields['account_name'].initial=record.account_name
	form.fields['account_number'].initial=record.account_number
	form.fields['bank'].initial=record.bank.id
	form.fields['account_type'].initial=record.account_type
	form.fields['sort_code'].initial=record.sort_code
	if request.method=="POST":
		bank_id=request.POST.get('bank')
		bank=Banks.objects.get(id=bank_id)

		account_type= request.POST.get('account_type')


		account_name=request.POST.get('account_name')
		account_number=request.POST.get('account_number')
		sort_code=request.POST.get('sort_code')

		record.bank=bank
		record.account_type=account_type
		record.account_name=account_name
		record.account_number=account_number
		record.sort_code=sort_code
		record.save()
		return HttpResponseRedirect(reverse('desk_CooperativeBankAccounts_add'))
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/control_panel/desk_CooperativeBankAccounts_Update.html',context)



def desk_Product_Duration_Settings_Period_Load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	if request.method == "POST":
		period_obj=request.POST.get('period')
		period=Commodity_Period.objects.get(id=period_obj)

		batch_obj=request.POST.get('batch')
		batch=Commodity_Period_Batch.objects.get(id=batch_obj)

		transaction_obj=request.POST.get('transaction')
		transaction=TransactionTypes.objects.get(id=transaction_obj)

		return HttpResponseRedirect(reverse('desk_Product_Duration_Settings_Service_Load',args=(period_obj, batch_obj,transaction_obj)))
	form=Product_Linking_Period_Load_form(request.POST or None)
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	# 'period':period,
	# 'batch':batch,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Duration_Settings_Period_Load.html',context)


def desk_Product_Duration_Settings_Service_Load(request,period_obj,batch_obj,transaction_obj):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	period=Commodity_Period.objects.get(id=period_obj)
	batch=Commodity_Period_Batch.objects.get(id=batch_obj)
	transaction=TransactionTypes.objects.get(id=transaction_obj)

	if request.method == 'POST':
		trans_package_id=request.POST.get('transaction')

		trans_package=Commodity_Categories.objects.get(id=trans_package_id)
		duration=trans_package.duration

		start_date_id=request.POST.get("start_date")
		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(start_date_id, date_format)
		start_date=get_current_date(dtObj)


		stop_date = start_date+ relativedelta(months=int(duration))


		if  Company_Products_Duration.objects.filter(product=trans_package,period=period,batch=batch).exists():
			messages.error(request,'Record Already Exist')
			return HttpResponseRedirect(reverse('desk_Product_Duration_Settings_Service_Load',args=(period_obj,batch_obj,transaction_obj)))


		Company_Products_Duration(product=trans_package,period=period,batch=batch,start_date=start_date,stop_date=stop_date).save()
		messages.success(request,'Record Added Successfully')
		return HttpResponseRedirect(reverse('desk_Product_Duration_Settings_Service_Load',args=(period_obj,batch_obj,transaction_obj)))


	form=Cash_Deposit_Report_Date_Load_form(request.POST or None)
	records=Commodity_Categories.objects.filter(transaction=transaction).order_by('id').values_list('id','title').distinct()

	durations=Company_Products_Duration.objects.filter(period=period,batch=batch)

	form.fields['start_date'].initial=now
	form.fields['stop_date'].initial=now
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'durations':durations,
	'period':period,
	'batch':batch,
	'transaction':transaction,
	'form':form,
	'records':records,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Product_Duration_Settings_Service_Load.html',context)


def desk_Product_Duration_Settings_Service_Delete(request,pk,period_obj,batch_obj,transaction_obj):
	Company_Products_Duration.objects.get(id=pk).delete()
	messages.success(request,'Record Deleted Successfully')
	return HttpResponseRedirect(reverse('desk_Product_Duration_Settings_Service_Load',args=(period_obj,batch_obj,transaction_obj)))

def desk_addTitles(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES" 



	title="Add Titles"
	items= Titles.objects.all()
	form = addTitlesForm(request.POST or None)
	if request.method ==  "POST":
		form = addTitlesForm(request.POST)
		if form.is_valid():
			title=form.cleaned_data["title"]
			record = Titles(title=title)
			record.save()
			messages.success(request,"Record Added Successfully")
		return	HttpResponseRedirect(reverse('desk_addTitles'))
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'items':items,
	'url':'desk_addTitles',
	'button_text':"Add Record",
	'title':title,
	}
	return render(request,'deskofficer_templates/control_panel/desk_add_single_item.html', context)


def desk_Manage_Titles(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES" 


	title="Manage Titles"
	items= Titles.objects.all()


	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'items':items,
	'title':title,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Titles.html', context)


def desk_Manage_Titles_Processing(request,pk):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES" 


	form=Manage_Departments_Processing_form(request.POST or None)
	title="Manage Titles"
	item= Titles.objects.get(id=pk)

	if request.method == 'POST':
		title=request.POST.get('title')

		item.title=title
		item.save()
		return HttpResponseRedirect(reverse('desk_Manage_Titles'))
	form.fields['title'].initial=item.title
	context={
	# 'tasks':tasks,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	'item':item,
	'title':title,
	}
	return render(request,'deskofficer_templates/control_panel/desk_Manage_Titles_Processing.html', context)


def desk_Manage_Titles_Delete(request,pk):
	title= Titles.objects.get(id=pk)
	if Members.objects.filter(title=title).exists():
		messages.error(request, f"{title.title} is already in Use ")
		return HttpResponseRedirect(reverse('desk_Manage_Titles'))
	title.delete()
	return HttpResponseRedirect(reverse('desk_Manage_Titles'))

	

def Event_Manager_DashBoard(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES" 

	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Event_Manager_DashBoard.html', context)

def Event_Program_Register(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)

	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES" 

	form=Event_Program_Register_form(request.POST or None)
	tdate=get_current_date(now)
	processed_by=CustomUser.objects.get(id=request.user.id)
	processed_by=processed_by.username

	if request.method == 'POST':
		title=request.POST.get('title')
		
		if not title:
			messages.error(request,'Title Missing')
			return HttpResponseRedirect(reverse('Event_Program_Register'))
		
		pdate=request.POST.get('pdate')
	

		date_format = '%Y-%m-%d'
		dtObj = datetime.datetime.strptime(pdate, date_format)
		pdate=get_current_date(dtObj)


		
		if Event_Title.objects.filter(title=title,pdate=pdate).exists():
			messages.error(request,'Record Already Exist')
			return HttpResponseRedirect(reverse('Event_Program_Register'))
		
		Event_Title(title=title,pdate=pdate,tdate=tdate,processed_by=processed_by).save()
		return HttpResponseRedirect(reverse('Event_Program_Register'))
	
	form.fields['pdate'].initial=get_current_date(now)
	context={
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	'form':form,
	}
	return render(request,'deskofficer_templates/Event_Program_Register.html', context)



def Event_Program_Manage_search(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)


	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"

	title="Search Programs and Events"
	form = searchForm(request.POST or None)
	return render(request,'deskofficer_templates/Event_Program_Manage_search.html',{'form':form,'title':title,'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,})



def Event_Program_Manage_list_load(request):
	tasks=System_Users_Tasks_Model.objects.filter(user=request.user)
	task_array=[]
	for task in tasks:
		task_array.append(task.task.title)



	task_enabler=TransactionEnabler.objects.filter(status="YES")
	task_enabler_array=[]
	for item in task_enabler:
		task_enabler_array.append(item.title)

	default_password="NO"
	if Staff.objects.filter(admin=request.user,default_password='YES'):
		default_password="YES"


	title="Update Membership Request"
	form = searchForm(request.POST)
	# events=Event_Title.objects.all()
	# print("===================================")
	# for item in events:
	# 	print(item.title)
	# print("*****************************************")
	events=[]
	if request.method == "POST":
	
		if not request.POST.get("title"):
			messages.error(request,'No record found')
			return HttpResponseRedirect(reverse('Event_Program_Manage_search'))

		events=Event_Title.objects.filter(Q(title__icontains=form['title'].value())).filter(status='UNTREATED')
		if not events:
			messages.error(request,'No Record Found')
			return HttpResponseRedirect(reverse('Event_Program_Manage_search'))

	context={
	'events':events,
	'title':title,
	'task_array':task_array,
	'task_enabler_array':task_enabler_array,
	'default_password':default_password,
	}
	return render(request,'deskofficer_templates/Event_Program_Manage_list_load.html',context)


def Event_Program_Manage_Delete(request,pk):
	Event_Title.objects.filter(id=pk).delete()
	return HttpResponseRedirect(reverse('Event_Program_Manage_search'))
		
